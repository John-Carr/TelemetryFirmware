gthr-default.h:229:1:int __gthread_key_delete(__gthread_key_t)	16	static
function.h:78:13:etl::ifunction<void>::~ifunction()	16	static
function.h:78:13:virtual etl::ifunction<void>::~ifunction()	16	static
function.h:72:9:constexpr etl::ifunction<void>::ifunction()	16	static
vector_base.h:150:5:etl::vector_base::vector_base(size_t)	16	static
vector_base.h:165:5:etl::vector_base::~vector_base()	16	static
pvoidvector.h:81:14:void** etl::pvoidvector::begin()	16	static
pvoidvector.h:99:14:void** etl::pvoidvector::end()	16	static
pvoidvector.h:236:15:void*& etl::pvoidvector::operator[](size_t)	16	static
pvoidvector.h:444:14:void** etl::pvoidvector::insert(etl::pvoidvector::const_iterator, etl::pvoidvector::value_type)	40	static
pvoidvector.h:617:15:etl::pvoidvector::size_type etl::pvoidvector::size() const	16	static
pvoidvector.h:635:10:bool etl::pvoidvector::full() const	16	static
pvoidvector.h:654:5:etl::pvoidvector::pvoidvector(void**, size_t)	24	static
pvoidvector.h:664:10:void etl::pvoidvector::initialise()	16	static
pvoidvector.h:688:14:void** etl::pvoidvector::to_iterator(etl::pvoidvector::const_iterator) const	16	static
task.h:65:5:etl::task::task(etl::task_priority_t)	16	static
task.h:74:13:etl::task::~task()	16	static
task.h:74:13:virtual etl::task::~task()	16	static
task.h:92:18:virtual void etl::task::on_task_added()	16	static
task.h:117:26:etl::task_priority_t etl::task::get_task_priority() const	16	static
scheduler.h:104:10:bool etl::scheduler_policy_sequential_single::schedule_tasks(etl::ivector<etl::task*>&)	32	static
scheduler.h:237:13:etl::ischeduler::~ischeduler()	16	static
scheduler.h:237:13:virtual etl::ischeduler::~ischeduler()	16	static
scheduler.h:244:10:void etl::ischeduler::set_idle_callback(etl::ifunction<void>&)	16	static
scheduler.h:252:10:void etl::ischeduler::set_watchdog_callback(etl::ifunction<void>&)	16	static
scheduler.h:276:10:void etl::ischeduler::exit_scheduler()	16	static
scheduler.h:285:10:void etl::ischeduler::add_task(etl::task&)	48	static
scheduler.h:323:5:etl::ischeduler::ischeduler(etl::ivector<etl::task*>&)	16	static
scheduler.h:344:12:bool etl::ischeduler::compare_priority::operator()(etl::task_priority_t, etl::task*) const	32	static
Scheduler.cpp:49:3:Task1::Task1()	16	static
Scheduler.cpp:57:12:virtual uint32_t Task1::task_request_work() const	16	static
Scheduler.cpp:63:8:virtual void Task1::task_process_work()	16	static
Scheduler.cpp:82:3:Task2::Task2()	16	static
Scheduler.cpp:90:12:virtual uint32_t Task2::task_request_work() const	16	static
Scheduler.cpp:96:8:virtual void Task2::task_process_work()	16	static
Scheduler.cpp:115:3:Idle::Idle(etl::ischeduler&)	16	static
Scheduler.cpp:122:8:void Idle::IdleCallback()	16	static
Scheduler.cpp:137:6:void WatchdogCallback()	8	static
pvoidvector.h:59:9:etl::pvoidvector::~pvoidvector()	16	static
ivectorpointer.h:48:9:etl::ivector<etl::task*>::~ivector()	16	static
vector.h:1521:9:etl::vector<etl::task*, 2>::~vector()	16	static
scheduler.h:358:9:etl::scheduler<etl::scheduler_policy_sequential_single, 2>::~scheduler()	16	static
scheduler.h:358:9:virtual etl::scheduler<etl::scheduler_policy_sequential_single, 2>::~scheduler()	16	static
Scheduler.cpp:152:7:Scheduler::Scheduler()	16	static
Scheduler.cpp:159:5:int main()	104	static
algorithm.h:270:14:TIterator2 etl::copy_backward(TIterator1, TIterator1, TIterator2) [with TIterator1 = void**; TIterator2 = void**]	24	static
ivectorpointer.h:219:15:T*& etl::ivector<T*>::operator[](size_t) [with T = etl::task]	16	static
ivectorpointer.h:78:14:T** etl::ivector<T*>::begin() [with T = etl::task]	16	static
ivectorpointer.h:96:14:T** etl::ivector<T*>::end() [with T = etl::task]	16	static
algorithm.h:525:13:TIterator etl::upper_bound(TIterator, TIterator, const TValue&, TCompare) [with TIterator = etl::task**; TValue = unsigned char; TCompare = etl::ischeduler::compare_priority]	32	static
ivectorpointer.h:377:14:T** etl::ivector<T*>::insert(etl::ivector<T*>::const_iterator, etl::ivector<T*>::parameter_t) [with T = etl::task]	24	static
scheduler.h:367:5:etl::scheduler<TSchedulerPolicy, MAX_TASKS_>::scheduler() [with TSchedulerPolicy = etl::scheduler_policy_sequential_single; unsigned int MAX_TASKS_ = 2]	16	static
function.h:284:14:etl::function_mv<TObject, Function>::function_mv(TObject&) [with TObject = Idle; void (TObject::* Function)() = &Idle::IdleCallback]	16	static
function.h:403:5:etl::function_fv<Function>::function_fv() [with void (* Function)() = WatchdogCallback]	16	static
scheduler.h:375:10:void etl::scheduler<TSchedulerPolicy, MAX_TASKS_>::start() [with TSchedulerPolicy = etl::scheduler_policy_sequential_single; unsigned int MAX_TASKS_ = 2]	32	static
stl_algobase.h:641:5:_BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = void**; _BI2 = void**]	32	static
stl_algo.h:2106:5:_FIter std::upper_bound(_FIter, _FIter, const _Tp&, _Compare) [with _FIter = etl::task**; _Tp = unsigned char; _Compare = etl::ischeduler::compare_priority]	32	static
vector.h:1532:5:etl::vector<T*, MAX_SIZE_>::vector() [with T = etl::task; unsigned int MAX_SIZE_ = 2]	16	static
stl_algobase.h:280:5:_Iterator std::__niter_base(_Iterator) [with _Iterator = void**]	16	static
stl_algobase.h:295:5:_Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = void**]	16	static
cpp_type_traits.h:428:5:_Iterator std::__miter_base(_Iterator) [with _Iterator = void**]	16	static
stl_algobase.h:613:5:_BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = void**; _BI2 = void**]	32	static
predefined_ops.h:220:5:__gnu_cxx::__ops::_Val_comp_iter<_Compare> __gnu_cxx::__ops::__val_comp_iter(_Compare) [with _Compare = etl::ischeduler::compare_priority]	32	static
stl_algo.h:2038:5:_ForwardIterator std::__upper_bound(_ForwardIterator, _ForwardIterator, const _Tp&, _Compare) [with _ForwardIterator = etl::task**; _Tp = unsigned char; _Compare = __gnu_cxx::__ops::_Val_comp_iter<etl::ischeduler::compare_priority>]	40	static
ivectorpointer.h:482:5:etl::ivector<T*>::ivector(T**, size_t) [with T = etl::task]	24	static
stl_algobase.h:595:5:_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = void**; _BI2 = void**]	32	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = etl::ischeduler::compare_priority&]	16	static
predefined_ops.h:196:7:__gnu_cxx::__ops::_Val_comp_iter<_Compare>::_Val_comp_iter(_Compare) [with _Compare = etl::ischeduler::compare_priority]	16	static
stl_iterator_base_funcs.h:138:5:typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = etl::task**]	32	static
stl_iterator_base_funcs.h:202:5:void std::advance(_InputIterator&, _Distance) [with _InputIterator = etl::task**; _Distance = int]	32	static
predefined_ops.h:214:2:bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&, _Iterator) [with _Value = const unsigned char; _Iterator = etl::task**; _Compare = etl::ischeduler::compare_priority]	24	static
stl_algobase.h:577:2:static _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = void*; bool _IsMove = false]	32	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = etl::task**]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = etl::task**]	24	static
stl_iterator_base_funcs.h:174:5:constexpr void std::__advance(_RandomAccessIterator&, _Distance, std::random_access_iterator_tag) [with _RandomAccessIterator = etl::task**; _Distance = int]	24	static
function.h:392:9:etl::function_fv<WatchdogCallback>::~function_fv()	16	static
function.h:392:9:virtual etl::function_fv<WatchdogCallback>::~function_fv()	16	static
function.h:273:9:etl::function_mv<Idle, &Idle::IdleCallback>::~function_mv()	16	static
function.h:273:9:virtual etl::function_mv<Idle, &Idle::IdleCallback>::~function_mv()	16	static
Scheduler.cpp:152:7:Scheduler::~Scheduler()	16	static
Scheduler.cpp:152:7:virtual Scheduler::~Scheduler()	16	static
Scheduler.cpp:77:7:Task2::~Task2()	16	static
Scheduler.cpp:77:7:virtual Task2::~Task2()	16	static
Scheduler.cpp:44:7:Task1::~Task1()	16	static
Scheduler.cpp:44:7:virtual Task1::~Task1()	16	static
Scheduler.cpp:183:1:void __static_initialization_and_destruction_0(int, int)	16	static
function.h:411:18:void etl::function_fv<Function>::operator()() const [with void (* Function)() = WatchdogCallback]	16	static
function.h:293:18:void etl::function_mv<TObject, Function>::operator()() const [with TObject = Idle; void (TObject::* Function)() = &Idle::IdleCallback]	16	static
Scheduler.cpp:183:1:cpp)	8	static
Scheduler.cpp:183:1:cpp)	8	static
