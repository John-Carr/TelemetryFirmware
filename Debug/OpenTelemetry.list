
OpenTelemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdc8  0800cdc8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800cdc8  0800cdc8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cdc8  0800cdc8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cdd0  0800cdd0  0001cdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000238c  20000094  0800ce6c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002420  0800ce6c  00022420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005349f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086d7  00000000  00000000  0007355b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  0007bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002678  00000000  00000000  0007e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a65  00000000  00000000  00080b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030d5d  00000000  00000000  000a7565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafb5  00000000  00000000  000d82c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a03c  00000000  00000000  001a32cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c25c 	.word	0x0800c25c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	0800c25c 	.word	0x0800c25c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_f2uiz>:
 8000408:	219e      	movs	r1, #158	; 0x9e
 800040a:	b510      	push	{r4, lr}
 800040c:	05c9      	lsls	r1, r1, #23
 800040e:	1c04      	adds	r4, r0, #0
 8000410:	f000 fc8c 	bl	8000d2c <__aeabi_fcmpge>
 8000414:	2800      	cmp	r0, #0
 8000416:	d103      	bne.n	8000420 <__aeabi_f2uiz+0x18>
 8000418:	1c20      	adds	r0, r4, #0
 800041a:	f000 fbfb 	bl	8000c14 <__aeabi_f2iz>
 800041e:	bd10      	pop	{r4, pc}
 8000420:	219e      	movs	r1, #158	; 0x9e
 8000422:	1c20      	adds	r0, r4, #0
 8000424:	05c9      	lsls	r1, r1, #23
 8000426:	f000 fa2d 	bl	8000884 <__aeabi_fsub>
 800042a:	f000 fbf3 	bl	8000c14 <__aeabi_f2iz>
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	061b      	lsls	r3, r3, #24
 8000432:	469c      	mov	ip, r3
 8000434:	4460      	add	r0, ip
 8000436:	e7f2      	b.n	800041e <__aeabi_f2uiz+0x16>

08000438 <__aeabi_fdiv>:
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	464f      	mov	r7, r9
 800043c:	4646      	mov	r6, r8
 800043e:	46d6      	mov	lr, sl
 8000440:	0245      	lsls	r5, r0, #9
 8000442:	b5c0      	push	{r6, r7, lr}
 8000444:	0047      	lsls	r7, r0, #1
 8000446:	1c0c      	adds	r4, r1, #0
 8000448:	0a6d      	lsrs	r5, r5, #9
 800044a:	0e3f      	lsrs	r7, r7, #24
 800044c:	0fc6      	lsrs	r6, r0, #31
 800044e:	2f00      	cmp	r7, #0
 8000450:	d066      	beq.n	8000520 <__aeabi_fdiv+0xe8>
 8000452:	2fff      	cmp	r7, #255	; 0xff
 8000454:	d06c      	beq.n	8000530 <__aeabi_fdiv+0xf8>
 8000456:	2300      	movs	r3, #0
 8000458:	00ea      	lsls	r2, r5, #3
 800045a:	2580      	movs	r5, #128	; 0x80
 800045c:	4699      	mov	r9, r3
 800045e:	469a      	mov	sl, r3
 8000460:	04ed      	lsls	r5, r5, #19
 8000462:	4315      	orrs	r5, r2
 8000464:	3f7f      	subs	r7, #127	; 0x7f
 8000466:	0260      	lsls	r0, r4, #9
 8000468:	0061      	lsls	r1, r4, #1
 800046a:	0a43      	lsrs	r3, r0, #9
 800046c:	4698      	mov	r8, r3
 800046e:	0e09      	lsrs	r1, r1, #24
 8000470:	0fe4      	lsrs	r4, r4, #31
 8000472:	2900      	cmp	r1, #0
 8000474:	d048      	beq.n	8000508 <__aeabi_fdiv+0xd0>
 8000476:	29ff      	cmp	r1, #255	; 0xff
 8000478:	d010      	beq.n	800049c <__aeabi_fdiv+0x64>
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	00d8      	lsls	r0, r3, #3
 800047e:	04d2      	lsls	r2, r2, #19
 8000480:	4302      	orrs	r2, r0
 8000482:	4690      	mov	r8, r2
 8000484:	2000      	movs	r0, #0
 8000486:	397f      	subs	r1, #127	; 0x7f
 8000488:	464a      	mov	r2, r9
 800048a:	0033      	movs	r3, r6
 800048c:	1a7f      	subs	r7, r7, r1
 800048e:	4302      	orrs	r2, r0
 8000490:	496c      	ldr	r1, [pc, #432]	; (8000644 <__aeabi_fdiv+0x20c>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	588a      	ldr	r2, [r1, r2]
 8000496:	4063      	eors	r3, r4
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4697      	mov	pc, r2
 800049c:	2b00      	cmp	r3, #0
 800049e:	d16d      	bne.n	800057c <__aeabi_fdiv+0x144>
 80004a0:	2002      	movs	r0, #2
 80004a2:	3fff      	subs	r7, #255	; 0xff
 80004a4:	e033      	b.n	800050e <__aeabi_fdiv+0xd6>
 80004a6:	2300      	movs	r3, #0
 80004a8:	4698      	mov	r8, r3
 80004aa:	0026      	movs	r6, r4
 80004ac:	4645      	mov	r5, r8
 80004ae:	4682      	mov	sl, r0
 80004b0:	4653      	mov	r3, sl
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fdiv+0x80>
 80004b6:	e07f      	b.n	80005b8 <__aeabi_fdiv+0x180>
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d100      	bne.n	80004be <__aeabi_fdiv+0x86>
 80004bc:	e094      	b.n	80005e8 <__aeabi_fdiv+0x1b0>
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d017      	beq.n	80004f2 <__aeabi_fdiv+0xba>
 80004c2:	0038      	movs	r0, r7
 80004c4:	307f      	adds	r0, #127	; 0x7f
 80004c6:	2800      	cmp	r0, #0
 80004c8:	dd5f      	ble.n	800058a <__aeabi_fdiv+0x152>
 80004ca:	076b      	lsls	r3, r5, #29
 80004cc:	d004      	beq.n	80004d8 <__aeabi_fdiv+0xa0>
 80004ce:	230f      	movs	r3, #15
 80004d0:	402b      	ands	r3, r5
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d000      	beq.n	80004d8 <__aeabi_fdiv+0xa0>
 80004d6:	3504      	adds	r5, #4
 80004d8:	012b      	lsls	r3, r5, #4
 80004da:	d503      	bpl.n	80004e4 <__aeabi_fdiv+0xac>
 80004dc:	0038      	movs	r0, r7
 80004de:	4b5a      	ldr	r3, [pc, #360]	; (8000648 <__aeabi_fdiv+0x210>)
 80004e0:	3080      	adds	r0, #128	; 0x80
 80004e2:	401d      	ands	r5, r3
 80004e4:	28fe      	cmp	r0, #254	; 0xfe
 80004e6:	dc67      	bgt.n	80005b8 <__aeabi_fdiv+0x180>
 80004e8:	01ad      	lsls	r5, r5, #6
 80004ea:	0a6d      	lsrs	r5, r5, #9
 80004ec:	b2c0      	uxtb	r0, r0
 80004ee:	e002      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80004f0:	001e      	movs	r6, r3
 80004f2:	2000      	movs	r0, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	05c0      	lsls	r0, r0, #23
 80004f8:	4328      	orrs	r0, r5
 80004fa:	07f6      	lsls	r6, r6, #31
 80004fc:	4330      	orrs	r0, r6
 80004fe:	bce0      	pop	{r5, r6, r7}
 8000500:	46ba      	mov	sl, r7
 8000502:	46b1      	mov	r9, r6
 8000504:	46a8      	mov	r8, r5
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	2b00      	cmp	r3, #0
 800050a:	d12b      	bne.n	8000564 <__aeabi_fdiv+0x12c>
 800050c:	2001      	movs	r0, #1
 800050e:	464a      	mov	r2, r9
 8000510:	0033      	movs	r3, r6
 8000512:	494e      	ldr	r1, [pc, #312]	; (800064c <__aeabi_fdiv+0x214>)
 8000514:	4302      	orrs	r2, r0
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	588a      	ldr	r2, [r1, r2]
 800051a:	4063      	eors	r3, r4
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4697      	mov	pc, r2
 8000520:	2d00      	cmp	r5, #0
 8000522:	d113      	bne.n	800054c <__aeabi_fdiv+0x114>
 8000524:	2304      	movs	r3, #4
 8000526:	4699      	mov	r9, r3
 8000528:	3b03      	subs	r3, #3
 800052a:	2700      	movs	r7, #0
 800052c:	469a      	mov	sl, r3
 800052e:	e79a      	b.n	8000466 <__aeabi_fdiv+0x2e>
 8000530:	2d00      	cmp	r5, #0
 8000532:	d105      	bne.n	8000540 <__aeabi_fdiv+0x108>
 8000534:	2308      	movs	r3, #8
 8000536:	4699      	mov	r9, r3
 8000538:	3b06      	subs	r3, #6
 800053a:	27ff      	movs	r7, #255	; 0xff
 800053c:	469a      	mov	sl, r3
 800053e:	e792      	b.n	8000466 <__aeabi_fdiv+0x2e>
 8000540:	230c      	movs	r3, #12
 8000542:	4699      	mov	r9, r3
 8000544:	3b09      	subs	r3, #9
 8000546:	27ff      	movs	r7, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e78c      	b.n	8000466 <__aeabi_fdiv+0x2e>
 800054c:	0028      	movs	r0, r5
 800054e:	f000 fbf7 	bl	8000d40 <__clzsi2>
 8000552:	2776      	movs	r7, #118	; 0x76
 8000554:	1f43      	subs	r3, r0, #5
 8000556:	409d      	lsls	r5, r3
 8000558:	2300      	movs	r3, #0
 800055a:	427f      	negs	r7, r7
 800055c:	4699      	mov	r9, r3
 800055e:	469a      	mov	sl, r3
 8000560:	1a3f      	subs	r7, r7, r0
 8000562:	e780      	b.n	8000466 <__aeabi_fdiv+0x2e>
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fbeb 	bl	8000d40 <__clzsi2>
 800056a:	4642      	mov	r2, r8
 800056c:	1f43      	subs	r3, r0, #5
 800056e:	2176      	movs	r1, #118	; 0x76
 8000570:	409a      	lsls	r2, r3
 8000572:	4249      	negs	r1, r1
 8000574:	1a09      	subs	r1, r1, r0
 8000576:	4690      	mov	r8, r2
 8000578:	2000      	movs	r0, #0
 800057a:	e785      	b.n	8000488 <__aeabi_fdiv+0x50>
 800057c:	21ff      	movs	r1, #255	; 0xff
 800057e:	2003      	movs	r0, #3
 8000580:	e782      	b.n	8000488 <__aeabi_fdiv+0x50>
 8000582:	001e      	movs	r6, r3
 8000584:	20ff      	movs	r0, #255	; 0xff
 8000586:	2500      	movs	r5, #0
 8000588:	e7b5      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 800058a:	2301      	movs	r3, #1
 800058c:	1a1b      	subs	r3, r3, r0
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dcaf      	bgt.n	80004f2 <__aeabi_fdiv+0xba>
 8000592:	379e      	adds	r7, #158	; 0x9e
 8000594:	0029      	movs	r1, r5
 8000596:	40bd      	lsls	r5, r7
 8000598:	40d9      	lsrs	r1, r3
 800059a:	1e6a      	subs	r2, r5, #1
 800059c:	4195      	sbcs	r5, r2
 800059e:	430d      	orrs	r5, r1
 80005a0:	076b      	lsls	r3, r5, #29
 80005a2:	d004      	beq.n	80005ae <__aeabi_fdiv+0x176>
 80005a4:	230f      	movs	r3, #15
 80005a6:	402b      	ands	r3, r5
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d000      	beq.n	80005ae <__aeabi_fdiv+0x176>
 80005ac:	3504      	adds	r5, #4
 80005ae:	016b      	lsls	r3, r5, #5
 80005b0:	d544      	bpl.n	800063c <__aeabi_fdiv+0x204>
 80005b2:	2001      	movs	r0, #1
 80005b4:	2500      	movs	r5, #0
 80005b6:	e79e      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	2500      	movs	r5, #0
 80005bc:	e79b      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80005be:	2580      	movs	r5, #128	; 0x80
 80005c0:	2600      	movs	r6, #0
 80005c2:	20ff      	movs	r0, #255	; 0xff
 80005c4:	03ed      	lsls	r5, r5, #15
 80005c6:	e796      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4698      	mov	r8, r3
 80005cc:	2080      	movs	r0, #128	; 0x80
 80005ce:	03c0      	lsls	r0, r0, #15
 80005d0:	4205      	tst	r5, r0
 80005d2:	d009      	beq.n	80005e8 <__aeabi_fdiv+0x1b0>
 80005d4:	4643      	mov	r3, r8
 80005d6:	4203      	tst	r3, r0
 80005d8:	d106      	bne.n	80005e8 <__aeabi_fdiv+0x1b0>
 80005da:	4645      	mov	r5, r8
 80005dc:	4305      	orrs	r5, r0
 80005de:	026d      	lsls	r5, r5, #9
 80005e0:	0026      	movs	r6, r4
 80005e2:	20ff      	movs	r0, #255	; 0xff
 80005e4:	0a6d      	lsrs	r5, r5, #9
 80005e6:	e786      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80005e8:	2080      	movs	r0, #128	; 0x80
 80005ea:	03c0      	lsls	r0, r0, #15
 80005ec:	4305      	orrs	r5, r0
 80005ee:	026d      	lsls	r5, r5, #9
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	0a6d      	lsrs	r5, r5, #9
 80005f4:	e77f      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 80005f6:	4641      	mov	r1, r8
 80005f8:	016a      	lsls	r2, r5, #5
 80005fa:	0148      	lsls	r0, r1, #5
 80005fc:	4282      	cmp	r2, r0
 80005fe:	d219      	bcs.n	8000634 <__aeabi_fdiv+0x1fc>
 8000600:	211b      	movs	r1, #27
 8000602:	2500      	movs	r5, #0
 8000604:	3f01      	subs	r7, #1
 8000606:	2601      	movs	r6, #1
 8000608:	0014      	movs	r4, r2
 800060a:	006d      	lsls	r5, r5, #1
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	2c00      	cmp	r4, #0
 8000610:	db01      	blt.n	8000616 <__aeabi_fdiv+0x1de>
 8000612:	4290      	cmp	r0, r2
 8000614:	d801      	bhi.n	800061a <__aeabi_fdiv+0x1e2>
 8000616:	1a12      	subs	r2, r2, r0
 8000618:	4335      	orrs	r5, r6
 800061a:	3901      	subs	r1, #1
 800061c:	2900      	cmp	r1, #0
 800061e:	d1f3      	bne.n	8000608 <__aeabi_fdiv+0x1d0>
 8000620:	1e50      	subs	r0, r2, #1
 8000622:	4182      	sbcs	r2, r0
 8000624:	0038      	movs	r0, r7
 8000626:	307f      	adds	r0, #127	; 0x7f
 8000628:	001e      	movs	r6, r3
 800062a:	4315      	orrs	r5, r2
 800062c:	2800      	cmp	r0, #0
 800062e:	dd00      	ble.n	8000632 <__aeabi_fdiv+0x1fa>
 8000630:	e74b      	b.n	80004ca <__aeabi_fdiv+0x92>
 8000632:	e7aa      	b.n	800058a <__aeabi_fdiv+0x152>
 8000634:	211a      	movs	r1, #26
 8000636:	2501      	movs	r5, #1
 8000638:	1a12      	subs	r2, r2, r0
 800063a:	e7e4      	b.n	8000606 <__aeabi_fdiv+0x1ce>
 800063c:	01ad      	lsls	r5, r5, #6
 800063e:	2000      	movs	r0, #0
 8000640:	0a6d      	lsrs	r5, r5, #9
 8000642:	e758      	b.n	80004f6 <__aeabi_fdiv+0xbe>
 8000644:	0800cb08 	.word	0x0800cb08
 8000648:	f7ffffff 	.word	0xf7ffffff
 800064c:	0800cb48 	.word	0x0800cb48

08000650 <__aeabi_fmul>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	4657      	mov	r7, sl
 8000654:	464e      	mov	r6, r9
 8000656:	4645      	mov	r5, r8
 8000658:	46de      	mov	lr, fp
 800065a:	0244      	lsls	r4, r0, #9
 800065c:	b5e0      	push	{r5, r6, r7, lr}
 800065e:	0045      	lsls	r5, r0, #1
 8000660:	1c0f      	adds	r7, r1, #0
 8000662:	0a64      	lsrs	r4, r4, #9
 8000664:	0e2d      	lsrs	r5, r5, #24
 8000666:	0fc6      	lsrs	r6, r0, #31
 8000668:	2d00      	cmp	r5, #0
 800066a:	d047      	beq.n	80006fc <__aeabi_fmul+0xac>
 800066c:	2dff      	cmp	r5, #255	; 0xff
 800066e:	d04d      	beq.n	800070c <__aeabi_fmul+0xbc>
 8000670:	2300      	movs	r3, #0
 8000672:	2080      	movs	r0, #128	; 0x80
 8000674:	469a      	mov	sl, r3
 8000676:	469b      	mov	fp, r3
 8000678:	00e4      	lsls	r4, r4, #3
 800067a:	04c0      	lsls	r0, r0, #19
 800067c:	4304      	orrs	r4, r0
 800067e:	3d7f      	subs	r5, #127	; 0x7f
 8000680:	0278      	lsls	r0, r7, #9
 8000682:	0a43      	lsrs	r3, r0, #9
 8000684:	4699      	mov	r9, r3
 8000686:	007a      	lsls	r2, r7, #1
 8000688:	0ffb      	lsrs	r3, r7, #31
 800068a:	4698      	mov	r8, r3
 800068c:	0e12      	lsrs	r2, r2, #24
 800068e:	464b      	mov	r3, r9
 8000690:	d044      	beq.n	800071c <__aeabi_fmul+0xcc>
 8000692:	2aff      	cmp	r2, #255	; 0xff
 8000694:	d011      	beq.n	80006ba <__aeabi_fmul+0x6a>
 8000696:	00d8      	lsls	r0, r3, #3
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	04db      	lsls	r3, r3, #19
 800069c:	4303      	orrs	r3, r0
 800069e:	4699      	mov	r9, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	3a7f      	subs	r2, #127	; 0x7f
 80006a4:	18ad      	adds	r5, r5, r2
 80006a6:	4647      	mov	r7, r8
 80006a8:	4653      	mov	r3, sl
 80006aa:	4077      	eors	r7, r6
 80006ac:	1c69      	adds	r1, r5, #1
 80006ae:	2b0f      	cmp	r3, #15
 80006b0:	d83f      	bhi.n	8000732 <__aeabi_fmul+0xe2>
 80006b2:	4a72      	ldr	r2, [pc, #456]	; (800087c <__aeabi_fmul+0x22c>)
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	58d3      	ldr	r3, [r2, r3]
 80006b8:	469f      	mov	pc, r3
 80006ba:	35ff      	adds	r5, #255	; 0xff
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fmul+0x72>
 80006c0:	e079      	b.n	80007b6 <__aeabi_fmul+0x166>
 80006c2:	4652      	mov	r2, sl
 80006c4:	2302      	movs	r3, #2
 80006c6:	431a      	orrs	r2, r3
 80006c8:	4692      	mov	sl, r2
 80006ca:	2002      	movs	r0, #2
 80006cc:	e7eb      	b.n	80006a6 <__aeabi_fmul+0x56>
 80006ce:	4647      	mov	r7, r8
 80006d0:	464c      	mov	r4, r9
 80006d2:	4683      	mov	fp, r0
 80006d4:	465b      	mov	r3, fp
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d028      	beq.n	800072c <__aeabi_fmul+0xdc>
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fmul+0x90>
 80006de:	e0c6      	b.n	800086e <__aeabi_fmul+0x21e>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d14f      	bne.n	8000784 <__aeabi_fmul+0x134>
 80006e4:	2000      	movs	r0, #0
 80006e6:	2400      	movs	r4, #0
 80006e8:	05c0      	lsls	r0, r0, #23
 80006ea:	07ff      	lsls	r7, r7, #31
 80006ec:	4320      	orrs	r0, r4
 80006ee:	4338      	orrs	r0, r7
 80006f0:	bcf0      	pop	{r4, r5, r6, r7}
 80006f2:	46bb      	mov	fp, r7
 80006f4:	46b2      	mov	sl, r6
 80006f6:	46a9      	mov	r9, r5
 80006f8:	46a0      	mov	r8, r4
 80006fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d171      	bne.n	80007e4 <__aeabi_fmul+0x194>
 8000700:	2304      	movs	r3, #4
 8000702:	469a      	mov	sl, r3
 8000704:	3b03      	subs	r3, #3
 8000706:	2500      	movs	r5, #0
 8000708:	469b      	mov	fp, r3
 800070a:	e7b9      	b.n	8000680 <__aeabi_fmul+0x30>
 800070c:	2c00      	cmp	r4, #0
 800070e:	d163      	bne.n	80007d8 <__aeabi_fmul+0x188>
 8000710:	2308      	movs	r3, #8
 8000712:	469a      	mov	sl, r3
 8000714:	3b06      	subs	r3, #6
 8000716:	25ff      	movs	r5, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e7b1      	b.n	8000680 <__aeabi_fmul+0x30>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d150      	bne.n	80007c2 <__aeabi_fmul+0x172>
 8000720:	4652      	mov	r2, sl
 8000722:	3301      	adds	r3, #1
 8000724:	431a      	orrs	r2, r3
 8000726:	4692      	mov	sl, r2
 8000728:	2001      	movs	r0, #1
 800072a:	e7bc      	b.n	80006a6 <__aeabi_fmul+0x56>
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	2400      	movs	r4, #0
 8000730:	e7da      	b.n	80006e8 <__aeabi_fmul+0x98>
 8000732:	4648      	mov	r0, r9
 8000734:	0c26      	lsrs	r6, r4, #16
 8000736:	0424      	lsls	r4, r4, #16
 8000738:	0c22      	lsrs	r2, r4, #16
 800073a:	0404      	lsls	r4, r0, #16
 800073c:	0c24      	lsrs	r4, r4, #16
 800073e:	464b      	mov	r3, r9
 8000740:	0020      	movs	r0, r4
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	4350      	muls	r0, r2
 8000746:	4374      	muls	r4, r6
 8000748:	435a      	muls	r2, r3
 800074a:	435e      	muls	r6, r3
 800074c:	1912      	adds	r2, r2, r4
 800074e:	0c03      	lsrs	r3, r0, #16
 8000750:	189b      	adds	r3, r3, r2
 8000752:	429c      	cmp	r4, r3
 8000754:	d903      	bls.n	800075e <__aeabi_fmul+0x10e>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0252      	lsls	r2, r2, #9
 800075a:	4694      	mov	ip, r2
 800075c:	4466      	add	r6, ip
 800075e:	0400      	lsls	r0, r0, #16
 8000760:	041a      	lsls	r2, r3, #16
 8000762:	0c00      	lsrs	r0, r0, #16
 8000764:	1812      	adds	r2, r2, r0
 8000766:	0194      	lsls	r4, r2, #6
 8000768:	1e60      	subs	r0, r4, #1
 800076a:	4184      	sbcs	r4, r0
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	0e92      	lsrs	r2, r2, #26
 8000770:	199b      	adds	r3, r3, r6
 8000772:	4314      	orrs	r4, r2
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	431c      	orrs	r4, r3
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	d572      	bpl.n	8000862 <__aeabi_fmul+0x212>
 800077c:	2001      	movs	r0, #1
 800077e:	0863      	lsrs	r3, r4, #1
 8000780:	4004      	ands	r4, r0
 8000782:	431c      	orrs	r4, r3
 8000784:	0008      	movs	r0, r1
 8000786:	307f      	adds	r0, #127	; 0x7f
 8000788:	2800      	cmp	r0, #0
 800078a:	dd3c      	ble.n	8000806 <__aeabi_fmul+0x1b6>
 800078c:	0763      	lsls	r3, r4, #29
 800078e:	d004      	beq.n	800079a <__aeabi_fmul+0x14a>
 8000790:	230f      	movs	r3, #15
 8000792:	4023      	ands	r3, r4
 8000794:	2b04      	cmp	r3, #4
 8000796:	d000      	beq.n	800079a <__aeabi_fmul+0x14a>
 8000798:	3404      	adds	r4, #4
 800079a:	0123      	lsls	r3, r4, #4
 800079c:	d503      	bpl.n	80007a6 <__aeabi_fmul+0x156>
 800079e:	3180      	adds	r1, #128	; 0x80
 80007a0:	0008      	movs	r0, r1
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <__aeabi_fmul+0x230>)
 80007a4:	401c      	ands	r4, r3
 80007a6:	28fe      	cmp	r0, #254	; 0xfe
 80007a8:	dcc0      	bgt.n	800072c <__aeabi_fmul+0xdc>
 80007aa:	01a4      	lsls	r4, r4, #6
 80007ac:	0a64      	lsrs	r4, r4, #9
 80007ae:	b2c0      	uxtb	r0, r0
 80007b0:	e79a      	b.n	80006e8 <__aeabi_fmul+0x98>
 80007b2:	0037      	movs	r7, r6
 80007b4:	e78e      	b.n	80006d4 <__aeabi_fmul+0x84>
 80007b6:	4652      	mov	r2, sl
 80007b8:	2303      	movs	r3, #3
 80007ba:	431a      	orrs	r2, r3
 80007bc:	4692      	mov	sl, r2
 80007be:	2003      	movs	r0, #3
 80007c0:	e771      	b.n	80006a6 <__aeabi_fmul+0x56>
 80007c2:	4648      	mov	r0, r9
 80007c4:	f000 fabc 	bl	8000d40 <__clzsi2>
 80007c8:	464a      	mov	r2, r9
 80007ca:	1f43      	subs	r3, r0, #5
 80007cc:	409a      	lsls	r2, r3
 80007ce:	1a2d      	subs	r5, r5, r0
 80007d0:	4691      	mov	r9, r2
 80007d2:	2000      	movs	r0, #0
 80007d4:	3d76      	subs	r5, #118	; 0x76
 80007d6:	e766      	b.n	80006a6 <__aeabi_fmul+0x56>
 80007d8:	230c      	movs	r3, #12
 80007da:	469a      	mov	sl, r3
 80007dc:	3b09      	subs	r3, #9
 80007de:	25ff      	movs	r5, #255	; 0xff
 80007e0:	469b      	mov	fp, r3
 80007e2:	e74d      	b.n	8000680 <__aeabi_fmul+0x30>
 80007e4:	0020      	movs	r0, r4
 80007e6:	f000 faab 	bl	8000d40 <__clzsi2>
 80007ea:	2576      	movs	r5, #118	; 0x76
 80007ec:	1f43      	subs	r3, r0, #5
 80007ee:	409c      	lsls	r4, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	426d      	negs	r5, r5
 80007f4:	469a      	mov	sl, r3
 80007f6:	469b      	mov	fp, r3
 80007f8:	1a2d      	subs	r5, r5, r0
 80007fa:	e741      	b.n	8000680 <__aeabi_fmul+0x30>
 80007fc:	2480      	movs	r4, #128	; 0x80
 80007fe:	2700      	movs	r7, #0
 8000800:	20ff      	movs	r0, #255	; 0xff
 8000802:	03e4      	lsls	r4, r4, #15
 8000804:	e770      	b.n	80006e8 <__aeabi_fmul+0x98>
 8000806:	2301      	movs	r3, #1
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	2b1b      	cmp	r3, #27
 800080c:	dd00      	ble.n	8000810 <__aeabi_fmul+0x1c0>
 800080e:	e769      	b.n	80006e4 <__aeabi_fmul+0x94>
 8000810:	319e      	adds	r1, #158	; 0x9e
 8000812:	0020      	movs	r0, r4
 8000814:	408c      	lsls	r4, r1
 8000816:	40d8      	lsrs	r0, r3
 8000818:	1e63      	subs	r3, r4, #1
 800081a:	419c      	sbcs	r4, r3
 800081c:	4304      	orrs	r4, r0
 800081e:	0763      	lsls	r3, r4, #29
 8000820:	d004      	beq.n	800082c <__aeabi_fmul+0x1dc>
 8000822:	230f      	movs	r3, #15
 8000824:	4023      	ands	r3, r4
 8000826:	2b04      	cmp	r3, #4
 8000828:	d000      	beq.n	800082c <__aeabi_fmul+0x1dc>
 800082a:	3404      	adds	r4, #4
 800082c:	0163      	lsls	r3, r4, #5
 800082e:	d51a      	bpl.n	8000866 <__aeabi_fmul+0x216>
 8000830:	2001      	movs	r0, #1
 8000832:	2400      	movs	r4, #0
 8000834:	e758      	b.n	80006e8 <__aeabi_fmul+0x98>
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	03c0      	lsls	r0, r0, #15
 800083a:	4204      	tst	r4, r0
 800083c:	d009      	beq.n	8000852 <__aeabi_fmul+0x202>
 800083e:	464b      	mov	r3, r9
 8000840:	4203      	tst	r3, r0
 8000842:	d106      	bne.n	8000852 <__aeabi_fmul+0x202>
 8000844:	464c      	mov	r4, r9
 8000846:	4304      	orrs	r4, r0
 8000848:	0264      	lsls	r4, r4, #9
 800084a:	4647      	mov	r7, r8
 800084c:	20ff      	movs	r0, #255	; 0xff
 800084e:	0a64      	lsrs	r4, r4, #9
 8000850:	e74a      	b.n	80006e8 <__aeabi_fmul+0x98>
 8000852:	2080      	movs	r0, #128	; 0x80
 8000854:	03c0      	lsls	r0, r0, #15
 8000856:	4304      	orrs	r4, r0
 8000858:	0264      	lsls	r4, r4, #9
 800085a:	0037      	movs	r7, r6
 800085c:	20ff      	movs	r0, #255	; 0xff
 800085e:	0a64      	lsrs	r4, r4, #9
 8000860:	e742      	b.n	80006e8 <__aeabi_fmul+0x98>
 8000862:	0029      	movs	r1, r5
 8000864:	e78e      	b.n	8000784 <__aeabi_fmul+0x134>
 8000866:	01a4      	lsls	r4, r4, #6
 8000868:	2000      	movs	r0, #0
 800086a:	0a64      	lsrs	r4, r4, #9
 800086c:	e73c      	b.n	80006e8 <__aeabi_fmul+0x98>
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	03c0      	lsls	r0, r0, #15
 8000872:	4304      	orrs	r4, r0
 8000874:	0264      	lsls	r4, r4, #9
 8000876:	20ff      	movs	r0, #255	; 0xff
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	e735      	b.n	80006e8 <__aeabi_fmul+0x98>
 800087c:	0800cb88 	.word	0x0800cb88
 8000880:	f7ffffff 	.word	0xf7ffffff

08000884 <__aeabi_fsub>:
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	4646      	mov	r6, r8
 8000888:	46d6      	mov	lr, sl
 800088a:	464f      	mov	r7, r9
 800088c:	0243      	lsls	r3, r0, #9
 800088e:	0a5b      	lsrs	r3, r3, #9
 8000890:	00da      	lsls	r2, r3, #3
 8000892:	4694      	mov	ip, r2
 8000894:	024a      	lsls	r2, r1, #9
 8000896:	b5c0      	push	{r6, r7, lr}
 8000898:	0044      	lsls	r4, r0, #1
 800089a:	0a56      	lsrs	r6, r2, #9
 800089c:	1c05      	adds	r5, r0, #0
 800089e:	46b0      	mov	r8, r6
 80008a0:	0e24      	lsrs	r4, r4, #24
 80008a2:	004e      	lsls	r6, r1, #1
 80008a4:	0992      	lsrs	r2, r2, #6
 80008a6:	001f      	movs	r7, r3
 80008a8:	0020      	movs	r0, r4
 80008aa:	4692      	mov	sl, r2
 80008ac:	0fed      	lsrs	r5, r5, #31
 80008ae:	0e36      	lsrs	r6, r6, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2eff      	cmp	r6, #255	; 0xff
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fsub+0x34>
 80008b6:	e07f      	b.n	80009b8 <__aeabi_fsub+0x134>
 80008b8:	2201      	movs	r2, #1
 80008ba:	4051      	eors	r1, r2
 80008bc:	428d      	cmp	r5, r1
 80008be:	d051      	beq.n	8000964 <__aeabi_fsub+0xe0>
 80008c0:	1ba2      	subs	r2, r4, r6
 80008c2:	4691      	mov	r9, r2
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	dc00      	bgt.n	80008ca <__aeabi_fsub+0x46>
 80008c8:	e07e      	b.n	80009c8 <__aeabi_fsub+0x144>
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x4c>
 80008ce:	e099      	b.n	8000a04 <__aeabi_fsub+0x180>
 80008d0:	2cff      	cmp	r4, #255	; 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x52>
 80008d4:	e08c      	b.n	80009f0 <__aeabi_fsub+0x16c>
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	4652      	mov	r2, sl
 80008da:	04db      	lsls	r3, r3, #19
 80008dc:	431a      	orrs	r2, r3
 80008de:	4692      	mov	sl, r2
 80008e0:	464a      	mov	r2, r9
 80008e2:	2301      	movs	r3, #1
 80008e4:	2a1b      	cmp	r2, #27
 80008e6:	dc08      	bgt.n	80008fa <__aeabi_fsub+0x76>
 80008e8:	4653      	mov	r3, sl
 80008ea:	2120      	movs	r1, #32
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	1a89      	subs	r1, r1, r2
 80008f0:	4652      	mov	r2, sl
 80008f2:	408a      	lsls	r2, r1
 80008f4:	1e51      	subs	r1, r2, #1
 80008f6:	418a      	sbcs	r2, r1
 80008f8:	4313      	orrs	r3, r2
 80008fa:	4662      	mov	r2, ip
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	d400      	bmi.n	8000904 <__aeabi_fsub+0x80>
 8000902:	e0f3      	b.n	8000aec <__aeabi_fsub+0x268>
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	099e      	lsrs	r6, r3, #6
 8000908:	0030      	movs	r0, r6
 800090a:	f000 fa19 	bl	8000d40 <__clzsi2>
 800090e:	3805      	subs	r0, #5
 8000910:	4086      	lsls	r6, r0
 8000912:	4284      	cmp	r4, r0
 8000914:	dd00      	ble.n	8000918 <__aeabi_fsub+0x94>
 8000916:	e0f7      	b.n	8000b08 <__aeabi_fsub+0x284>
 8000918:	0032      	movs	r2, r6
 800091a:	1b04      	subs	r4, r0, r4
 800091c:	2020      	movs	r0, #32
 800091e:	3401      	adds	r4, #1
 8000920:	40e2      	lsrs	r2, r4
 8000922:	1b04      	subs	r4, r0, r4
 8000924:	40a6      	lsls	r6, r4
 8000926:	0033      	movs	r3, r6
 8000928:	1e5e      	subs	r6, r3, #1
 800092a:	41b3      	sbcs	r3, r6
 800092c:	2400      	movs	r4, #0
 800092e:	4313      	orrs	r3, r2
 8000930:	075a      	lsls	r2, r3, #29
 8000932:	d004      	beq.n	800093e <__aeabi_fsub+0xba>
 8000934:	220f      	movs	r2, #15
 8000936:	401a      	ands	r2, r3
 8000938:	2a04      	cmp	r2, #4
 800093a:	d000      	beq.n	800093e <__aeabi_fsub+0xba>
 800093c:	3304      	adds	r3, #4
 800093e:	015a      	lsls	r2, r3, #5
 8000940:	d400      	bmi.n	8000944 <__aeabi_fsub+0xc0>
 8000942:	e0d6      	b.n	8000af2 <__aeabi_fsub+0x26e>
 8000944:	1c62      	adds	r2, r4, #1
 8000946:	2cfe      	cmp	r4, #254	; 0xfe
 8000948:	d100      	bne.n	800094c <__aeabi_fsub+0xc8>
 800094a:	e0da      	b.n	8000b02 <__aeabi_fsub+0x27e>
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	0a5f      	lsrs	r7, r3, #9
 8000950:	b2d0      	uxtb	r0, r2
 8000952:	05c0      	lsls	r0, r0, #23
 8000954:	4338      	orrs	r0, r7
 8000956:	07ed      	lsls	r5, r5, #31
 8000958:	4328      	orrs	r0, r5
 800095a:	bce0      	pop	{r5, r6, r7}
 800095c:	46ba      	mov	sl, r7
 800095e:	46b1      	mov	r9, r6
 8000960:	46a8      	mov	r8, r5
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000964:	1ba2      	subs	r2, r4, r6
 8000966:	4691      	mov	r9, r2
 8000968:	2a00      	cmp	r2, #0
 800096a:	dd63      	ble.n	8000a34 <__aeabi_fsub+0x1b0>
 800096c:	2e00      	cmp	r6, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0xee>
 8000970:	e099      	b.n	8000aa6 <__aeabi_fsub+0x222>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d03c      	beq.n	80009f0 <__aeabi_fsub+0x16c>
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	4652      	mov	r2, sl
 800097a:	04db      	lsls	r3, r3, #19
 800097c:	431a      	orrs	r2, r3
 800097e:	4692      	mov	sl, r2
 8000980:	464a      	mov	r2, r9
 8000982:	2301      	movs	r3, #1
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dc08      	bgt.n	800099a <__aeabi_fsub+0x116>
 8000988:	4653      	mov	r3, sl
 800098a:	2120      	movs	r1, #32
 800098c:	40d3      	lsrs	r3, r2
 800098e:	1a89      	subs	r1, r1, r2
 8000990:	4652      	mov	r2, sl
 8000992:	408a      	lsls	r2, r1
 8000994:	1e51      	subs	r1, r2, #1
 8000996:	418a      	sbcs	r2, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	4463      	add	r3, ip
 800099c:	015a      	lsls	r2, r3, #5
 800099e:	d400      	bmi.n	80009a2 <__aeabi_fsub+0x11e>
 80009a0:	e0a4      	b.n	8000aec <__aeabi_fsub+0x268>
 80009a2:	3401      	adds	r4, #1
 80009a4:	2cff      	cmp	r4, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x126>
 80009a8:	e0ab      	b.n	8000b02 <__aeabi_fsub+0x27e>
 80009aa:	2201      	movs	r2, #1
 80009ac:	4997      	ldr	r1, [pc, #604]	; (8000c0c <__aeabi_fsub+0x388>)
 80009ae:	401a      	ands	r2, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	400b      	ands	r3, r1
 80009b4:	4313      	orrs	r3, r2
 80009b6:	e7bb      	b.n	8000930 <__aeabi_fsub+0xac>
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d032      	beq.n	8000a22 <__aeabi_fsub+0x19e>
 80009bc:	428d      	cmp	r5, r1
 80009be:	d035      	beq.n	8000a2c <__aeabi_fsub+0x1a8>
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	4252      	negs	r2, r2
 80009c4:	4691      	mov	r9, r2
 80009c6:	44a1      	add	r9, r4
 80009c8:	464a      	mov	r2, r9
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d051      	beq.n	8000a72 <__aeabi_fsub+0x1ee>
 80009ce:	1b30      	subs	r0, r6, r4
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x152>
 80009d4:	e09c      	b.n	8000b10 <__aeabi_fsub+0x28c>
 80009d6:	4663      	mov	r3, ip
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fsub+0x15a>
 80009dc:	e0df      	b.n	8000b9e <__aeabi_fsub+0x31a>
 80009de:	3801      	subs	r0, #1
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fsub+0x162>
 80009e4:	e0f7      	b.n	8000bd6 <__aeabi_fsub+0x352>
 80009e6:	2eff      	cmp	r6, #255	; 0xff
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x168>
 80009ea:	e099      	b.n	8000b20 <__aeabi_fsub+0x29c>
 80009ec:	000d      	movs	r5, r1
 80009ee:	4643      	mov	r3, r8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x172>
 80009f4:	e085      	b.n	8000b02 <__aeabi_fsub+0x27e>
 80009f6:	2780      	movs	r7, #128	; 0x80
 80009f8:	03ff      	lsls	r7, r7, #15
 80009fa:	431f      	orrs	r7, r3
 80009fc:	027f      	lsls	r7, r7, #9
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	0a7f      	lsrs	r7, r7, #9
 8000a02:	e7a6      	b.n	8000952 <__aeabi_fsub+0xce>
 8000a04:	4652      	mov	r2, sl
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d074      	beq.n	8000af4 <__aeabi_fsub+0x270>
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4252      	negs	r2, r2
 8000a0e:	4690      	mov	r8, r2
 8000a10:	44c1      	add	r9, r8
 8000a12:	464a      	mov	r2, r9
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x196>
 8000a18:	e0c8      	b.n	8000bac <__aeabi_fsub+0x328>
 8000a1a:	2cff      	cmp	r4, #255	; 0xff
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fsub+0x19c>
 8000a1e:	e75f      	b.n	80008e0 <__aeabi_fsub+0x5c>
 8000a20:	e7e6      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000a22:	2201      	movs	r2, #1
 8000a24:	4051      	eors	r1, r2
 8000a26:	42a9      	cmp	r1, r5
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x1a8>
 8000a2a:	e749      	b.n	80008c0 <__aeabi_fsub+0x3c>
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	4252      	negs	r2, r2
 8000a30:	4691      	mov	r9, r2
 8000a32:	44a1      	add	r9, r4
 8000a34:	464a      	mov	r2, r9
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	d043      	beq.n	8000ac2 <__aeabi_fsub+0x23e>
 8000a3a:	1b31      	subs	r1, r6, r4
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fsub+0x1be>
 8000a40:	e08c      	b.n	8000b5c <__aeabi_fsub+0x2d8>
 8000a42:	2eff      	cmp	r6, #255	; 0xff
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x1c4>
 8000a46:	e092      	b.n	8000b6e <__aeabi_fsub+0x2ea>
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	4662      	mov	r2, ip
 8000a4c:	04db      	lsls	r3, r3, #19
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	4694      	mov	ip, r2
 8000a52:	2301      	movs	r3, #1
 8000a54:	291b      	cmp	r1, #27
 8000a56:	dc09      	bgt.n	8000a6c <__aeabi_fsub+0x1e8>
 8000a58:	2020      	movs	r0, #32
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	1a41      	subs	r1, r0, r1
 8000a62:	408a      	lsls	r2, r1
 8000a64:	0011      	movs	r1, r2
 8000a66:	1e48      	subs	r0, r1, #1
 8000a68:	4181      	sbcs	r1, r0
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	0034      	movs	r4, r6
 8000a6e:	4453      	add	r3, sl
 8000a70:	e794      	b.n	800099c <__aeabi_fsub+0x118>
 8000a72:	22fe      	movs	r2, #254	; 0xfe
 8000a74:	1c66      	adds	r6, r4, #1
 8000a76:	4232      	tst	r2, r6
 8000a78:	d164      	bne.n	8000b44 <__aeabi_fsub+0x2c0>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fsub+0x1fc>
 8000a7e:	e082      	b.n	8000b86 <__aeabi_fsub+0x302>
 8000a80:	4663      	mov	r3, ip
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0x204>
 8000a86:	e0ab      	b.n	8000be0 <__aeabi_fsub+0x35c>
 8000a88:	4653      	mov	r3, sl
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x20c>
 8000a8e:	e760      	b.n	8000952 <__aeabi_fsub+0xce>
 8000a90:	4663      	mov	r3, ip
 8000a92:	4652      	mov	r2, sl
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	015a      	lsls	r2, r3, #5
 8000a98:	d400      	bmi.n	8000a9c <__aeabi_fsub+0x218>
 8000a9a:	e0aa      	b.n	8000bf2 <__aeabi_fsub+0x36e>
 8000a9c:	4663      	mov	r3, ip
 8000a9e:	4652      	mov	r2, sl
 8000aa0:	000d      	movs	r5, r1
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	e744      	b.n	8000930 <__aeabi_fsub+0xac>
 8000aa6:	4652      	mov	r2, sl
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d023      	beq.n	8000af4 <__aeabi_fsub+0x270>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4252      	negs	r2, r2
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	44c1      	add	r9, r8
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d075      	beq.n	8000ba6 <__aeabi_fsub+0x322>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fsub+0x23c>
 8000abe:	e75f      	b.n	8000980 <__aeabi_fsub+0xfc>
 8000ac0:	e796      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000ac2:	26fe      	movs	r6, #254	; 0xfe
 8000ac4:	3401      	adds	r4, #1
 8000ac6:	4226      	tst	r6, r4
 8000ac8:	d153      	bne.n	8000b72 <__aeabi_fsub+0x2ee>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d172      	bne.n	8000bb4 <__aeabi_fsub+0x330>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fsub+0x252>
 8000ad4:	e093      	b.n	8000bfe <__aeabi_fsub+0x37a>
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x25a>
 8000adc:	e739      	b.n	8000952 <__aeabi_fsub+0xce>
 8000ade:	4463      	add	r3, ip
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_fsub+0x268>
 8000ae6:	4a4a      	ldr	r2, [pc, #296]	; (8000c10 <__aeabi_fsub+0x38c>)
 8000ae8:	3401      	adds	r4, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	075a      	lsls	r2, r3, #29
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fsub+0x26e>
 8000af0:	e720      	b.n	8000934 <__aeabi_fsub+0xb0>
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	2cff      	cmp	r4, #255	; 0xff
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x276>
 8000af8:	e77a      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000afa:	025b      	lsls	r3, r3, #9
 8000afc:	0a5f      	lsrs	r7, r3, #9
 8000afe:	b2e0      	uxtb	r0, r4
 8000b00:	e727      	b.n	8000952 <__aeabi_fsub+0xce>
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	2700      	movs	r7, #0
 8000b06:	e724      	b.n	8000952 <__aeabi_fsub+0xce>
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <__aeabi_fsub+0x38c>)
 8000b0a:	1a24      	subs	r4, r4, r0
 8000b0c:	4033      	ands	r3, r6
 8000b0e:	e70f      	b.n	8000930 <__aeabi_fsub+0xac>
 8000b10:	2eff      	cmp	r6, #255	; 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x292>
 8000b14:	e76a      	b.n	80009ec <__aeabi_fsub+0x168>
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	4662      	mov	r2, ip
 8000b1a:	04db      	lsls	r3, r3, #19
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	4694      	mov	ip, r2
 8000b20:	2301      	movs	r3, #1
 8000b22:	281b      	cmp	r0, #27
 8000b24:	dc09      	bgt.n	8000b3a <__aeabi_fsub+0x2b6>
 8000b26:	2420      	movs	r4, #32
 8000b28:	4663      	mov	r3, ip
 8000b2a:	4662      	mov	r2, ip
 8000b2c:	40c3      	lsrs	r3, r0
 8000b2e:	1a20      	subs	r0, r4, r0
 8000b30:	4082      	lsls	r2, r0
 8000b32:	0010      	movs	r0, r2
 8000b34:	1e44      	subs	r4, r0, #1
 8000b36:	41a0      	sbcs	r0, r4
 8000b38:	4303      	orrs	r3, r0
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	000d      	movs	r5, r1
 8000b3e:	0034      	movs	r4, r6
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	e6dc      	b.n	80008fe <__aeabi_fsub+0x7a>
 8000b44:	4663      	mov	r3, ip
 8000b46:	4652      	mov	r2, sl
 8000b48:	1a9e      	subs	r6, r3, r2
 8000b4a:	0173      	lsls	r3, r6, #5
 8000b4c:	d417      	bmi.n	8000b7e <__aeabi_fsub+0x2fa>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0x2d0>
 8000b52:	e6d9      	b.n	8000908 <__aeabi_fsub+0x84>
 8000b54:	2500      	movs	r5, #0
 8000b56:	2000      	movs	r0, #0
 8000b58:	2700      	movs	r7, #0
 8000b5a:	e6fa      	b.n	8000952 <__aeabi_fsub+0xce>
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d044      	beq.n	8000bec <__aeabi_fsub+0x368>
 8000b62:	3901      	subs	r1, #1
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d04c      	beq.n	8000c02 <__aeabi_fsub+0x37e>
 8000b68:	2eff      	cmp	r6, #255	; 0xff
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fsub+0x2ea>
 8000b6c:	e771      	b.n	8000a52 <__aeabi_fsub+0x1ce>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	e73e      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d0c5      	beq.n	8000b02 <__aeabi_fsub+0x27e>
 8000b76:	4652      	mov	r2, sl
 8000b78:	4462      	add	r2, ip
 8000b7a:	0853      	lsrs	r3, r2, #1
 8000b7c:	e7b6      	b.n	8000aec <__aeabi_fsub+0x268>
 8000b7e:	4663      	mov	r3, ip
 8000b80:	000d      	movs	r5, r1
 8000b82:	1ad6      	subs	r6, r2, r3
 8000b84:	e6c0      	b.n	8000908 <__aeabi_fsub+0x84>
 8000b86:	4662      	mov	r2, ip
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	d116      	bne.n	8000bba <__aeabi_fsub+0x336>
 8000b8c:	4653      	mov	r3, sl
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fsub+0x310>
 8000b92:	e72b      	b.n	80009ec <__aeabi_fsub+0x168>
 8000b94:	2780      	movs	r7, #128	; 0x80
 8000b96:	2500      	movs	r5, #0
 8000b98:	20ff      	movs	r0, #255	; 0xff
 8000b9a:	03ff      	lsls	r7, r7, #15
 8000b9c:	e6d9      	b.n	8000952 <__aeabi_fsub+0xce>
 8000b9e:	000d      	movs	r5, r1
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	e7a6      	b.n	8000af4 <__aeabi_fsub+0x270>
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	4463      	add	r3, ip
 8000baa:	e6f7      	b.n	800099c <__aeabi_fsub+0x118>
 8000bac:	4663      	mov	r3, ip
 8000bae:	4652      	mov	r2, sl
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	e6a4      	b.n	80008fe <__aeabi_fsub+0x7a>
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d0d9      	beq.n	8000b6e <__aeabi_fsub+0x2ea>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x33e>
 8000bc0:	e716      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	03d2      	lsls	r2, r2, #15
 8000bc6:	4213      	tst	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x348>
 8000bca:	e711      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	4210      	tst	r0, r2
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fsub+0x350>
 8000bd2:	e70d      	b.n	80009f0 <__aeabi_fsub+0x16c>
 8000bd4:	e70a      	b.n	80009ec <__aeabi_fsub+0x168>
 8000bd6:	4652      	mov	r2, sl
 8000bd8:	000d      	movs	r5, r1
 8000bda:	0034      	movs	r4, r6
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	e68e      	b.n	80008fe <__aeabi_fsub+0x7a>
 8000be0:	4653      	mov	r3, sl
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <__aeabi_fsub+0x374>
 8000be6:	000d      	movs	r5, r1
 8000be8:	4647      	mov	r7, r8
 8000bea:	e6b2      	b.n	8000952 <__aeabi_fsub+0xce>
 8000bec:	4643      	mov	r3, r8
 8000bee:	0034      	movs	r4, r6
 8000bf0:	e780      	b.n	8000af4 <__aeabi_fsub+0x270>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fsub+0x374>
 8000bf6:	e779      	b.n	8000aec <__aeabi_fsub+0x268>
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	2700      	movs	r7, #0
 8000bfc:	e6a9      	b.n	8000952 <__aeabi_fsub+0xce>
 8000bfe:	4647      	mov	r7, r8
 8000c00:	e6a7      	b.n	8000952 <__aeabi_fsub+0xce>
 8000c02:	4653      	mov	r3, sl
 8000c04:	0034      	movs	r4, r6
 8000c06:	4463      	add	r3, ip
 8000c08:	e6c8      	b.n	800099c <__aeabi_fsub+0x118>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	7dffffff 	.word	0x7dffffff
 8000c10:	fbffffff 	.word	0xfbffffff

08000c14 <__aeabi_f2iz>:
 8000c14:	0241      	lsls	r1, r0, #9
 8000c16:	0042      	lsls	r2, r0, #1
 8000c18:	0fc3      	lsrs	r3, r0, #31
 8000c1a:	0a49      	lsrs	r1, r1, #9
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	0e12      	lsrs	r2, r2, #24
 8000c20:	2a7e      	cmp	r2, #126	; 0x7e
 8000c22:	d903      	bls.n	8000c2c <__aeabi_f2iz+0x18>
 8000c24:	2a9d      	cmp	r2, #157	; 0x9d
 8000c26:	d902      	bls.n	8000c2e <__aeabi_f2iz+0x1a>
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <__aeabi_f2iz+0x3c>)
 8000c2a:	1898      	adds	r0, r3, r2
 8000c2c:	4770      	bx	lr
 8000c2e:	2080      	movs	r0, #128	; 0x80
 8000c30:	0400      	lsls	r0, r0, #16
 8000c32:	4301      	orrs	r1, r0
 8000c34:	2a95      	cmp	r2, #149	; 0x95
 8000c36:	dc07      	bgt.n	8000c48 <__aeabi_f2iz+0x34>
 8000c38:	2096      	movs	r0, #150	; 0x96
 8000c3a:	1a82      	subs	r2, r0, r2
 8000c3c:	40d1      	lsrs	r1, r2
 8000c3e:	4248      	negs	r0, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f3      	bne.n	8000c2c <__aeabi_f2iz+0x18>
 8000c44:	0008      	movs	r0, r1
 8000c46:	e7f1      	b.n	8000c2c <__aeabi_f2iz+0x18>
 8000c48:	3a96      	subs	r2, #150	; 0x96
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	e7f7      	b.n	8000c3e <__aeabi_f2iz+0x2a>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	7fffffff 	.word	0x7fffffff

08000c54 <__aeabi_ui2f>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	1e05      	subs	r5, r0, #0
 8000c58:	d00e      	beq.n	8000c78 <__aeabi_ui2f+0x24>
 8000c5a:	f000 f871 	bl	8000d40 <__clzsi2>
 8000c5e:	239e      	movs	r3, #158	; 0x9e
 8000c60:	0004      	movs	r4, r0
 8000c62:	1a1b      	subs	r3, r3, r0
 8000c64:	2b96      	cmp	r3, #150	; 0x96
 8000c66:	dc0c      	bgt.n	8000c82 <__aeabi_ui2f+0x2e>
 8000c68:	2808      	cmp	r0, #8
 8000c6a:	dd01      	ble.n	8000c70 <__aeabi_ui2f+0x1c>
 8000c6c:	3c08      	subs	r4, #8
 8000c6e:	40a5      	lsls	r5, r4
 8000c70:	026d      	lsls	r5, r5, #9
 8000c72:	0a6d      	lsrs	r5, r5, #9
 8000c74:	b2d8      	uxtb	r0, r3
 8000c76:	e001      	b.n	8000c7c <__aeabi_ui2f+0x28>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	05c0      	lsls	r0, r0, #23
 8000c7e:	4328      	orrs	r0, r5
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
 8000c82:	2b99      	cmp	r3, #153	; 0x99
 8000c84:	dd09      	ble.n	8000c9a <__aeabi_ui2f+0x46>
 8000c86:	0002      	movs	r2, r0
 8000c88:	0029      	movs	r1, r5
 8000c8a:	321b      	adds	r2, #27
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	1e4a      	subs	r2, r1, #1
 8000c90:	4191      	sbcs	r1, r2
 8000c92:	2205      	movs	r2, #5
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	40d5      	lsrs	r5, r2
 8000c98:	430d      	orrs	r5, r1
 8000c9a:	2c05      	cmp	r4, #5
 8000c9c:	dd01      	ble.n	8000ca2 <__aeabi_ui2f+0x4e>
 8000c9e:	1f62      	subs	r2, r4, #5
 8000ca0:	4095      	lsls	r5, r2
 8000ca2:	0029      	movs	r1, r5
 8000ca4:	4e08      	ldr	r6, [pc, #32]	; (8000cc8 <__aeabi_ui2f+0x74>)
 8000ca6:	4031      	ands	r1, r6
 8000ca8:	076a      	lsls	r2, r5, #29
 8000caa:	d009      	beq.n	8000cc0 <__aeabi_ui2f+0x6c>
 8000cac:	200f      	movs	r0, #15
 8000cae:	4028      	ands	r0, r5
 8000cb0:	2804      	cmp	r0, #4
 8000cb2:	d005      	beq.n	8000cc0 <__aeabi_ui2f+0x6c>
 8000cb4:	3104      	adds	r1, #4
 8000cb6:	014a      	lsls	r2, r1, #5
 8000cb8:	d502      	bpl.n	8000cc0 <__aeabi_ui2f+0x6c>
 8000cba:	239f      	movs	r3, #159	; 0x9f
 8000cbc:	4031      	ands	r1, r6
 8000cbe:	1b1b      	subs	r3, r3, r4
 8000cc0:	0189      	lsls	r1, r1, #6
 8000cc2:	0a4d      	lsrs	r5, r1, #9
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	e7d9      	b.n	8000c7c <__aeabi_ui2f+0x28>
 8000cc8:	fbffffff 	.word	0xfbffffff

08000ccc <__aeabi_cfrcmple>:
 8000ccc:	4684      	mov	ip, r0
 8000cce:	1c08      	adds	r0, r1, #0
 8000cd0:	4661      	mov	r1, ip
 8000cd2:	e7ff      	b.n	8000cd4 <__aeabi_cfcmpeq>

08000cd4 <__aeabi_cfcmpeq>:
 8000cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cd6:	f000 f8c5 	bl	8000e64 <__lesf2>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d401      	bmi.n	8000ce2 <__aeabi_cfcmpeq+0xe>
 8000cde:	2100      	movs	r1, #0
 8000ce0:	42c8      	cmn	r0, r1
 8000ce2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ce4 <__aeabi_fcmpeq>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	f000 f849 	bl	8000d7c <__eqsf2>
 8000cea:	4240      	negs	r0, r0
 8000cec:	3001      	adds	r0, #1
 8000cee:	bd10      	pop	{r4, pc}

08000cf0 <__aeabi_fcmplt>:
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	f000 f8b7 	bl	8000e64 <__lesf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	db01      	blt.n	8000cfe <__aeabi_fcmplt+0xe>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	bd10      	pop	{r4, pc}
 8000cfe:	2001      	movs	r0, #1
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)

08000d04 <__aeabi_fcmple>:
 8000d04:	b510      	push	{r4, lr}
 8000d06:	f000 f8ad 	bl	8000e64 <__lesf2>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	dd01      	ble.n	8000d12 <__aeabi_fcmple+0xe>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	2001      	movs	r0, #1
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)

08000d18 <__aeabi_fcmpgt>:
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	f000 f857 	bl	8000dcc <__gesf2>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	dc01      	bgt.n	8000d26 <__aeabi_fcmpgt+0xe>
 8000d22:	2000      	movs	r0, #0
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	2001      	movs	r0, #1
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)

08000d2c <__aeabi_fcmpge>:
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	f000 f84d 	bl	8000dcc <__gesf2>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	da01      	bge.n	8000d3a <__aeabi_fcmpge+0xe>
 8000d36:	2000      	movs	r0, #0
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)

08000d40 <__clzsi2>:
 8000d40:	211c      	movs	r1, #28
 8000d42:	2301      	movs	r3, #1
 8000d44:	041b      	lsls	r3, r3, #16
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d301      	bcc.n	8000d4e <__clzsi2+0xe>
 8000d4a:	0c00      	lsrs	r0, r0, #16
 8000d4c:	3910      	subs	r1, #16
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	4298      	cmp	r0, r3
 8000d52:	d301      	bcc.n	8000d58 <__clzsi2+0x18>
 8000d54:	0a00      	lsrs	r0, r0, #8
 8000d56:	3908      	subs	r1, #8
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d301      	bcc.n	8000d62 <__clzsi2+0x22>
 8000d5e:	0900      	lsrs	r0, r0, #4
 8000d60:	3904      	subs	r1, #4
 8000d62:	a202      	add	r2, pc, #8	; (adr r2, 8000d6c <__clzsi2+0x2c>)
 8000d64:	5c10      	ldrb	r0, [r2, r0]
 8000d66:	1840      	adds	r0, r0, r1
 8000d68:	4770      	bx	lr
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	02020304 	.word	0x02020304
 8000d70:	01010101 	.word	0x01010101
	...

08000d7c <__eqsf2>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	0042      	lsls	r2, r0, #1
 8000d80:	024e      	lsls	r6, r1, #9
 8000d82:	004c      	lsls	r4, r1, #1
 8000d84:	0245      	lsls	r5, r0, #9
 8000d86:	0a6d      	lsrs	r5, r5, #9
 8000d88:	0e12      	lsrs	r2, r2, #24
 8000d8a:	0fc3      	lsrs	r3, r0, #31
 8000d8c:	0a76      	lsrs	r6, r6, #9
 8000d8e:	0e24      	lsrs	r4, r4, #24
 8000d90:	0fc9      	lsrs	r1, r1, #31
 8000d92:	2aff      	cmp	r2, #255	; 0xff
 8000d94:	d00f      	beq.n	8000db6 <__eqsf2+0x3a>
 8000d96:	2cff      	cmp	r4, #255	; 0xff
 8000d98:	d011      	beq.n	8000dbe <__eqsf2+0x42>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	42a2      	cmp	r2, r4
 8000d9e:	d000      	beq.n	8000da2 <__eqsf2+0x26>
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
 8000da2:	42b5      	cmp	r5, r6
 8000da4:	d1fc      	bne.n	8000da0 <__eqsf2+0x24>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d00d      	beq.n	8000dc6 <__eqsf2+0x4a>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d1f8      	bne.n	8000da0 <__eqsf2+0x24>
 8000dae:	0028      	movs	r0, r5
 8000db0:	1e45      	subs	r5, r0, #1
 8000db2:	41a8      	sbcs	r0, r5
 8000db4:	e7f4      	b.n	8000da0 <__eqsf2+0x24>
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d1f1      	bne.n	8000da0 <__eqsf2+0x24>
 8000dbc:	e7eb      	b.n	8000d96 <__eqsf2+0x1a>
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d1ed      	bne.n	8000da0 <__eqsf2+0x24>
 8000dc4:	e7e9      	b.n	8000d9a <__eqsf2+0x1e>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e7ea      	b.n	8000da0 <__eqsf2+0x24>
 8000dca:	46c0      	nop			; (mov r8, r8)

08000dcc <__gesf2>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	0042      	lsls	r2, r0, #1
 8000dd0:	0246      	lsls	r6, r0, #9
 8000dd2:	024d      	lsls	r5, r1, #9
 8000dd4:	004c      	lsls	r4, r1, #1
 8000dd6:	0fc3      	lsrs	r3, r0, #31
 8000dd8:	0a76      	lsrs	r6, r6, #9
 8000dda:	0e12      	lsrs	r2, r2, #24
 8000ddc:	0a6d      	lsrs	r5, r5, #9
 8000dde:	0e24      	lsrs	r4, r4, #24
 8000de0:	0fc8      	lsrs	r0, r1, #31
 8000de2:	2aff      	cmp	r2, #255	; 0xff
 8000de4:	d01f      	beq.n	8000e26 <__gesf2+0x5a>
 8000de6:	2cff      	cmp	r4, #255	; 0xff
 8000de8:	d010      	beq.n	8000e0c <__gesf2+0x40>
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d11f      	bne.n	8000e2e <__gesf2+0x62>
 8000dee:	4271      	negs	r1, r6
 8000df0:	4171      	adcs	r1, r6
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d101      	bne.n	8000dfa <__gesf2+0x2e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d01e      	beq.n	8000e38 <__gesf2+0x6c>
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d10e      	bne.n	8000e1c <__gesf2+0x50>
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	d01e      	beq.n	8000e40 <__gesf2+0x74>
 8000e02:	2102      	movs	r1, #2
 8000e04:	1e58      	subs	r0, r3, #1
 8000e06:	4008      	ands	r0, r1
 8000e08:	3801      	subs	r0, #1
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d126      	bne.n	8000e5e <__gesf2+0x92>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d1f4      	bne.n	8000dfe <__gesf2+0x32>
 8000e14:	4271      	negs	r1, r6
 8000e16:	4171      	adcs	r1, r6
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d0f0      	beq.n	8000dfe <__gesf2+0x32>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1f4      	bne.n	8000e0a <__gesf2+0x3e>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7f1      	b.n	8000e0a <__gesf2+0x3e>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d119      	bne.n	8000e5e <__gesf2+0x92>
 8000e2a:	2cff      	cmp	r4, #255	; 0xff
 8000e2c:	d0ee      	beq.n	8000e0c <__gesf2+0x40>
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	d1e5      	bne.n	8000dfe <__gesf2+0x32>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d1e3      	bne.n	8000dfe <__gesf2+0x32>
 8000e36:	e7e4      	b.n	8000e02 <__gesf2+0x36>
 8000e38:	2000      	movs	r0, #0
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d0e5      	beq.n	8000e0a <__gesf2+0x3e>
 8000e3e:	e7e0      	b.n	8000e02 <__gesf2+0x36>
 8000e40:	42a2      	cmp	r2, r4
 8000e42:	dc05      	bgt.n	8000e50 <__gesf2+0x84>
 8000e44:	dbea      	blt.n	8000e1c <__gesf2+0x50>
 8000e46:	42ae      	cmp	r6, r5
 8000e48:	d802      	bhi.n	8000e50 <__gesf2+0x84>
 8000e4a:	d3e7      	bcc.n	8000e1c <__gesf2+0x50>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e7dc      	b.n	8000e0a <__gesf2+0x3e>
 8000e50:	4241      	negs	r1, r0
 8000e52:	4141      	adcs	r1, r0
 8000e54:	4248      	negs	r0, r1
 8000e56:	2102      	movs	r1, #2
 8000e58:	4008      	ands	r0, r1
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7d5      	b.n	8000e0a <__gesf2+0x3e>
 8000e5e:	2002      	movs	r0, #2
 8000e60:	4240      	negs	r0, r0
 8000e62:	e7d2      	b.n	8000e0a <__gesf2+0x3e>

08000e64 <__lesf2>:
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0246      	lsls	r6, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	004c      	lsls	r4, r1, #1
 8000e6e:	0fc3      	lsrs	r3, r0, #31
 8000e70:	0a76      	lsrs	r6, r6, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e24      	lsrs	r4, r4, #24
 8000e78:	0fc8      	lsrs	r0, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	; 0xff
 8000e7c:	d00d      	beq.n	8000e9a <__lesf2+0x36>
 8000e7e:	2cff      	cmp	r4, #255	; 0xff
 8000e80:	d00f      	beq.n	8000ea2 <__lesf2+0x3e>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d123      	bne.n	8000ece <__lesf2+0x6a>
 8000e86:	4271      	negs	r1, r6
 8000e88:	4171      	adcs	r1, r6
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d10f      	bne.n	8000eae <__lesf2+0x4a>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d10d      	bne.n	8000eae <__lesf2+0x4a>
 8000e92:	2000      	movs	r0, #0
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d014      	beq.n	8000ec2 <__lesf2+0x5e>
 8000e98:	e00d      	b.n	8000eb6 <__lesf2+0x52>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d110      	bne.n	8000ec0 <__lesf2+0x5c>
 8000e9e:	2cff      	cmp	r4, #255	; 0xff
 8000ea0:	d115      	bne.n	8000ece <__lesf2+0x6a>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d10c      	bne.n	8000ec0 <__lesf2+0x5c>
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d103      	bne.n	8000eb2 <__lesf2+0x4e>
 8000eaa:	4271      	negs	r1, r6
 8000eac:	4171      	adcs	r1, r6
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d108      	bne.n	8000ec4 <__lesf2+0x60>
 8000eb2:	4283      	cmp	r3, r0
 8000eb4:	d010      	beq.n	8000ed8 <__lesf2+0x74>
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	1e58      	subs	r0, r3, #1
 8000eba:	4008      	ands	r0, r1
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e000      	b.n	8000ec2 <__lesf2+0x5e>
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d1fc      	bne.n	8000ec2 <__lesf2+0x5e>
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4240      	negs	r0, r0
 8000ecc:	e7f9      	b.n	8000ec2 <__lesf2+0x5e>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d1ef      	bne.n	8000eb2 <__lesf2+0x4e>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d1ed      	bne.n	8000eb2 <__lesf2+0x4e>
 8000ed6:	e7ee      	b.n	8000eb6 <__lesf2+0x52>
 8000ed8:	42a2      	cmp	r2, r4
 8000eda:	dc05      	bgt.n	8000ee8 <__lesf2+0x84>
 8000edc:	dbf2      	blt.n	8000ec4 <__lesf2+0x60>
 8000ede:	42ae      	cmp	r6, r5
 8000ee0:	d802      	bhi.n	8000ee8 <__lesf2+0x84>
 8000ee2:	d3ef      	bcc.n	8000ec4 <__lesf2+0x60>
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e7ec      	b.n	8000ec2 <__lesf2+0x5e>
 8000ee8:	4241      	negs	r1, r0
 8000eea:	4141      	adcs	r1, r0
 8000eec:	4248      	negs	r0, r1
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4008      	ands	r0, r1
 8000ef2:	3801      	subs	r0, #1
 8000ef4:	e7e5      	b.n	8000ec2 <__lesf2+0x5e>
 8000ef6:	46c0      	nop			; (mov r8, r8)

08000ef8 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
  HAL_GPIO_TogglePin(Error_GPIO_Port, Error_Pin);
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationStackOverflowHook+0x28>)
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	f002 f8a7 	bl	800305e <HAL_GPIO_TogglePin>
  osDelay(100);
 8000f10:	2064      	movs	r0, #100	; 0x64
 8000f12:	f006 ff29 	bl	8007d68 <osDelay>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	48000800 	.word	0x48000800

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 ff2a 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f824 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f9b8 	bl	80012a4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f34:	f000 f878 	bl	8001028 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000f38:	f000 f92e 	bl	8001198 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000f3c:	f000 f98c 	bl	8001258 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000f40:	f000 f8aa 	bl	8001098 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000f44:	f000 f8e8 	bl	8001118 <MX_SPI2_Init>
  MX_USART4_UART_Init();
 8000f48:	f000 f956 	bl	80011f8 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4c:	f006 fe0a 	bl	8007b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <main+0x48>)
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <main+0x4c>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f006 fe5e 	bl	8007c18 <osThreadNew>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <main+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CPP_UserSetup();
 8000f62:	f000 fd71 	bl	8001a48 <CPP_UserSetup>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f66:	f006 fe29 	bl	8007bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <main+0x46>
 8000f6c:	0800cbc8 	.word	0x0800cbc8
 8000f70:	080013e9 	.word	0x080013e9
 8000f74:	20001eac 	.word	0x20001eac

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b099      	sub	sp, #100	; 0x64
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	242c      	movs	r4, #44	; 0x2c
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	0018      	movs	r0, r3
 8000f84:	2334      	movs	r3, #52	; 0x34
 8000f86:	001a      	movs	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f00a f99d 	bl	800b2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8e:	231c      	movs	r3, #28
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	0018      	movs	r0, r3
 8000f94:	2310      	movs	r3, #16
 8000f96:	001a      	movs	r2, r3
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f00a f995 	bl	800b2c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	231c      	movs	r3, #28
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f00a f98e 	bl	800b2c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2220      	movs	r2, #32
 8000fb0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f002 facf 	bl	8003564 <HAL_RCC_OscConfig>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000fca:	f000 fa33 	bl	8001434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	211c      	movs	r1, #28
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2101      	movs	r1, #1
 8000fec:	0018      	movs	r0, r3
 8000fee:	f002 fe3f 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff6:	f000 fa1d 	bl	8001434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2;
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <SystemClock_Config+0xac>)
 8000ffe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001000:	003b      	movs	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001006:	003b      	movs	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	003b      	movs	r3, r7
 800100e:	0018      	movs	r0, r3
 8001010:	f002 ffd2 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001018:	f000 fa0c 	bl	8001434 <Error_Handler>
  }
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b019      	add	sp, #100	; 0x64
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	00020002 	.word	0x00020002

08001028 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_CAN_Init+0x68>)
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <MX_CAN_Init+0x6c>)
 8001030:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_CAN_Init+0x68>)
 8001034:	2206      	movs	r2, #6
 8001036:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_CAN_Init+0x68>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	05d2      	lsls	r2, r2, #23
 800103e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_CAN_Init+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_CAN_Init+0x68>)
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	0312      	lsls	r2, r2, #12
 800104c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_CAN_Init+0x68>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0352      	lsls	r2, r2, #13
 8001054:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_CAN_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_CAN_Init+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_CAN_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_CAN_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_CAN_Init+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_CAN_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <MX_CAN_Init+0x68>)
 800107c:	0018      	movs	r0, r3
 800107e:	f000 feaf 	bl	8001de0 <HAL_CAN_Init>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001086:	f000 f9d5 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20001f60 	.word	0x20001f60
 8001094:	40006400 	.word	0x40006400

08001098 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C2_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C2_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C2_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C2_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C2_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C2_Init+0x74>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f001 ffdd 	bl	8003094 <HAL_I2C_Init>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 f9a9 	bl	8001434 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C2_Init+0x74>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 f86a 	bl	80031c0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 f9a0 	bl	8001434 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <MX_I2C2_Init+0x74>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 f8ad 	bl	8003258 <HAL_I2CEx_ConfigDigitalFilter>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 f997 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20001f14 	.word	0x20001f14
 8001110:	40005800 	.word	0x40005800
 8001114:	20303e5d 	.word	0x20303e5d

08001118 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_SPI2_Init+0x78>)
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <MX_SPI2_Init+0x7c>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI2_Init+0x78>)
 8001124:	2282      	movs	r2, #130	; 0x82
 8001126:	0052      	lsls	r2, r2, #1
 8001128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_SPI2_Init+0x78>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	0212      	lsls	r2, r2, #8
 8001130:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_SPI2_Init+0x78>)
 8001134:	22e0      	movs	r2, #224	; 0xe0
 8001136:	00d2      	lsls	r2, r2, #3
 8001138:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_SPI2_Init+0x78>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI2_Init+0x78>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_SPI2_Init+0x78>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_SPI2_Init+0x78>)
 8001150:	2208      	movs	r2, #8
 8001152:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI2_Init+0x78>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_SPI2_Init+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI2_Init+0x78>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_SPI2_Init+0x78>)
 8001168:	2207      	movs	r2, #7
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI2_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_SPI2_Init+0x78>)
 8001174:	2208      	movs	r2, #8
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <MX_SPI2_Init+0x78>)
 800117a:	0018      	movs	r0, r3
 800117c:	f003 f81a 	bl	80041b4 <HAL_SPI_Init>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f956 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	20001eb0 	.word	0x20001eb0
 8001194:	40003800 	.word	0x40003800

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_USART2_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011a4:	22e1      	movs	r2, #225	; 0xe1
 80011a6:	0212      	lsls	r2, r2, #8
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f003 fddf 	bl	8004da0 <HAL_UART_Init>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f000 f925 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000200c 	.word	0x2000200c
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART4_UART_Init+0x58>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_USART4_UART_Init+0x5c>)
 8001200:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001204:	2296      	movs	r2, #150	; 0x96
 8001206:	0212      	lsls	r2, r2, #8
 8001208:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART4_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART4_UART_Init+0x58>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART4_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART4_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <MX_USART4_UART_Init+0x58>)
 800123c:	0018      	movs	r0, r3
 800123e:	f003 fdaf 	bl	8004da0 <HAL_UART_Init>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8001246:	f000 f8f5 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20001f88 	.word	0x20001f88
 8001254:	40004c00 	.word	0x40004c00

08001258 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USB_PCD_Init+0x44>)
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <MX_USB_PCD_Init+0x48>)
 8001260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USB_PCD_Init+0x44>)
 8001264:	2208      	movs	r2, #8
 8001266:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USB_PCD_Init+0x44>)
 800126a:	2202      	movs	r2, #2
 800126c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USB_PCD_Init+0x44>)
 8001270:	2202      	movs	r2, #2
 8001272:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USB_PCD_Init+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USB_PCD_Init+0x44>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USB_PCD_Init+0x44>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <MX_USB_PCD_Init+0x44>)
 8001288:	0018      	movs	r0, r3
 800128a:	f002 f831 	bl	80032f0 <HAL_PCD_Init>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001292:	f000 f8cf 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20002090 	.word	0x20002090
 80012a0:	40005c00 	.word	0x40005c00

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	240c      	movs	r4, #12
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	0018      	movs	r0, r3
 80012b0:	2314      	movs	r3, #20
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f00a f807 	bl	800b2c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0309      	lsls	r1, r1, #12
 80012c4:	430a      	orrs	r2, r1
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	031b      	lsls	r3, r3, #12
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0289      	lsls	r1, r1, #10
 80012e0:	430a      	orrs	r2, r1
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <MX_GPIO_Init+0x134>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	02c9      	lsls	r1, r1, #11
 80012fc:	430a      	orrs	r2, r1
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <MX_GPIO_Init+0x134>)
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	02db      	lsls	r3, r3, #11
 8001308:	4013      	ands	r3, r2
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Error_Pin|Board_OK_Pin, GPIO_PIN_RESET);
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	01db      	lsls	r3, r3, #7
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <MX_GPIO_Init+0x138>)
 8001314:	2200      	movs	r2, #0
 8001316:	0019      	movs	r1, r3
 8001318:	f001 fe84 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Eco_En_GPIO_Port, Eco_En_Pin, GPIO_PIN_RESET);
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	482f      	ldr	r0, [pc, #188]	; (80013e0 <MX_GPIO_Init+0x13c>)
 8001322:	2200      	movs	r2, #0
 8001324:	0019      	movs	r1, r3
 8001326:	f001 fe7d 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Regen_CS_Pin|Accel_CS_Pin, GPIO_PIN_SET);
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_GPIO_Init+0x138>)
 800132c:	2201      	movs	r2, #1
 800132e:	21c0      	movs	r1, #192	; 0xc0
 8001330:	0018      	movs	r0, r3
 8001332:	f001 fe77 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Error_Pin Board_OK_Pin Regen_CS_Pin Accel_CS_Pin */
  GPIO_InitStruct.Pin = Error_Pin|Board_OK_Pin|Regen_CS_Pin|Accel_CS_Pin;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <MX_GPIO_Init+0x140>)
 800133a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2201      	movs	r2, #1
 8001340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <MX_GPIO_Init+0x138>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f001 fced 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 800135a:	0021      	movs	r1, r4
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2204      	movs	r2, #4
 8001360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2288      	movs	r2, #136	; 0x88
 8001366:	0352      	lsls	r2, r2, #13
 8001368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 8001370:	000c      	movs	r4, r1
 8001372:	187b      	adds	r3, r7, r1
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <MX_GPIO_Init+0x13c>)
 8001376:	0019      	movs	r1, r3
 8001378:	0010      	movs	r0, r2
 800137a:	f001 fcdb 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Eco_En_Pin */
  GPIO_InitStruct.Pin = Eco_En_Pin;
 800137e:	0021      	movs	r1, r4
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0152      	lsls	r2, r2, #5
 8001386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	000c      	movs	r4, r1
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	193b      	adds	r3, r7, r4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	193b      	adds	r3, r7, r4
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Eco_En_GPIO_Port, &GPIO_InitStruct);
 800139c:	193b      	adds	r3, r7, r4
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <MX_GPIO_Init+0x13c>)
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f001 fcc6 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSP_PPS_Pin */
  GPIO_InitStruct.Pin = GSP_PPS_Pin;
 80013a8:	0021      	movs	r1, r4
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0212      	lsls	r2, r2, #8
 80013b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2288      	movs	r2, #136	; 0x88
 80013b6:	0352      	lsls	r2, r2, #13
 80013b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GSP_PPS_GPIO_Port, &GPIO_InitStruct);
 80013c0:	187a      	adds	r2, r7, r1
 80013c2:	2390      	movs	r3, #144	; 0x90
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f001 fcb3 	bl	8002d34 <HAL_GPIO_Init>

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b009      	add	sp, #36	; 0x24
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000400 	.word	0x48000400
 80013e4:	000060c0 	.word	0x000060c0

080013e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(Board_OK_GPIO_Port, Board_OK_Pin);
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <StartDefaultTask+0x24>)
 80013f6:	0019      	movs	r1, r3
 80013f8:	0010      	movs	r0, r2
 80013fa:	f001 fe30 	bl	800305e <HAL_GPIO_TogglePin>
    osDelay(500);
 80013fe:	23fa      	movs	r3, #250	; 0xfa
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	0018      	movs	r0, r3
 8001404:	f006 fcb0 	bl	8007d68 <osDelay>
    HAL_GPIO_TogglePin(Board_OK_GPIO_Port, Board_OK_Pin);
 8001408:	e7f2      	b.n	80013f0 <StartDefaultTask+0x8>
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	48000800 	.word	0x48000800

08001410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001422:	f000 fcc1 	bl	8001da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	40001000 	.word	0x40001000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_MspInit+0x50>)
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_MspInit+0x50>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_MspInit+0x50>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2201      	movs	r2, #1
 8001458:	4013      	ands	r3, r2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_MspInit+0x50>)
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_MspInit+0x50>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0549      	lsls	r1, r1, #21
 8001468:	430a      	orrs	r2, r1
 800146a:	61da      	str	r2, [r3, #28]
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_MspInit+0x50>)
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	055b      	lsls	r3, r3, #21
 8001474:	4013      	ands	r3, r2
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800147a:	2302      	movs	r3, #2
 800147c:	425b      	negs	r3, r3
 800147e:	2200      	movs	r2, #0
 8001480:	2103      	movs	r1, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fc30 	bl	8002ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08b      	sub	sp, #44	; 0x2c
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	2414      	movs	r4, #20
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	0018      	movs	r0, r3
 80014a2:	2314      	movs	r3, #20
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f009 ff0e 	bl	800b2c8 <memset>
  if(hcan->Instance==CAN)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_CAN_MspInit+0xa0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d13a      	bne.n	800152c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0489      	lsls	r1, r1, #18
 80014c0:	430a      	orrs	r2, r1
 80014c2:	61da      	str	r2, [r3, #28]
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	049b      	lsls	r3, r3, #18
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	02c9      	lsls	r1, r1, #11
 80014dc:	430a      	orrs	r2, r1
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_CAN_MspInit+0xa4>)
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	02db      	lsls	r3, r3, #11
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	22c0      	movs	r2, #192	; 0xc0
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	0021      	movs	r1, r4
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2202      	movs	r2, #2
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2203      	movs	r2, #3
 8001508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2204      	movs	r2, #4
 800150e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_CAN_MspInit+0xa8>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f001 fc0c 	bl	8002d34 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2103      	movs	r1, #3
 8001520:	201e      	movs	r0, #30
 8001522:	f001 fbe1 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001526:	201e      	movs	r0, #30
 8001528:	f001 fbf3 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b00b      	add	sp, #44	; 0x2c
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	40006400 	.word	0x40006400
 8001538:	40021000 	.word	0x40021000
 800153c:	48000400 	.word	0x48000400

08001540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	2414      	movs	r4, #20
 800154a:	193b      	adds	r3, r7, r4
 800154c:	0018      	movs	r0, r3
 800154e:	2314      	movs	r3, #20
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f009 feb8 	bl	800b2c8 <memset>
  if(hi2c->Instance==I2C2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_I2C_MspInit+0x90>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d132      	bne.n	80015c8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	02c9      	lsls	r1, r1, #11
 800156c:	430a      	orrs	r2, r1
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	02db      	lsls	r3, r3, #11
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	22c0      	movs	r2, #192	; 0xc0
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	0021      	movs	r1, r4
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2212      	movs	r2, #18
 800158c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2203      	movs	r2, #3
 8001598:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2201      	movs	r2, #1
 800159e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_I2C_MspInit+0x98>)
 80015a4:	0019      	movs	r1, r3
 80015a6:	0010      	movs	r0, r2
 80015a8:	f001 fbc4 	bl	8002d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	03c9      	lsls	r1, r1, #15
 80015b6:	430a      	orrs	r2, r1
 80015b8:	61da      	str	r2, [r3, #28]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_I2C_MspInit+0x94>)
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	03db      	lsls	r3, r3, #15
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b00b      	add	sp, #44	; 0x2c
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	40005800 	.word	0x40005800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48000400 	.word	0x48000400

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b08b      	sub	sp, #44	; 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	2414      	movs	r4, #20
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	0018      	movs	r0, r3
 80015ea:	2314      	movs	r3, #20
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f009 fe6a 	bl	800b2c8 <memset>
  if(hspi->Instance==SPI2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_SPI_MspInit+0x90>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d132      	bne.n	8001664 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_SPI_MspInit+0x94>)
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_SPI_MspInit+0x94>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	01c9      	lsls	r1, r1, #7
 8001608:	430a      	orrs	r2, r1
 800160a:	61da      	str	r2, [r3, #28]
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_SPI_MspInit+0x94>)
 800160e:	69da      	ldr	r2, [r3, #28]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	01db      	lsls	r3, r3, #7
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_SPI_MspInit+0x94>)
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_SPI_MspInit+0x94>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	02c9      	lsls	r1, r1, #11
 8001624:	430a      	orrs	r2, r1
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_SPI_MspInit+0x94>)
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	22a0      	movs	r2, #160	; 0xa0
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	0021      	movs	r1, r4
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2202      	movs	r2, #2
 8001644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2203      	movs	r2, #3
 8001650:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	187b      	adds	r3, r7, r1
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_SPI_MspInit+0x98>)
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f001 fb68 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b00b      	add	sp, #44	; 0x2c
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	40003800 	.word	0x40003800
 8001670:	40021000 	.word	0x40021000
 8001674:	48000400 	.word	0x48000400

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08d      	sub	sp, #52	; 0x34
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	241c      	movs	r4, #28
 8001682:	193b      	adds	r3, r7, r4
 8001684:	0018      	movs	r0, r3
 8001686:	2314      	movs	r3, #20
 8001688:	001a      	movs	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	f009 fe1c 	bl	800b2c8 <memset>
  if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a39      	ldr	r2, [pc, #228]	; (800177c <HAL_UART_MspInit+0x104>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d133      	bne.n	8001702 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_UART_MspInit+0x108>)
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_UART_MspInit+0x108>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0289      	lsls	r1, r1, #10
 80016a4:	430a      	orrs	r2, r1
 80016a6:	61da      	str	r2, [r3, #28]
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_UART_MspInit+0x108>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_UART_MspInit+0x108>)
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_UART_MspInit+0x108>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0289      	lsls	r1, r1, #10
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_UART_MspInit+0x108>)
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	4013      	ands	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d2:	0021      	movs	r1, r4
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2202      	movs	r2, #2
 80016de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2203      	movs	r2, #3
 80016ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2201      	movs	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	2390      	movs	r3, #144	; 0x90
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f001 fb1a 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8001700:	e037      	b.n	8001772 <HAL_UART_MspInit+0xfa>
  else if(huart->Instance==USART4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_UART_MspInit+0x10c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d132      	bne.n	8001772 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART4_CLK_ENABLE();
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0x108>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x108>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0309      	lsls	r1, r1, #12
 8001716:	430a      	orrs	r2, r1
 8001718:	61da      	str	r2, [r3, #28]
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x108>)
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	031b      	lsls	r3, r3, #12
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x108>)
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x108>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	0309      	lsls	r1, r1, #12
 8001732:	430a      	orrs	r2, r1
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_UART_MspInit+0x108>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	031b      	lsls	r3, r3, #12
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001744:	211c      	movs	r1, #28
 8001746:	187b      	adds	r3, r7, r1
 8001748:	22c0      	movs	r2, #192	; 0xc0
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2202      	movs	r2, #2
 8001752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2203      	movs	r2, #3
 800175e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	187b      	adds	r3, r7, r1
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_UART_MspInit+0x110>)
 800176a:	0019      	movs	r1, r3
 800176c:	0010      	movs	r0, r2
 800176e:	f001 fae1 	bl	8002d34 <HAL_GPIO_Init>
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b00d      	add	sp, #52	; 0x34
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40004400 	.word	0x40004400
 8001780:	40021000 	.word	0x40021000
 8001784:	40004c00 	.word	0x40004c00
 8001788:	48000800 	.word	0x48000800

0800178c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_PCD_MspInit+0x38>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10d      	bne.n	80017ba <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_PCD_MspInit+0x3c>)
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_PCD_MspInit+0x3c>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0409      	lsls	r1, r1, #16
 80017a8:	430a      	orrs	r2, r1
 80017aa:	61da      	str	r2, [r3, #28]
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_PCD_MspInit+0x3c>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b004      	add	sp, #16
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40005c00 	.word	0x40005c00
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	0019      	movs	r1, r3
 80017e2:	2011      	movs	r0, #17
 80017e4:	f001 fa80 	bl	8002ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e8:	2011      	movs	r0, #17
 80017ea:	f001 fa92 	bl	8002d12 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_InitTick+0xa4>)
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_InitTick+0xa4>)
 80017f4:	2110      	movs	r1, #16
 80017f6:	430a      	orrs	r2, r1
 80017f8:	61da      	str	r2, [r3, #28]
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_InitTick+0xa4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	2210      	movs	r2, #16
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001806:	230c      	movs	r3, #12
 8001808:	18fa      	adds	r2, r7, r3
 800180a:	2310      	movs	r3, #16
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f002 fba7 	bl	8003f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001816:	f002 fb8f 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 800181a:	0003      	movs	r3, r0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	4914      	ldr	r1, [pc, #80]	; (8001874 <HAL_InitTick+0xa8>)
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe fc7a 	bl	800011c <__udivsi3>
 8001828:	0003      	movs	r3, r0
 800182a:	3b01      	subs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0xac>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_InitTick+0xb0>)
 8001832:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_InitTick+0xac>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_InitTick+0xb4>)
 8001838:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_InitTick+0xac>)
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_InitTick+0xac>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_InitTick+0xac>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_InitTick+0xac>)
 800184e:	0018      	movs	r0, r3
 8001850:	f003 f836 	bl	80048c0 <HAL_TIM_Base_Init>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d105      	bne.n	8001864 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_InitTick+0xac>)
 800185a:	0018      	movs	r0, r3
 800185c:	f003 f888 	bl	8004970 <HAL_TIM_Base_Start_IT>
 8001860:	0003      	movs	r3, r0
 8001862:	e000      	b.n	8001866 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b00a      	add	sp, #40	; 0x28
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	000f4240 	.word	0x000f4240
 8001878:	20002384 	.word	0x20002384
 800187c:	40001000 	.word	0x40001000
 8001880:	000003e7 	.word	0x000003e7

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <TIM6_DAC_IRQHandler+0x14>)
 8001896:	0018      	movs	r0, r3
 8001898:	f003 f8bc 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20002384 	.word	0x20002384

080018a8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <CEC_CAN_IRQHandler+0x14>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 ff7e 	bl	80027b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20001f60 	.word	0x20001f60

080018c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_kill>:

int _kill(int pid, int sig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d6:	f009 fc9f 	bl	800b218 <__errno>
 80018da:	0003      	movs	r3, r0
 80018dc:	2216      	movs	r2, #22
 80018de:	601a      	str	r2, [r3, #0]
	return -1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	425b      	negs	r3, r3
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b002      	add	sp, #8
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f4:	2301      	movs	r3, #1
 80018f6:	425a      	negs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ffe5 	bl	80018cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001902:	e7fe      	b.n	8001902 <_exit+0x16>

08001904 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e00a      	b.n	800192c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001916:	e000      	b.n	800191a <_read+0x16>
 8001918:	bf00      	nop
 800191a:	0001      	movs	r1, r0
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf0      	blt.n	8001916 <_read+0x12>
	}

return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b006      	add	sp, #24
 800193c:	bd80      	pop	{r7, pc}

0800193e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e009      	b.n	8001964 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	0018      	movs	r0, r3
 800195a:	e000      	b.n	800195e <_write+0x20>
 800195c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf1      	blt.n	8001950 <_write+0x12>
	}
	return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bd80      	pop	{r7, pc}

08001976 <_close>:

int _close(int file)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	return -1;
 800197e:	2301      	movs	r3, #1
 8001980:	425b      	negs	r3, r3
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0192      	lsls	r2, r2, #6
 800199a:	605a      	str	r2, [r3, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b004      	add	sp, #16
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f009 fc0a 	bl	800b218 <__errno>
 8001a04:	0003      	movs	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	18d2      	adds	r2, r2, r3
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b006      	add	sp, #24
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20004000 	.word	0x20004000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200000b0 	.word	0x200000b0
 8001a38:	20002420 	.word	0x20002420

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <CPP_UserSetup>:
{
    .name = "Telemetry"
};

void CPP_UserSetup(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
  // Software Timer that sends telemetry data
  telem_tx_timer_id = osTimerNew((osThreadFunc_t)SendTelemetryData, osTimerPeriodic, NULL, &telem_tx_timer_attr);
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <CPP_UserSetup+0x108>)
 8001a50:	4840      	ldr	r0, [pc, #256]	; (8001b54 <CPP_UserSetup+0x10c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	2101      	movs	r1, #1
 8001a56:	f006 f9c7 	bl	8007de8 <osTimerNew>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <CPP_UserSetup+0x110>)
 8001a5e:	601a      	str	r2, [r3, #0]
  if (telem_tx_timer_id == NULL)
 8001a60:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <CPP_UserSetup+0x110>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <CPP_UserSetup+0x24>
  {
      Error_Handler();
 8001a68:	f7ff fce4 	bl	8001434 <Error_Handler>
  }
  // Start Thread that sends CAN Data
  can_tx_timer_id = osTimerNew((osThreadFunc_t)SendCanMsgs, osTimerPeriodic, NULL, &can_tx_timer_attr);
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <CPP_UserSetup+0x114>)
 8001a6e:	483c      	ldr	r0, [pc, #240]	; (8001b60 <CPP_UserSetup+0x118>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	2101      	movs	r1, #1
 8001a74:	f006 f9b8 	bl	8007de8 <osTimerNew>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <CPP_UserSetup+0x11c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  if (can_tx_timer_id == NULL)
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <CPP_UserSetup+0x11c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <CPP_UserSetup+0x42>
  {
      Error_Handler();
 8001a86:	f7ff fcd5 	bl	8001434 <Error_Handler>
  }
  CANController.AddRxModule(&motor_rx_0);
 8001a8a:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <CPP_UserSetup+0x120>)
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <CPP_UserSetup+0x124>)
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f004 fdee 	bl	8006672 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  CANController.Init();
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <CPP_UserSetup+0x124>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f004 fc9d 	bl	80063d8 <_ZN11SolarGators7Drivers9CANDriver4InitEv>
  // Start Timers
  osTimerStart(telem_tx_timer_id, 1000);
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <CPP_UserSetup+0x110>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	22fa      	movs	r2, #250	; 0xfa
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f006 fa25 	bl	8007ef8 <osTimerStart>
  osTimerStart(can_tx_timer_id, 100);
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <CPP_UserSetup+0x11c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2164      	movs	r1, #100	; 0x64
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f006 fa1f 	bl	8007ef8 <osTimerStart>
  accel.SetRefVcc();
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <CPP_UserSetup+0x128>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f005 fe69 	bl	8007794 <_ZN11SolarGators7Drivers7LTC26309SetRefVccEv>
  regen.SetRefVcc();
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <CPP_UserSetup+0x12c>)
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f005 fe65 	bl	8007794 <_ZN11SolarGators7Drivers7LTC26309SetRefVccEv>
  for(int i = 0; i < 25600; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	23c8      	movs	r3, #200	; 0xc8
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	da12      	bge.n	8001afe <CPP_UserSetup+0xb6>
  {
    accel.WriteAndUpdate(i % 0xFF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	21ff      	movs	r1, #255	; 0xff
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7fe fc8d 	bl	80003fc <__aeabi_idivmod>
 8001ae2:	000b      	movs	r3, r1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <CPP_UserSetup+0x128>)
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0018      	movs	r0, r3
 8001aec:	f005 fe32 	bl	8007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>
    osDelay(50);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f006 f939 	bl	8007d68 <osDelay>
  for(int i = 0; i < 25600; i++)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e7e7      	b.n	8001ace <CPP_UserSetup+0x86>
  }
  for(int i = 0; i < 25600; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	23c8      	movs	r3, #200	; 0xc8
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	da12      	bge.n	8001b32 <CPP_UserSetup+0xea>
  {
    regen.WriteAndUpdate(i % 0xFF);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	21ff      	movs	r1, #255	; 0xff
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7fe fc73 	bl	80003fc <__aeabi_idivmod>
 8001b16:	000b      	movs	r3, r1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <CPP_UserSetup+0x12c>)
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f005 fe18 	bl	8007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>
    osDelay(50);
 8001b24:	2032      	movs	r0, #50	; 0x32
 8001b26:	f006 f91f 	bl	8007d68 <osDelay>
  for(int i = 0; i < 25600; i++)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	e7e7      	b.n	8001b02 <CPP_UserSetup+0xba>
  }
  regen.WriteAndUpdate(0);
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <CPP_UserSetup+0x12c>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	0018      	movs	r0, r3
 8001b38:	f005 fe0c 	bl	8007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>
  accel.WriteAndUpdate(0);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <CPP_UserSetup+0x128>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	0018      	movs	r0, r3
 8001b42:	f005 fe07 	bl	8007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	20000014 	.word	0x20000014
 8001b54:	08001ba1 	.word	0x08001ba1
 8001b58:	200005a0 	.word	0x200005a0
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	08001b79 	.word	0x08001b79
 8001b64:	2000059c 	.word	0x2000059c
 8001b68:	20000514 	.word	0x20000514
 8001b6c:	200000b4 	.word	0x200000b4
 8001b70:	200003e8 	.word	0x200003e8
 8001b74:	200003fc 	.word	0x200003fc

08001b78 <_Z11SendCanMsgsv>:

void SendCanMsgs()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  // Request Mitsuba Data
  motor_request.SetRequestAllFrames();
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <_Z11SendCanMsgsv+0x20>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f003 fd94 	bl	80056ac <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>
  CANController.Send(&motor_request);
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <_Z11SendCanMsgsv+0x20>)
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <_Z11SendCanMsgsv+0x24>)
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f004 fd12 	bl	80065b4 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	20000410 	.word	0x20000410
 8001b9c:	200000b4 	.word	0x200000b4

08001ba0 <_Z17SendTelemetryDatav>:

void SendTelemetryData()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  pit.SendDataModule(motor_rx_0);
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <_Z17SendTelemetryDatav+0x18>)
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <_Z17SendTelemetryDatav+0x1c>)
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f005 fea0 	bl	80078f0 <_ZN11SolarGators7Drivers8PitComms14SendDataModuleERNS_11DataModules10DataModuleE>
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	20000514 	.word	0x20000514
 8001bbc:	200003e0 	.word	0x200003e0

08001bc0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  CANController.SetRxFlag();
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f004 fd77 	bl	80066be <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>
  HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fdc0 	bl	800275a <HAL_CAN_DeactivateNotification>
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	200000b4 	.word	0x200000b4

08001be8 <_Z41__static_initialization_and_destruction_0ii>:

void UpdateDACs()
{

}
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d138      	bne.n	8001c6a <_Z41__static_initialization_and_destruction_0ii+0x82>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d134      	bne.n	8001c6a <_Z41__static_initialization_and_destruction_0ii+0x82>

extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart2;
extern SPI_HandleTypeDef hspi2;

SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 8001c00:	4930      	ldr	r1, [pc, #192]	; (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	0018      	movs	r0, r3
 8001c08:	f004 fb9a 	bl	8006340 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>
SolarGators::Drivers::RFD900x rfd(&huart2);
 8001c0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f005 ff0a 	bl	8007a2c <_ZN11SolarGators7Drivers7RFD900xC1EP20__UART_HandleTypeDef>
SolarGators::Drivers::PitComms pit(&rfd);
 8001c18:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f005 fe2a 	bl	8007878 <_ZN11SolarGators7Drivers8PitCommsC1EPNS0_5RadioE>

// DACs
SolarGators::Drivers::LTC2630 accel(&hspi2, Accel_CS_GPIO_Port, Accel_CS_Pin, SolarGators::Drivers::OperatingMode::Bit8);
 8001c24:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001c26:	492d      	ldr	r1, [pc, #180]	; (8001cdc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001c28:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	f005 fd44 	bl	80076bc <_ZN11SolarGators7Drivers7LTC2630C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftNS0_13OperatingModeE>
SolarGators::Drivers::LTC2630 regen(&hspi2, Regen_CS_GPIO_Port, Regen_CS_Pin, SolarGators::Drivers::OperatingMode::Bit8);
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001c36:	4929      	ldr	r1, [pc, #164]	; (8001cdc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001c38:	482a      	ldr	r0, [pc, #168]	; (8001ce4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2340      	movs	r3, #64	; 0x40
 8001c40:	f005 fd3c 	bl	80076bc <_ZN11SolarGators7Drivers7LTC2630C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftNS0_13OperatingModeE>

// Objects we want to get status on
// TODO: Steering
SolarGators::DataModules::MitsubaRequest motor_request(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001c48:	0011      	movs	r1, r2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f003 fcee 	bl	800562c <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>

// Objects that we will want to send data to the pit on
SolarGators::DataModules::OrionBMS bms(SolarGators::DataModuleInfo::Orion_Id);
 8001c50:	23d6      	movs	r3, #214	; 0xd6
 8001c52:	00da      	lsls	r2, r3, #3
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001c56:	0011      	movs	r1, r2
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f003 ff73 	bl	8005b44 <_ZN11SolarGators11DataModules8OrionBMSC1Em>
SolarGators::DataModules::MitsubaRx0 motor_rx_0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID, 0x04);
 8001c5e:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001c62:	2204      	movs	r2, #4
 8001c64:	0018      	movs	r0, r3
 8001c66:	f003 fd8f 	bl	8005788 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d123      	bne.n	8001cb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d11f      	bne.n	8001cb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 fdc2 	bl	8005804 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
SolarGators::DataModules::OrionBMS bms(SolarGators::DataModuleInfo::Orion_Id);
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f003 ff7a 	bl	8005b7c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
SolarGators::DataModules::MitsubaRequest motor_request(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f003 fcea 	bl	8005664 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
SolarGators::Drivers::LTC2630 regen(&hspi2, Regen_CS_GPIO_Port, Regen_CS_Pin, SolarGators::Drivers::OperatingMode::Bit8);
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f005 fd38 	bl	8007708 <_ZN11SolarGators7Drivers7LTC2630D1Ev>
SolarGators::Drivers::LTC2630 accel(&hspi2, Accel_CS_GPIO_Port, Accel_CS_Pin, SolarGators::Drivers::OperatingMode::Bit8);
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f005 fd34 	bl	8007708 <_ZN11SolarGators7Drivers7LTC2630D1Ev>
SolarGators::Drivers::PitComms pit(&rfd);
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f005 fe04 	bl	80078b0 <_ZN11SolarGators7Drivers8PitCommsD1Ev>
SolarGators::Drivers::RFD900x rfd(&huart2);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f005 fed4 	bl	8007a58 <_ZN11SolarGators7Drivers7RFD900xD1Ev>
SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f004 fbe8 	bl	8006488 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	0000ffff 	.word	0x0000ffff
 8001cc4:	20001f60 	.word	0x20001f60
 8001cc8:	200000b4 	.word	0x200000b4
 8001ccc:	2000200c 	.word	0x2000200c
 8001cd0:	200003d8 	.word	0x200003d8
 8001cd4:	200003e0 	.word	0x200003e0
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	20001eb0 	.word	0x20001eb0
 8001ce0:	200003e8 	.word	0x200003e8
 8001ce4:	200003fc 	.word	0x200003fc
 8001ce8:	08f89540 	.word	0x08f89540
 8001cec:	20000410 	.word	0x20000410
 8001cf0:	2000048c 	.word	0x2000048c
 8001cf4:	08850225 	.word	0x08850225
 8001cf8:	20000514 	.word	0x20000514

08001cfc <_GLOBAL__sub_I_CANController>:
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <_GLOBAL__sub_I_CANController+0x14>)
 8001d02:	0019      	movs	r1, r3
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7ff ff6f 	bl	8001be8 <_Z41__static_initialization_and_destruction_0ii>
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	0000ffff 	.word	0x0000ffff

08001d14 <_GLOBAL__sub_D_CANController>:
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <_GLOBAL__sub_D_CANController+0x14>)
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff ff63 	bl	8001be8 <_Z41__static_initialization_and_destruction_0ii>
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	0000ffff 	.word	0x0000ffff

08001d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d56:	f7ff fe71 	bl	8001a3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d5a:	f009 fa73 	bl	800b244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff f8e1 	bl	8000f24 <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   r0, =_estack
 8001d64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001d70:	0800cdd8 	.word	0x0800cdd8
  ldr r2, =_sbss
 8001d74:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001d78:	20002420 	.word	0x20002420

08001d7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_COMP_IRQHandler>
	...

08001d80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_Init+0x24>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_Init+0x24>)
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f7ff fd1b 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d96:	f7ff fb53 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	18d2      	adds	r2, r2, r3
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	20000024 	.word	0x20000024
 8001dc8:	200023cc 	.word	0x200023cc

08001dcc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	200023cc 	.word	0x200023cc

08001de0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0f0      	b.n	8001fd4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fb47 	bl	8001494 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e16:	f7ff ffd9 	bl	8001dcc <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1e:	e013      	b.n	8001e48 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e20:	f7ff ffd4 	bl	8001dcc <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d90c      	bls.n	8001e48 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	0292      	lsls	r2, r2, #10
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	2105      	movs	r1, #5
 8001e42:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0c5      	b.n	8001fd4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0e5      	beq.n	8001e20 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2102      	movs	r1, #2
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e64:	f7ff ffb2 	bl	8001dcc <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6c:	e013      	b.n	8001e96 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e6e:	f7ff ffad 	bl	8001dcc <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b0a      	cmp	r3, #10
 8001e7a:	d90c      	bls.n	8001e96 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	0292      	lsls	r2, r2, #10
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	2105      	movs	r1, #5
 8001e90:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e09e      	b.n	8001fd4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1e5      	bne.n	8001e6e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7e1b      	ldrb	r3, [r3, #24]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e5b      	ldrb	r3, [r3, #25]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	438a      	bics	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7e9b      	ldrb	r3, [r3, #26]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2120      	movs	r1, #32
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7edb      	ldrb	r3, [r3, #27]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2110      	movs	r1, #16
 8001f34:	438a      	bics	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2110      	movs	r1, #16
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f1b      	ldrb	r3, [r3, #28]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2108      	movs	r1, #8
 8001f70:	438a      	bics	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7f5b      	ldrb	r3, [r3, #29]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2104      	movs	r1, #4
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2104      	movs	r1, #4
 8001f9a:	438a      	bics	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	0011      	movs	r1, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fec:	2013      	movs	r0, #19
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	5c52      	ldrb	r2, [r2, r1]
 8001ff6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	18bb      	adds	r3, r7, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d004      	beq.n	800200c <HAL_CAN_ConfigFilter+0x30>
 8002002:	18bb      	adds	r3, r7, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d000      	beq.n	800200c <HAL_CAN_ConfigFilter+0x30>
 800200a:	e0cd      	b.n	80021a8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	58d3      	ldr	r3, [r2, r3]
 8002014:	2201      	movs	r2, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	0011      	movs	r1, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	221f      	movs	r2, #31
 8002028:	4013      	ands	r3, r2
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	2387      	movs	r3, #135	; 0x87
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	58d3      	ldr	r3, [r2, r3]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	43d2      	mvns	r2, r2
 800203e:	401a      	ands	r2, r3
 8002040:	0011      	movs	r1, r2
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	2387      	movs	r3, #135	; 0x87
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d129      	bne.n	80020a6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	2383      	movs	r3, #131	; 0x83
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	58d3      	ldr	r3, [r2, r3]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	2383      	movs	r3, #131	; 0x83
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800207c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3248      	adds	r2, #72	; 0x48
 8002082:	00d2      	lsls	r2, r2, #3
 8002084:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002098:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	3348      	adds	r3, #72	; 0x48
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	18cb      	adds	r3, r1, r3
 80020a2:	3304      	adds	r3, #4
 80020a4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d128      	bne.n	8002100 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	2383      	movs	r3, #131	; 0x83
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	58d2      	ldr	r2, [r2, r3]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	0011      	movs	r1, r2
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	2383      	movs	r3, #131	; 0x83
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020d6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3248      	adds	r2, #72	; 0x48
 80020dc:	00d2      	lsls	r2, r2, #3
 80020de:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	3348      	adds	r3, #72	; 0x48
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	18cb      	adds	r3, r1, r3
 80020fc:	3304      	adds	r3, #4
 80020fe:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10c      	bne.n	8002122 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	2381      	movs	r3, #129	; 0x81
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	43d2      	mvns	r2, r2
 8002114:	401a      	ands	r2, r3
 8002116:	0011      	movs	r1, r2
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	2381      	movs	r3, #129	; 0x81
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	50d1      	str	r1, [r2, r3]
 8002120:	e00a      	b.n	8002138 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	2381      	movs	r3, #129	; 0x81
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	58d2      	ldr	r2, [r2, r3]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	431a      	orrs	r2, r3
 800212e:	0011      	movs	r1, r2
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	2381      	movs	r3, #129	; 0x81
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10c      	bne.n	800215a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	2385      	movs	r3, #133	; 0x85
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	58d3      	ldr	r3, [r2, r3]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	43d2      	mvns	r2, r2
 800214c:	401a      	ands	r2, r3
 800214e:	0011      	movs	r1, r2
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	2385      	movs	r3, #133	; 0x85
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	50d1      	str	r1, [r2, r3]
 8002158:	e00a      	b.n	8002170 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	2385      	movs	r3, #133	; 0x85
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	58d2      	ldr	r2, [r2, r3]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	431a      	orrs	r2, r3
 8002166:	0011      	movs	r1, r2
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	2385      	movs	r3, #133	; 0x85
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10a      	bne.n	800218e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	2387      	movs	r3, #135	; 0x87
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	58d2      	ldr	r2, [r2, r3]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	431a      	orrs	r2, r3
 8002184:	0011      	movs	r1, r2
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	2387      	movs	r3, #135	; 0x87
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	58d3      	ldr	r3, [r2, r3]
 8002196:	2201      	movs	r2, #1
 8002198:	4393      	bics	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	02d2      	lsls	r2, r2, #11
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
  }
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b006      	add	sp, #24
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d12f      	bne.n	8002234 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	2102      	movs	r1, #2
 80021da:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ec:	f7ff fdee 	bl	8001dcc <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021f4:	e013      	b.n	800221e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f6:	f7ff fde9 	bl	8001dcc <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b0a      	cmp	r3, #10
 8002202:	d90c      	bls.n	800221e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	0292      	lsls	r2, r2, #10
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	2105      	movs	r1, #5
 8002218:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e012      	b.n	8002244 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d1e5      	bne.n	80021f6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e007      	b.n	8002244 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
  }
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b004      	add	sp, #16
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800225a:	201f      	movs	r0, #31
 800225c:	183b      	adds	r3, r7, r0
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	2120      	movs	r1, #32
 8002262:	5c52      	ldrb	r2, [r2, r1]
 8002264:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800226e:	183b      	adds	r3, r7, r0
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d004      	beq.n	8002280 <HAL_CAN_AddTxMessage+0x34>
 8002276:	183b      	adds	r3, r7, r0
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d000      	beq.n	8002280 <HAL_CAN_AddTxMessage+0x34>
 800227e:	e0b7      	b.n	80023f0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	04db      	lsls	r3, r3, #19
 8002286:	4013      	ands	r3, r2
 8002288:	d10a      	bne.n	80022a0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002292:	d105      	bne.n	80022a0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800229c:	d100      	bne.n	80022a0 <HAL_CAN_AddTxMessage+0x54>
 800229e:	e09e      	b.n	80023de <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	0e1b      	lsrs	r3, r3, #24
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d908      	bls.n	80022c2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0412      	lsls	r2, r2, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e09e      	b.n	8002400 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	3218      	adds	r2, #24
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	50d1      	str	r1, [r2, r3]
 80022ec:	e00f      	b.n	800230e <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f8:	431a      	orrs	r2, r3
 80022fa:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002304:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	3218      	adds	r2, #24
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3318      	adds	r3, #24
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	18cb      	adds	r3, r1, r3
 800231e:	3304      	adds	r3, #4
 8002320:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	7d1b      	ldrb	r3, [r3, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d112      	bne.n	8002350 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3318      	adds	r3, #24
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	18d3      	adds	r3, r2, r3
 8002336:	3304      	adds	r3, #4
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3318      	adds	r3, #24
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	18cb      	adds	r3, r1, r3
 800234c:	3304      	adds	r3, #4
 800234e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3307      	adds	r3, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	061a      	lsls	r2, r3, #24
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3306      	adds	r3, #6
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3305      	adds	r3, #5
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	0019      	movs	r1, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	6979      	ldr	r1, [r7, #20]
 800237c:	23c6      	movs	r3, #198	; 0xc6
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	0109      	lsls	r1, r1, #4
 8002382:	1841      	adds	r1, r0, r1
 8002384:	18cb      	adds	r3, r1, r3
 8002386:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3303      	adds	r3, #3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	061a      	lsls	r2, r3, #24
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3302      	adds	r3, #2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	0019      	movs	r1, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	23c4      	movs	r3, #196	; 0xc4
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	0109      	lsls	r1, r1, #4
 80023b8:	1841      	adds	r1, r0, r1
 80023ba:	18cb      	adds	r3, r1, r3
 80023bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	3218      	adds	r2, #24
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	58d2      	ldr	r2, [r2, r3]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	4311      	orrs	r1, r2
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	3218      	adds	r2, #24
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e010      	b.n	8002400 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	0392      	lsls	r2, r2, #14
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	02d2      	lsls	r2, r2, #11
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
  }
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b008      	add	sp, #32
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002414:	200b      	movs	r0, #11
 8002416:	183b      	adds	r3, r7, r0
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	2120      	movs	r1, #32
 800241c:	5c52      	ldrb	r2, [r2, r1]
 800241e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002420:	0002      	movs	r2, r0
 8002422:	18bb      	adds	r3, r7, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d003      	beq.n	8002432 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800242a:	18bb      	adds	r3, r7, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d11d      	bne.n	800246e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	04db      	lsls	r3, r3, #19
 800243c:	4013      	ands	r3, r2
 800243e:	d002      	beq.n	8002446 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	051b      	lsls	r3, r3, #20
 8002450:	4013      	ands	r3, r2
 8002452:	d002      	beq.n	800245a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	055b      	lsls	r3, r3, #21
 8002464:	4013      	ands	r3, r2
 8002466:	d002      	beq.n	800246e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002486:	2017      	movs	r0, #23
 8002488:	183b      	adds	r3, r7, r0
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	2120      	movs	r1, #32
 800248e:	5c52      	ldrb	r2, [r2, r1]
 8002490:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002492:	0002      	movs	r2, r0
 8002494:	18bb      	adds	r3, r7, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d004      	beq.n	80024a6 <HAL_CAN_GetRxMessage+0x2e>
 800249c:	18bb      	adds	r3, r7, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d000      	beq.n	80024a6 <HAL_CAN_GetRxMessage+0x2e>
 80024a4:	e0f8      	b.n	8002698 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10e      	bne.n	80024ca <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2203      	movs	r2, #3
 80024b4:	4013      	ands	r3, r2
 80024b6:	d117      	bne.n	80024e8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	0392      	lsls	r2, r2, #14
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0ee      	b.n	80026a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4013      	ands	r3, r2
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	0392      	lsls	r2, r2, #14
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0df      	b.n	80026a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	321b      	adds	r2, #27
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	58d3      	ldr	r3, [r2, r3]
 80024f4:	2204      	movs	r2, #4
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	321b      	adds	r2, #27
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	58d3      	ldr	r3, [r2, r3]
 8002510:	0d5b      	lsrs	r3, r3, #21
 8002512:	055b      	lsls	r3, r3, #21
 8002514:	0d5a      	lsrs	r2, r3, #21
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00a      	b.n	8002532 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	321b      	adds	r2, #27
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	58d3      	ldr	r3, [r2, r3]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	321b      	adds	r2, #27
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	58d3      	ldr	r3, [r2, r3]
 800253e:	2202      	movs	r2, #2
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	331b      	adds	r3, #27
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	18d3      	adds	r3, r2, r3
 8002552:	3304      	adds	r3, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	220f      	movs	r2, #15
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	331b      	adds	r3, #27
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	3304      	adds	r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	331b      	adds	r3, #27
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	18d3      	adds	r3, r2, r3
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	0c1a      	lsrs	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	23dc      	movs	r3, #220	; 0xdc
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	188a      	adds	r2, r1, r2
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	23dc      	movs	r3, #220	; 0xdc
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	188a      	adds	r2, r1, r2
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0a1a      	lsrs	r2, r3, #8
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	23dc      	movs	r3, #220	; 0xdc
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	188a      	adds	r2, r1, r2
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0c1a      	lsrs	r2, r3, #16
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3302      	adds	r3, #2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	23dc      	movs	r3, #220	; 0xdc
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	188a      	adds	r2, r1, r2
 80025f0:	18d3      	adds	r3, r2, r3
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e1a      	lsrs	r2, r3, #24
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3303      	adds	r3, #3
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	23de      	movs	r3, #222	; 0xde
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	188a      	adds	r2, r1, r2
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	23de      	movs	r3, #222	; 0xde
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	188a      	adds	r2, r1, r2
 8002626:	18d3      	adds	r3, r2, r3
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0a1a      	lsrs	r2, r3, #8
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3305      	adds	r3, #5
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	23de      	movs	r3, #222	; 0xde
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	188a      	adds	r2, r1, r2
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0c1a      	lsrs	r2, r3, #16
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3306      	adds	r3, #6
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	23de      	movs	r3, #222	; 0xde
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	188a      	adds	r2, r1, r2
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e1a      	lsrs	r2, r3, #24
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	3307      	adds	r3, #7
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2120      	movs	r1, #32
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e007      	b.n	8002694 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2120      	movs	r1, #32
 8002690:	430a      	orrs	r2, r1
 8002692:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e007      	b.n	80026a8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	02d2      	lsls	r2, r2, #11
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
  }
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026be:	200b      	movs	r0, #11
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	2120      	movs	r1, #32
 80026c6:	5c52      	ldrb	r2, [r2, r1]
 80026c8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ca:	0002      	movs	r2, r0
 80026cc:	18bb      	adds	r3, r7, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_GetRxFifoFillLevel+0x2c>
 80026d4:	18bb      	adds	r3, r7, r2
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d10f      	bne.n	80026fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e005      	b.n	80026fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002710:	200f      	movs	r0, #15
 8002712:	183b      	adds	r3, r7, r0
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	2120      	movs	r1, #32
 8002718:	5c52      	ldrb	r2, [r2, r1]
 800271a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800271c:	0002      	movs	r2, r0
 800271e:	18bb      	adds	r3, r7, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d003      	beq.n	800272e <HAL_CAN_ActivateNotification+0x28>
 8002726:	18bb      	adds	r3, r7, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d109      	bne.n	8002742 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e007      	b.n	8002752 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	02d2      	lsls	r2, r2, #11
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
  }
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002764:	200f      	movs	r0, #15
 8002766:	183b      	adds	r3, r7, r0
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	2120      	movs	r1, #32
 800276c:	5c52      	ldrb	r2, [r2, r1]
 800276e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002770:	0002      	movs	r2, r0
 8002772:	18bb      	adds	r3, r7, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d003      	beq.n	8002782 <HAL_CAN_DeactivateNotification+0x28>
 800277a:	18bb      	adds	r3, r7, r2
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d10a      	bne.n	8002798 <HAL_CAN_DeactivateNotification+0x3e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e007      	b.n	80027a8 <HAL_CAN_DeactivateNotification+0x4e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	02d2      	lsls	r2, r2, #11
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
  }
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_CAN_IRQHandler+0x46>
 80027f4:	e084      	b.n	8002900 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4013      	ands	r3, r2
 80027fc:	d024      	beq.n	8002848 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f981 	bl	8002b18 <HAL_CAN_TxMailbox0CompleteCallback>
 8002816:	e017      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2204      	movs	r2, #4
 800281c:	4013      	ands	r3, r2
 800281e:	d005      	beq.n	800282c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	4313      	orrs	r3, r2
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e00d      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2208      	movs	r2, #8
 8002830:	4013      	ands	r3, r2
 8002832:	d005      	beq.n	8002840 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0152      	lsls	r2, r2, #5
 800283a:	4313      	orrs	r3, r2
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e003      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f980 	bl	8002b48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d028      	beq.n	80028a4 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	0052      	lsls	r2, r2, #1
 800285a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f95d 	bl	8002b28 <HAL_CAN_TxMailbox1CompleteCallback>
 800286e:	e019      	b.n	80028a4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4013      	ands	r3, r2
 8002878:	d005      	beq.n	8002886 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	0192      	lsls	r2, r2, #6
 8002880:	4313      	orrs	r3, r2
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	e00e      	b.n	80028a4 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4013      	ands	r3, r2
 800288e:	d005      	beq.n	800289c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	01d2      	lsls	r2, r2, #7
 8002896:	4313      	orrs	r3, r2
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	e003      	b.n	80028a4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f95a 	bl	8002b58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	4013      	ands	r3, r2
 80028ac:	d028      	beq.n	8002900 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	0252      	lsls	r2, r2, #9
 80028b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	4013      	ands	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f937 	bl	8002b38 <HAL_CAN_TxMailbox2CompleteCallback>
 80028ca:	e019      	b.n	8002900 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	02db      	lsls	r3, r3, #11
 80028d2:	4013      	ands	r3, r2
 80028d4:	d005      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	4313      	orrs	r3, r2
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e00e      	b.n	8002900 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	031b      	lsls	r3, r3, #12
 80028e8:	4013      	ands	r3, r2
 80028ea:	d005      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	0252      	lsls	r2, r2, #9
 80028f2:	4313      	orrs	r3, r2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e003      	b.n	8002900 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f934 	bl	8002b68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2208      	movs	r2, #8
 8002904:	4013      	ands	r3, r2
 8002906:	d00c      	beq.n	8002922 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2210      	movs	r2, #16
 800290c:	4013      	ands	r3, r2
 800290e:	d008      	beq.n	8002922 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4313      	orrs	r3, r2
 8002918:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	d00b      	beq.n	8002942 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2208      	movs	r2, #8
 800292e:	4013      	ands	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2208      	movs	r2, #8
 8002938:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f91b 	bl	8002b78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	d003      	beq.n	800295e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff f931 	bl	8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	d00c      	beq.n	8002980 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2210      	movs	r2, #16
 800296a:	4013      	ands	r3, r2
 800296c:	d008      	beq.n	8002980 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	00d2      	lsls	r2, r2, #3
 8002974:	4313      	orrs	r3, r2
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2210      	movs	r2, #16
 800297e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2220      	movs	r2, #32
 8002984:	4013      	ands	r3, r2
 8002986:	d00b      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2208      	movs	r2, #8
 800298c:	4013      	ands	r3, r2
 800298e:	d007      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2208      	movs	r2, #8
 8002996:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f8fc 	bl	8002b98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2210      	movs	r2, #16
 80029a4:	4013      	ands	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2203      	movs	r2, #3
 80029b0:	4013      	ands	r3, r2
 80029b2:	d003      	beq.n	80029bc <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 f8e6 	bl	8002b88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00b      	beq.n	80029de <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2210      	movs	r2, #16
 80029d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f8e5 	bl	8002ba8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2208      	movs	r2, #8
 80029ec:	4013      	ands	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2208      	movs	r2, #8
 80029f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8dc 	bl	8002bb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	4013      	ands	r3, r2
 8002a08:	d100      	bne.n	8002a0c <HAL_CAN_IRQHandler+0x25c>
 8002a0a:	e074      	b.n	8002af6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4013      	ands	r3, r2
 8002a12:	d100      	bne.n	8002a16 <HAL_CAN_IRQHandler+0x266>
 8002a14:	e06b      	b.n	8002aee <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a26:	d003      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a40:	d003      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	4313      	orrs	r3, r2
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4013      	ands	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2204      	movs	r2, #4
 8002a58:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a5a:	d003      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4313      	orrs	r3, r2
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d03f      	beq.n	8002aee <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2270      	movs	r2, #112	; 0x70
 8002a72:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a74:	d03b      	beq.n	8002aee <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2270      	movs	r2, #112	; 0x70
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b60      	cmp	r3, #96	; 0x60
 8002a7e:	d027      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x320>
 8002a80:	d82c      	bhi.n	8002adc <HAL_CAN_IRQHandler+0x32c>
 8002a82:	2b50      	cmp	r3, #80	; 0x50
 8002a84:	d01f      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x316>
 8002a86:	d829      	bhi.n	8002adc <HAL_CAN_IRQHandler+0x32c>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d017      	beq.n	8002abc <HAL_CAN_IRQHandler+0x30c>
 8002a8c:	d826      	bhi.n	8002adc <HAL_CAN_IRQHandler+0x32c>
 8002a8e:	2b30      	cmp	r3, #48	; 0x30
 8002a90:	d00f      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x302>
 8002a92:	d823      	bhi.n	8002adc <HAL_CAN_IRQHandler+0x32c>
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d002      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x2ee>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d005      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a9c:	e01e      	b.n	8002adc <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa6:	e01a      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2210      	movs	r2, #16
 8002aac:	4313      	orrs	r3, r2
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab0:	e015      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aba:	e010      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac4:	e00b      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	4313      	orrs	r3, r2
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ace:	e006      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	0052      	lsls	r2, r2, #1
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ada:	e000      	b.n	8002ade <HAL_CAN_IRQHandler+0x32e>
            break;
 8002adc:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2170      	movs	r1, #112	; 0x70
 8002aea:	438a      	bics	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2204      	movs	r2, #4
 8002af4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f85c 	bl	8002bc8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b00a      	add	sp, #40	; 0x28
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	0002      	movs	r2, r0
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	1dfb      	adds	r3, r7, #7
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b7f      	cmp	r3, #127	; 0x7f
 8002bea:	d809      	bhi.n	8002c00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	231f      	movs	r3, #31
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <__NVIC_EnableIRQ+0x30>)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4091      	lsls	r1, r2
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
  }
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	0002      	movs	r2, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c20:	d828      	bhi.n	8002c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c22:	4a2f      	ldr	r2, [pc, #188]	; (8002ce0 <__NVIC_SetPriority+0xd4>)
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	33c0      	adds	r3, #192	; 0xc0
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	589b      	ldr	r3, [r3, r2]
 8002c32:	1dfa      	adds	r2, r7, #7
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	0011      	movs	r1, r2
 8002c38:	2203      	movs	r2, #3
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	00d2      	lsls	r2, r2, #3
 8002c3e:	21ff      	movs	r1, #255	; 0xff
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	43d2      	mvns	r2, r2
 8002c46:	401a      	ands	r2, r3
 8002c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	401a      	ands	r2, r3
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	0018      	movs	r0, r3
 8002c58:	2303      	movs	r3, #3
 8002c5a:	4003      	ands	r3, r0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c60:	481f      	ldr	r0, [pc, #124]	; (8002ce0 <__NVIC_SetPriority+0xd4>)
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	33c0      	adds	r3, #192	; 0xc0
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c72:	e031      	b.n	8002cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <__NVIC_SetPriority+0xd8>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	400b      	ands	r3, r1
 8002c80:	3b08      	subs	r3, #8
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3306      	adds	r3, #6
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1dfa      	adds	r2, r7, #7
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	0011      	movs	r1, r2
 8002c94:	2203      	movs	r2, #3
 8002c96:	400a      	ands	r2, r1
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	21ff      	movs	r1, #255	; 0xff
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	43d2      	mvns	r2, r2
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	401a      	ands	r2, r3
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	4003      	ands	r3, r0
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cbc:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <__NVIC_SetPriority+0xd8>)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	001c      	movs	r4, r3
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	4023      	ands	r3, r4
 8002cc8:	3b08      	subs	r3, #8
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	3306      	adds	r3, #6
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	18c3      	adds	r3, r0, r3
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b003      	add	sp, #12
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	1c02      	adds	r2, r0, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff81 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	0002      	movs	r2, r0
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff ff57 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d42:	e155      	b.n	8002ff0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4091      	lsls	r1, r2
 8002d4e:	000a      	movs	r2, r1
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d100      	bne.n	8002d5c <HAL_GPIO_Init+0x28>
 8002d5a:	e146      	b.n	8002fea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d005      	beq.n	8002d74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d130      	bne.n	8002dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	409a      	lsls	r2, r3
 8002d82:	0013      	movs	r3, r2
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	409a      	lsls	r2, r3
 8002d96:	0013      	movs	r3, r2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002daa:	2201      	movs	r2, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	409a      	lsls	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	0013      	movs	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d017      	beq.n	8002e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	409a      	lsls	r2, r3
 8002df0:	0013      	movs	r3, r2
 8002df2:	43da      	mvns	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	0013      	movs	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d123      	bne.n	8002e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	58d3      	ldr	r3, [r2, r3]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2207      	movs	r2, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2107      	movs	r1, #7
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	0013      	movs	r3, r2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	6939      	ldr	r1, [r7, #16]
 8002e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0013      	movs	r3, r2
 8002e76:	43da      	mvns	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	401a      	ands	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	029b      	lsls	r3, r3, #10
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d100      	bne.n	8002ea8 <HAL_GPIO_Init+0x174>
 8002ea6:	e0a0      	b.n	8002fea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea8:	4b57      	ldr	r3, [pc, #348]	; (8003008 <HAL_GPIO_Init+0x2d4>)
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_GPIO_Init+0x2d4>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	4b54      	ldr	r3, [pc, #336]	; (8003008 <HAL_GPIO_Init+0x2d4>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_GPIO_Init+0x2d8>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	589b      	ldr	r3, [r3, r2]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	0013      	movs	r3, r2
 8002edc:	43da      	mvns	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	2390      	movs	r3, #144	; 0x90
 8002ee8:	05db      	lsls	r3, r3, #23
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x1ee>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a47      	ldr	r2, [pc, #284]	; (8003010 <HAL_GPIO_Init+0x2dc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x1ea>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_GPIO_Init+0x2e0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x1e6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_GPIO_Init+0x2e4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x1e2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a44      	ldr	r2, [pc, #272]	; (800301c <HAL_GPIO_Init+0x2e8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x1de>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f22:	2300      	movs	r3, #0
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	2103      	movs	r1, #3
 8002f28:	400a      	ands	r2, r1
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	; (800300c <HAL_GPIO_Init+0x2d8>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	035b      	lsls	r3, r3, #13
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	039b      	lsls	r3, r3, #14
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_GPIO_Init+0x2ec>)
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	40da      	lsrs	r2, r3
 8002ff8:	1e13      	subs	r3, r2, #0
 8002ffa:	d000      	beq.n	8002ffe <HAL_GPIO_Init+0x2ca>
 8002ffc:	e6a2      	b.n	8002d44 <HAL_GPIO_Init+0x10>
  } 
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	40010000 	.word	0x40010000
 8003010:	48000400 	.word	0x48000400
 8003014:	48000800 	.word	0x48000800
 8003018:	48000c00 	.word	0x48000c00
 800301c:	48001000 	.word	0x48001000
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	0008      	movs	r0, r1
 800302e:	0011      	movs	r1, r2
 8003030:	1cbb      	adds	r3, r7, #2
 8003032:	1c02      	adds	r2, r0, #0
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	1c7b      	adds	r3, r7, #1
 8003038:	1c0a      	adds	r2, r1, #0
 800303a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800303c:	1c7b      	adds	r3, r7, #1
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003044:	1cbb      	adds	r3, r7, #2
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304e:	1cbb      	adds	r3, r7, #2
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	000a      	movs	r2, r1
 8003068:	1cbb      	adds	r3, r7, #2
 800306a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003072:	1cbb      	adds	r3, r7, #2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4013      	ands	r3, r2
 800307a:	041a      	lsls	r2, r3, #16
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43db      	mvns	r3, r3
 8003080:	1cb9      	adds	r1, r7, #2
 8003082:	8809      	ldrh	r1, [r1, #0]
 8003084:	400b      	ands	r3, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e082      	b.n	80031ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2241      	movs	r2, #65	; 0x41
 80030aa:	5c9b      	ldrb	r3, [r3, r2]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2240      	movs	r2, #64	; 0x40
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7fe fa3f 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2241      	movs	r2, #65	; 0x41
 80030c6:	2124      	movs	r1, #36	; 0x24
 80030c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	438a      	bics	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4934      	ldr	r1, [pc, #208]	; (80031b4 <HAL_I2C_Init+0x120>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4931      	ldr	r1, [pc, #196]	; (80031b8 <HAL_I2C_Init+0x124>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d108      	bne.n	8003112 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0209      	lsls	r1, r1, #8
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	e007      	b.n	8003122 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2184      	movs	r1, #132	; 0x84
 800311c:	0209      	lsls	r1, r1, #8
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d104      	bne.n	8003134 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	491f      	ldr	r1, [pc, #124]	; (80031bc <HAL_I2C_Init+0x128>)
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	491a      	ldr	r1, [pc, #104]	; (80031b8 <HAL_I2C_Init+0x124>)
 8003150:	400a      	ands	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	431a      	orrs	r2, r3
 800315e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69d9      	ldr	r1, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2101      	movs	r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2241      	movs	r2, #65	; 0x41
 8003198:	2120      	movs	r1, #32
 800319a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2242      	movs	r2, #66	; 0x42
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	f0ffffff 	.word	0xf0ffffff
 80031b8:	ffff7fff 	.word	0xffff7fff
 80031bc:	02008000 	.word	0x02008000

080031c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2241      	movs	r2, #65	; 0x41
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d138      	bne.n	8003248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	5c9b      	ldrb	r3, [r3, r2]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e032      	b.n	800324a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2240      	movs	r2, #64	; 0x40
 80031e8:	2101      	movs	r1, #1
 80031ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2241      	movs	r2, #65	; 0x41
 80031f0:	2124      	movs	r1, #36	; 0x24
 80031f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	438a      	bics	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4911      	ldr	r1, [pc, #68]	; (8003254 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	2120      	movs	r1, #32
 800323a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	ffffefff 	.word	0xffffefff

08003258 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2241      	movs	r2, #65	; 0x41
 8003266:	5c9b      	ldrb	r3, [r3, r2]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d139      	bne.n	80032e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	5c9b      	ldrb	r3, [r3, r2]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003278:	2302      	movs	r3, #2
 800327a:	e033      	b.n	80032e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	2101      	movs	r1, #1
 8003282:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2241      	movs	r2, #65	; 0x41
 8003288:	2124      	movs	r1, #36	; 0x24
 800328a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a11      	ldr	r2, [pc, #68]	; (80032ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2241      	movs	r2, #65	; 0x41
 80032d2:	2120      	movs	r1, #32
 80032d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	fffff0ff 	.word	0xfffff0ff

080032f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	b08b      	sub	sp, #44	; 0x2c
 80032f4:	af06      	add	r7, sp, #24
 80032f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0ff      	b.n	8003502 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a81      	ldr	r2, [pc, #516]	; (800350c <HAL_PCD_Init+0x21c>)
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	23aa      	movs	r3, #170	; 0xaa
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	2100      	movs	r1, #0
 8003316:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0018      	movs	r0, r3
 800331c:	f7fe fa36 	bl	800178c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a7a      	ldr	r2, [pc, #488]	; (800350c <HAL_PCD_Init+0x21c>)
 8003324:	2103      	movs	r1, #3
 8003326:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0018      	movs	r0, r3
 800332e:	f002 f8d3 	bl	80054d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003332:	230f      	movs	r3, #15
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e058      	b.n	80033ee <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800333c:	200f      	movs	r0, #15
 800333e:	183b      	adds	r3, r7, r0
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	0013      	movs	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	189b      	adds	r3, r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	18cb      	adds	r3, r1, r3
 8003350:	3301      	adds	r3, #1
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003356:	183b      	adds	r3, r7, r0
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	0013      	movs	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	189b      	adds	r3, r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	183a      	adds	r2, r7, r0
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336c:	0004      	movs	r4, r0
 800336e:	183b      	adds	r3, r7, r0
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	193b      	adds	r3, r7, r4
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b298      	uxth	r0, r3
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	0013      	movs	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	189b      	adds	r3, r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	18cb      	adds	r3, r1, r3
 8003384:	3336      	adds	r3, #54	; 0x36
 8003386:	1c02      	adds	r2, r0, #0
 8003388:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800338a:	193b      	adds	r3, r7, r4
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	0013      	movs	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	189b      	adds	r3, r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	18cb      	adds	r3, r1, r3
 800339c:	3303      	adds	r3, #3
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	0013      	movs	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	18cb      	adds	r3, r1, r3
 80033b2:	3338      	adds	r3, #56	; 0x38
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	0013      	movs	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	18cb      	adds	r3, r1, r3
 80033c8:	333c      	adds	r3, #60	; 0x3c
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	781a      	ldrb	r2, [r3, #0]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	0013      	movs	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	18cb      	adds	r3, r1, r3
 80033de:	3340      	adds	r3, #64	; 0x40
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	3201      	adds	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	210f      	movs	r1, #15
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d39f      	bcc.n	800333c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e056      	b.n	80034b2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003404:	240f      	movs	r4, #15
 8003406:	193b      	adds	r3, r7, r4
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	236a      	movs	r3, #106	; 0x6a
 800340e:	33ff      	adds	r3, #255	; 0xff
 8003410:	0019      	movs	r1, r3
 8003412:	0013      	movs	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	189b      	adds	r3, r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	18c3      	adds	r3, r0, r3
 800341c:	185b      	adds	r3, r3, r1
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003422:	193b      	adds	r3, r7, r4
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	23b4      	movs	r3, #180	; 0xb4
 800342a:	0059      	lsls	r1, r3, #1
 800342c:	0013      	movs	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	189b      	adds	r3, r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	18c3      	adds	r3, r0, r3
 8003436:	185b      	adds	r3, r3, r1
 8003438:	193a      	adds	r2, r7, r4
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800343e:	193b      	adds	r3, r7, r4
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	236c      	movs	r3, #108	; 0x6c
 8003446:	33ff      	adds	r3, #255	; 0xff
 8003448:	0019      	movs	r1, r3
 800344a:	0013      	movs	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	189b      	adds	r3, r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	18c3      	adds	r3, r0, r3
 8003454:	185b      	adds	r3, r3, r1
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800345a:	193b      	adds	r3, r7, r4
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	23bc      	movs	r3, #188	; 0xbc
 8003462:	0059      	lsls	r1, r3, #1
 8003464:	0013      	movs	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	189b      	adds	r3, r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	18c3      	adds	r3, r0, r3
 800346e:	185b      	adds	r3, r3, r1
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003474:	193b      	adds	r3, r7, r4
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	23be      	movs	r3, #190	; 0xbe
 800347c:	0059      	lsls	r1, r3, #1
 800347e:	0013      	movs	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	189b      	adds	r3, r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	18c3      	adds	r3, r0, r3
 8003488:	185b      	adds	r3, r3, r1
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	23c0      	movs	r3, #192	; 0xc0
 8003496:	0059      	lsls	r1, r3, #1
 8003498:	0013      	movs	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	189b      	adds	r3, r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	18c3      	adds	r3, r0, r3
 80034a2:	185b      	adds	r3, r3, r1
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	3201      	adds	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3a1      	bcc.n	8003404 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	466a      	mov	r2, sp
 80034c8:	0011      	movs	r1, r2
 80034ca:	001a      	movs	r2, r3
 80034cc:	3210      	adds	r2, #16
 80034ce:	ca70      	ldmia	r2!, {r4, r5, r6}
 80034d0:	c170      	stmia	r1!, {r4, r5, r6}
 80034d2:	ca30      	ldmia	r2!, {r4, r5}
 80034d4:	c130      	stmia	r1!, {r4, r5}
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f002 f816 	bl	800550c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_PCD_Init+0x21c>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d103      	bne.n	8003500 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f808 	bl	8003510 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b005      	add	sp, #20
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	000002a9 	.word	0x000002a9

08003510 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	23ba      	movs	r3, #186	; 0xba
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	2101      	movs	r1, #1
 8003526:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	23b8      	movs	r3, #184	; 0xb8
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	2100      	movs	r1, #0
 8003530:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2254      	movs	r2, #84	; 0x54
 8003536:	5a9b      	ldrh	r3, [r3, r2]
 8003538:	b29b      	uxth	r3, r3
 800353a:	2201      	movs	r2, #1
 800353c:	4313      	orrs	r3, r2
 800353e:	b299      	uxth	r1, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2254      	movs	r2, #84	; 0x54
 8003544:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2254      	movs	r2, #84	; 0x54
 800354a:	5a9b      	ldrh	r3, [r3, r2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	2202      	movs	r2, #2
 8003550:	4313      	orrs	r3, r2
 8003552:	b299      	uxth	r1, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2254      	movs	r2, #84	; 0x54
 8003558:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f000 fb76 	bl	8003c64 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d100      	bne.n	8003584 <HAL_RCC_OscConfig+0x20>
 8003582:	e08e      	b.n	80036a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003584:	4bc5      	ldr	r3, [pc, #788]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	220c      	movs	r2, #12
 800358a:	4013      	ands	r3, r2
 800358c:	2b04      	cmp	r3, #4
 800358e:	d00e      	beq.n	80035ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003590:	4bc2      	ldr	r3, [pc, #776]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	220c      	movs	r2, #12
 8003596:	4013      	ands	r3, r2
 8003598:	2b08      	cmp	r3, #8
 800359a:	d117      	bne.n	80035cc <HAL_RCC_OscConfig+0x68>
 800359c:	4bbf      	ldr	r3, [pc, #764]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	401a      	ands	r2, r3
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d10e      	bne.n	80035cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ae:	4bbb      	ldr	r3, [pc, #748]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	4013      	ands	r3, r2
 80035b8:	d100      	bne.n	80035bc <HAL_RCC_OscConfig+0x58>
 80035ba:	e071      	b.n	80036a0 <HAL_RCC_OscConfig+0x13c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d000      	beq.n	80035c6 <HAL_RCC_OscConfig+0x62>
 80035c4:	e06c      	b.n	80036a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f000 fb4c 	bl	8003c64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x80>
 80035d4:	4bb1      	ldr	r3, [pc, #708]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4bb0      	ldr	r3, [pc, #704]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	0249      	lsls	r1, r1, #9
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e02f      	b.n	8003644 <HAL_RCC_OscConfig+0xe0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0xa2>
 80035ec:	4bab      	ldr	r3, [pc, #684]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4baa      	ldr	r3, [pc, #680]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035f2:	49ab      	ldr	r1, [pc, #684]	; (80038a0 <HAL_RCC_OscConfig+0x33c>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	4ba8      	ldr	r3, [pc, #672]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4ba7      	ldr	r3, [pc, #668]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80035fe:	49a9      	ldr	r1, [pc, #676]	; (80038a4 <HAL_RCC_OscConfig+0x340>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e01e      	b.n	8003644 <HAL_RCC_OscConfig+0xe0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d10e      	bne.n	800362c <HAL_RCC_OscConfig+0xc8>
 800360e:	4ba3      	ldr	r3, [pc, #652]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4ba2      	ldr	r3, [pc, #648]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	02c9      	lsls	r1, r1, #11
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4b9f      	ldr	r3, [pc, #636]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b9e      	ldr	r3, [pc, #632]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0249      	lsls	r1, r1, #9
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0xe0>
 800362c:	4b9b      	ldr	r3, [pc, #620]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b9a      	ldr	r3, [pc, #616]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003632:	499b      	ldr	r1, [pc, #620]	; (80038a0 <HAL_RCC_OscConfig+0x33c>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4b98      	ldr	r3, [pc, #608]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b97      	ldr	r3, [pc, #604]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800363e:	4999      	ldr	r1, [pc, #612]	; (80038a4 <HAL_RCC_OscConfig+0x340>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fbbe 	bl	8001dcc <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003656:	f7fe fbb9 	bl	8001dcc <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e2fd      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003668:	4b8c      	ldr	r3, [pc, #560]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	4013      	ands	r3, r2
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0xf2>
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe fba9 	bl	8001dcc <HAL_GetTick>
 800367a:	0003      	movs	r3, r0
 800367c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe fba4 	bl	8001dcc <HAL_GetTick>
 8003684:	0002      	movs	r2, r0
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e2e8      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	4013      	ands	r3, r2
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x11c>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2202      	movs	r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	d100      	bne.n	80036ae <HAL_RCC_OscConfig+0x14a>
 80036ac:	e06c      	b.n	8003788 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036ae:	4b7b      	ldr	r3, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	220c      	movs	r2, #12
 80036b4:	4013      	ands	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036b8:	4b78      	ldr	r3, [pc, #480]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	220c      	movs	r2, #12
 80036be:	4013      	ands	r3, r2
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d11f      	bne.n	8003704 <HAL_RCC_OscConfig+0x1a0>
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	23c0      	movs	r3, #192	; 0xc0
 80036ca:	025b      	lsls	r3, r3, #9
 80036cc:	401a      	ands	r2, r3
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b71      	ldr	r3, [pc, #452]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x188>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e2bb      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	22f8      	movs	r2, #248	; 0xf8
 80036f2:	4393      	bics	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00da      	lsls	r2, r3, #3
 80036fc:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e041      	b.n	8003788 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d024      	beq.n	8003756 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe fb58 	bl	8001dcc <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe fb53 	bl	8001dcc <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e297      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	4b59      	ldr	r3, [pc, #356]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2202      	movs	r2, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d0f1      	beq.n	8003722 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	22f8      	movs	r2, #248	; 0xf8
 8003744:	4393      	bics	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	00da      	lsls	r2, r3, #3
 800374e:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e018      	b.n	8003788 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fe fb33 	bl	8001dcc <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe fb2e 	bl	8001dcc <HAL_GetTick>
 8003770:	0002      	movs	r2, r0
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e272      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d1f1      	bne.n	800376c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	4013      	ands	r3, r2
 8003790:	d036      	beq.n	8003800 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800379c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379e:	4b3f      	ldr	r3, [pc, #252]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80037a0:	2101      	movs	r1, #1
 80037a2:	430a      	orrs	r2, r1
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7fe fb11 	bl	8001dcc <HAL_GetTick>
 80037aa:	0003      	movs	r3, r0
 80037ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe fb0c 	bl	8001dcc <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e250      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2202      	movs	r2, #2
 80037c8:	4013      	ands	r3, r2
 80037ca:	d0f1      	beq.n	80037b0 <HAL_RCC_OscConfig+0x24c>
 80037cc:	e018      	b.n	8003800 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ce:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80037d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d2:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	438a      	bics	r2, r1
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe faf7 	bl	8001dcc <HAL_GetTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe faf2 	bl	8001dcc <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e236      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_RCC_OscConfig+0x338>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d1f1      	bne.n	80037e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2204      	movs	r2, #4
 8003806:	4013      	ands	r3, r2
 8003808:	d100      	bne.n	800380c <HAL_RCC_OscConfig+0x2a8>
 800380a:	e0b5      	b.n	8003978 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380c:	201f      	movs	r0, #31
 800380e:	183b      	adds	r3, r7, r0
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	055b      	lsls	r3, r3, #21
 800381c:	4013      	ands	r3, r2
 800381e:	d110      	bne.n	8003842 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0549      	lsls	r1, r1, #21
 800382a:	430a      	orrs	r2, r1
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	4013      	ands	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800383c:	183b      	adds	r3, r7, r0
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_OscConfig+0x344>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4013      	ands	r3, r2
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCC_OscConfig+0x344>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x344>)
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	0049      	lsls	r1, r1, #1
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385c:	f7fe fab6 	bl	8001dcc <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe fab1 	bl	8001dcc <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1f5      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x344>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10f      	bne.n	80038ac <HAL_RCC_OscConfig+0x348>
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_OscConfig+0x338>)
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_RCC_OscConfig+0x338>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	621a      	str	r2, [r3, #32]
 8003898:	e036      	b.n	8003908 <HAL_RCC_OscConfig+0x3a4>
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	40021000 	.word	0x40021000
 80038a0:	fffeffff 	.word	0xfffeffff
 80038a4:	fffbffff 	.word	0xfffbffff
 80038a8:	40007000 	.word	0x40007000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10c      	bne.n	80038ce <HAL_RCC_OscConfig+0x36a>
 80038b4:	4bca      	ldr	r3, [pc, #808]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038b6:	6a1a      	ldr	r2, [r3, #32]
 80038b8:	4bc9      	ldr	r3, [pc, #804]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	621a      	str	r2, [r3, #32]
 80038c0:	4bc7      	ldr	r3, [pc, #796]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	4bc6      	ldr	r3, [pc, #792]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038c6:	2104      	movs	r1, #4
 80038c8:	438a      	bics	r2, r1
 80038ca:	621a      	str	r2, [r3, #32]
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x3a4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x38c>
 80038d6:	4bc2      	ldr	r3, [pc, #776]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	4bc1      	ldr	r3, [pc, #772]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038dc:	2104      	movs	r1, #4
 80038de:	430a      	orrs	r2, r1
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	4bbf      	ldr	r3, [pc, #764]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	4bbe      	ldr	r3, [pc, #760]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038e8:	2101      	movs	r1, #1
 80038ea:	430a      	orrs	r2, r1
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0x3a4>
 80038f0:	4bbb      	ldr	r3, [pc, #748]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	4bba      	ldr	r3, [pc, #744]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	438a      	bics	r2, r1
 80038fa:	621a      	str	r2, [r3, #32]
 80038fc:	4bb8      	ldr	r3, [pc, #736]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	4bb7      	ldr	r3, [pc, #732]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003902:	2104      	movs	r1, #4
 8003904:	438a      	bics	r2, r1
 8003906:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7fe fa5c 	bl	8001dcc <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e009      	b.n	800392e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fa57 	bl	8001dcc <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	4aaf      	ldr	r2, [pc, #700]	; (8003be4 <HAL_RCC_OscConfig+0x680>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e19a      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4bac      	ldr	r3, [pc, #688]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	2202      	movs	r2, #2
 8003934:	4013      	ands	r3, r2
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x3b6>
 8003938:	e013      	b.n	8003962 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fe fa47 	bl	8001dcc <HAL_GetTick>
 800393e:	0003      	movs	r3, r0
 8003940:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	e009      	b.n	8003958 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fe fa42 	bl	8001dcc <HAL_GetTick>
 8003948:	0002      	movs	r2, r0
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	4aa5      	ldr	r2, [pc, #660]	; (8003be4 <HAL_RCC_OscConfig+0x680>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e185      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	4ba1      	ldr	r3, [pc, #644]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	2202      	movs	r2, #2
 800395e:	4013      	ands	r3, r2
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003962:	231f      	movs	r3, #31
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b9c      	ldr	r3, [pc, #624]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	4b9b      	ldr	r3, [pc, #620]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003972:	499d      	ldr	r1, [pc, #628]	; (8003be8 <HAL_RCC_OscConfig+0x684>)
 8003974:	400a      	ands	r2, r1
 8003976:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2210      	movs	r2, #16
 800397e:	4013      	ands	r3, r2
 8003980:	d063      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d12a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800398a:	4b95      	ldr	r3, [pc, #596]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 800398c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398e:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003990:	2104      	movs	r1, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003996:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399a:	4b91      	ldr	r3, [pc, #580]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 800399c:	2101      	movs	r1, #1
 800399e:	430a      	orrs	r2, r1
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fe fa13 	bl	8001dcc <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039ac:	f7fe fa0e 	bl	8001dcc <HAL_GetTick>
 80039b0:	0002      	movs	r2, r0
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e152      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	2202      	movs	r2, #2
 80039c4:	4013      	ands	r3, r2
 80039c6:	d0f1      	beq.n	80039ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039c8:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	22f8      	movs	r2, #248	; 0xf8
 80039ce:	4393      	bics	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	00da      	lsls	r2, r3, #3
 80039d8:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039da:	430a      	orrs	r2, r1
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34
 80039de:	e034      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	3305      	adds	r3, #5
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039e8:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ec:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039ee:	2104      	movs	r1, #4
 80039f0:	438a      	bics	r2, r1
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039f4:	4b7a      	ldr	r3, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	22f8      	movs	r2, #248	; 0xf8
 80039fa:	4393      	bics	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	00da      	lsls	r2, r3, #3
 8003a04:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a06:	430a      	orrs	r2, r1
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
 8003a0a:	e01e      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a0c:	4b74      	ldr	r3, [pc, #464]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a12:	2104      	movs	r1, #4
 8003a14:	430a      	orrs	r2, r1
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a18:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1c:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7fe f9d2 	bl	8001dcc <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a2e:	f7fe f9cd 	bl	8001dcc <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e111      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a40:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	2202      	movs	r2, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d1f1      	bne.n	8003a2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d05c      	beq.n	8003b0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a54:	4b62      	ldr	r3, [pc, #392]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	220c      	movs	r2, #12
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d00e      	beq.n	8003a7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a60:	4b5f      	ldr	r3, [pc, #380]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	220c      	movs	r2, #12
 8003a66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d114      	bne.n	8003a96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a6c:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	23c0      	movs	r3, #192	; 0xc0
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	401a      	ands	r2, r3
 8003a76:	23c0      	movs	r3, #192	; 0xc0
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a7e:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	4013      	ands	r3, r2
 8003a88:	d040      	beq.n	8003b0c <HAL_RCC_OscConfig+0x5a8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d03c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0e6      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a9e:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa2:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0249      	lsls	r1, r1, #9
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe f98e 	bl	8001dcc <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab6:	f7fe f989 	bl	8001dcc <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0cd      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ac8:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	025b      	lsls	r3, r3, #9
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x552>
 8003ad4:	e01b      	b.n	8003b0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003adc:	4943      	ldr	r1, [pc, #268]	; (8003bec <HAL_RCC_OscConfig+0x688>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fe f973 	bl	8001dcc <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aec:	f7fe f96e 	bl	8001dcc <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b2      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	025b      	lsls	r3, r3, #9
 8003b06:	4013      	ands	r3, r2
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x588>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b0c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d100      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5b4>
 8003b16:	e0a4      	b.n	8003c62 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d100      	bne.n	8003b26 <HAL_RCC_OscConfig+0x5c2>
 8003b24:	e078      	b.n	8003c18 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d14c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b34:	492e      	ldr	r1, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x68c>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f947 	bl	8001dcc <HAL_GetTick>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe f942 	bl	8001dcc <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e086      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	049b      	lsls	r3, r3, #18
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	220f      	movs	r2, #15
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b72:	430a      	orrs	r2, r1
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_RCC_OscConfig+0x690>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	0449      	lsls	r1, r1, #17
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f915 	bl	8001dcc <HAL_GetTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe f910 	bl	8001dcc <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e054      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	049b      	lsls	r3, r3, #18
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x644>
 8003bc6:	e04c      	b.n	8003c62 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_RCC_OscConfig+0x67c>)
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x68c>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f8fa 	bl	8001dcc <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x6a6>
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40021000 	.word	0x40021000
 8003be4:	00001388 	.word	0x00001388
 8003be8:	efffffff 	.word	0xefffffff
 8003bec:	fffeffff 	.word	0xfffeffff
 8003bf0:	feffffff 	.word	0xfeffffff
 8003bf4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe f8e8 	bl	8001dcc <HAL_GetTick>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e02c      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_RCC_OscConfig+0x708>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	049b      	lsls	r3, r3, #18
 8003c12:	4013      	ands	r3, r2
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x694>
 8003c16:	e024      	b.n	8003c62 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01f      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x708>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_RCC_OscConfig+0x708>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	025b      	lsls	r3, r3, #9
 8003c36:	401a      	ands	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	220f      	movs	r2, #15
 8003c44:	401a      	ands	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	23f0      	movs	r3, #240	; 0xf0
 8003c52:	039b      	lsls	r3, r3, #14
 8003c54:	401a      	ands	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b008      	add	sp, #32
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0bf      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d911      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	4393      	bics	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0a6      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d006      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003cd0:	21e0      	movs	r1, #224	; 0xe0
 8003cd2:	00c9      	lsls	r1, r1, #3
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	22f0      	movs	r2, #240	; 0xf0
 8003cde:	4393      	bics	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d04c      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	029b      	lsls	r3, r3, #10
 8003d06:	4013      	ands	r3, r2
 8003d08:	d120      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07a      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	049b      	lsls	r3, r3, #18
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d114      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06e      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	025b      	lsls	r3, r3, #9
 8003d36:	4013      	ands	r3, r2
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e062      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2202      	movs	r2, #2
 8003d44:	4013      	ands	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e05b      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4393      	bics	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe f834 	bl	8001dcc <HAL_GetTick>
 8003d64:	0003      	movs	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d68:	e009      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6a:	f7fe f82f 	bl	8001dcc <HAL_GetTick>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_RCC_ClockConfig+0x1a4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e042      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	220c      	movs	r2, #12
 8003d84:	401a      	ands	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1ec      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4013      	ands	r3, r2
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d211      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4393      	bics	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x19c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4013      	ands	r3, r2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e020      	b.n	8003e04 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <HAL_RCC_ClockConfig+0x1a8>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003de0:	f000 f820 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de4:	0001      	movs	r1, r0
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x1a0>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	220f      	movs	r2, #15
 8003dee:	4013      	ands	r3, r2
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1ac>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	000a      	movs	r2, r1
 8003df6:	40da      	lsrs	r2, r3
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	f7fd fce5 	bl	80017cc <HAL_InitTick>
  
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b004      	add	sp, #16
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	00001388 	.word	0x00001388
 8003e18:	fffff8ff 	.word	0xfffff8ff
 8003e1c:	0800cbec 	.word	0x0800cbec
 8003e20:	20000000 	.word	0x20000000

08003e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b08f      	sub	sp, #60	; 0x3c
 8003e28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e2a:	2314      	movs	r3, #20
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xec>)
 8003e30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e32:	c313      	stmia	r3!, {r0, r1, r4}
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	4a36      	ldr	r2, [pc, #216]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e3e:	c313      	stmia	r3!, {r0, r1, r4}
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e58:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	220c      	movs	r2, #12
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	d047      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xd4>
 8003e68:	d849      	bhi.n	8003efe <HAL_RCC_GetSysClockFreq+0xda>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x50>
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x56>
 8003e72:	e044      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e78:	e044      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	0c9b      	lsrs	r3, r3, #18
 8003e7e:	220f      	movs	r2, #15
 8003e80:	4013      	ands	r3, r2
 8003e82:	2214      	movs	r2, #20
 8003e84:	18ba      	adds	r2, r7, r2
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	220f      	movs	r2, #15
 8003e90:	4013      	ands	r3, r2
 8003e92:	1d3a      	adds	r2, r7, #4
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e9a:	23c0      	movs	r3, #192	; 0xc0
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eaa:	481c      	ldr	r0, [pc, #112]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eac:	f7fc f936 	bl	800011c <__udivsi3>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	4353      	muls	r3, r2
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	23c0      	movs	r3, #192	; 0xc0
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	23c0      	movs	r3, #192	; 0xc0
 8003ec6:	025b      	lsls	r3, r3, #9
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ece:	4814      	ldr	r0, [pc, #80]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ed0:	f7fc f924 	bl	800011c <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	4353      	muls	r3, r2
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee2:	480e      	ldr	r0, [pc, #56]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee4:	f7fc f91a 	bl	800011c <__udivsi3>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	001a      	movs	r2, r3
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	4353      	muls	r3, r2
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ef6:	e005      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003efc:	e002      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b00f      	add	sp, #60	; 0x3c
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	0800c294 	.word	0x0800c294
 8003f14:	0800c2a4 	.word	0x0800c2a4
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	02dc6c00 	.word	0x02dc6c00

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	20000000 	.word	0x20000000

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f3c:	f7ff fff2 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f40:	0001      	movs	r1, r0
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	2207      	movs	r2, #7
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	40d9      	lsrs	r1, r3
 8003f52:	000b      	movs	r3, r1
}    
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	0800cbfc 	.word	0x0800cbfc

08003f64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	22f0      	movs	r2, #240	; 0xf0
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	23e0      	movs	r3, #224	; 0xe0
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_GetClockConfig+0x50>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	601a      	str	r2, [r3, #0]
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40022000 	.word	0x40022000

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fd4:	e08e      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2017      	movs	r0, #23
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b6e      	ldr	r3, [pc, #440]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d110      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b6b      	ldr	r3, [pc, #428]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	0549      	lsls	r1, r1, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	61da      	str	r2, [r3, #28]
 8003ff8:	4b67      	ldr	r3, [pc, #412]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	183b      	adds	r3, r7, r0
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d11a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004018:	4b60      	ldr	r3, [pc, #384]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b5f      	ldr	r3, [pc, #380]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	0049      	lsls	r1, r1, #1
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fd fed1 	bl	8001dcc <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fd fecc 	bl	8001dcc <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e0a6      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4013      	ands	r3, r2
 800404c:	d0f0      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404e:	4b52      	ldr	r3, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	23c0      	movs	r3, #192	; 0xc0
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d034      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	23c0      	movs	r3, #192	; 0xc0
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4013      	ands	r3, r2
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	429a      	cmp	r2, r3
 800406e:	d02c      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004070:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4a4a      	ldr	r2, [pc, #296]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0249      	lsls	r1, r1, #9
 8004084:	430a      	orrs	r2, r1
 8004086:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004088:	4b43      	ldr	r3, [pc, #268]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800408e:	4945      	ldr	r1, [pc, #276]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004090:	400a      	ands	r2, r1
 8004092:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd fe93 	bl	8001dcc <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	e009      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fd fe8e 	bl	8001dcc <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	4a3c      	ldr	r2, [pc, #240]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e067      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b35      	ldr	r3, [pc, #212]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	2202      	movs	r2, #2
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	4b33      	ldr	r3, [pc, #204]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a34      	ldr	r2, [pc, #208]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040da:	430a      	orrs	r2, r1
 80040dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040de:	2317      	movs	r3, #23
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040ee:	492f      	ldr	r1, [pc, #188]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	2203      	movs	r2, #3
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800410e:	430a      	orrs	r2, r1
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004122:	4013      	ands	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800412c:	430a      	orrs	r2, r1
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2220      	movs	r2, #32
 8004136:	4013      	ands	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	2210      	movs	r2, #16
 8004140:	4393      	bics	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800414a:	430a      	orrs	r2, r1
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	4013      	ands	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	4393      	bics	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800416a:	430a      	orrs	r2, r1
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4013      	ands	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	2240      	movs	r2, #64	; 0x40
 8004180:	4393      	bics	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800418a:	430a      	orrs	r2, r1
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b006      	add	sp, #24
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	fffffcff 	.word	0xfffffcff
 80041a4:	fffeffff 	.word	0xfffeffff
 80041a8:	00001388 	.word	0x00001388
 80041ac:	efffffff 	.word	0xefffffff
 80041b0:	fffcffff 	.word	0xfffcffff

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0a8      	b.n	8004318 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	2382      	movs	r3, #130	; 0x82
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d009      	beq.n	80041ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	61da      	str	r2, [r3, #28]
 80041e0:	e005      	b.n	80041ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	225d      	movs	r2, #93	; 0x5d
 80041f8:	5c9b      	ldrb	r3, [r3, r2]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	225c      	movs	r2, #92	; 0x5c
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	0018      	movs	r0, r3
 800420c:	f7fd f9e6 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	225d      	movs	r2, #93	; 0x5d
 8004214:	2102      	movs	r1, #2
 8004216:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	438a      	bics	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	23e0      	movs	r3, #224	; 0xe0
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e002      	b.n	8004240 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	015b      	lsls	r3, r3, #5
 800423e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	23f0      	movs	r3, #240	; 0xf0
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	429a      	cmp	r2, r3
 800424a:	d008      	beq.n	800425e <HAL_SPI_Init+0xaa>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	23e0      	movs	r3, #224	; 0xe0
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	429a      	cmp	r2, r3
 8004256:	d002      	beq.n	800425e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	2382      	movs	r3, #130	; 0x82
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	401a      	ands	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	2384      	movs	r3, #132	; 0x84
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	400b      	ands	r3, r1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2102      	movs	r1, #2
 800427a:	400b      	ands	r3, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2101      	movs	r1, #1
 8004284:	400b      	ands	r3, r1
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6999      	ldr	r1, [r3, #24]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	400b      	ands	r3, r1
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2138      	movs	r1, #56	; 0x38
 800429a:	400b      	ands	r3, r1
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	400b      	ands	r3, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	0011      	movs	r1, r2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	401a      	ands	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	2204      	movs	r2, #4
 80042c4:	401a      	ands	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2110      	movs	r1, #16
 80042cc:	400b      	ands	r3, r1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	2108      	movs	r1, #8
 80042d6:	400b      	ands	r3, r1
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	23f0      	movs	r3, #240	; 0xf0
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	400b      	ands	r3, r1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	0011      	movs	r1, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	015b      	lsls	r3, r3, #5
 80042ee:	401a      	ands	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4907      	ldr	r1, [pc, #28]	; (8004320 <HAL_SPI_Init+0x16c>)
 8004304:	400a      	ands	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	225d      	movs	r2, #93	; 0x5d
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fffff7ff 	.word	0xfffff7ff

08004324 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004334:	231f      	movs	r3, #31
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	225c      	movs	r2, #92	; 0x5c
 8004340:	5c9b      	ldrb	r3, [r3, r2]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_SPI_Transmit+0x26>
 8004346:	2302      	movs	r3, #2
 8004348:	e140      	b.n	80045cc <HAL_SPI_Transmit+0x2a8>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	225c      	movs	r2, #92	; 0x5c
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004352:	f7fd fd3b 	bl	8001dcc <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800435a:	2316      	movs	r3, #22
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	1dba      	adds	r2, r7, #6
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	225d      	movs	r2, #93	; 0x5d
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d004      	beq.n	800437a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004370:	231f      	movs	r3, #31
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
    goto error;
 8004378:	e11d      	b.n	80045b6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_SPI_Transmit+0x64>
 8004380:	1dbb      	adds	r3, r7, #6
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004388:	231f      	movs	r3, #31
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004390:	e111      	b.n	80045b6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	225d      	movs	r2, #93	; 0x5d
 8004396:	2103      	movs	r1, #3
 8004398:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1dba      	adds	r2, r7, #6
 80043aa:	8812      	ldrh	r2, [r2, #0]
 80043ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1dba      	adds	r2, r7, #6
 80043b2:	8812      	ldrh	r2, [r2, #0]
 80043b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2244      	movs	r2, #68	; 0x44
 80043c0:	2100      	movs	r1, #0
 80043c2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2246      	movs	r2, #70	; 0x46
 80043c8:	2100      	movs	r1, #0
 80043ca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d110      	bne.n	8004406 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	438a      	bics	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	01c9      	lsls	r1, r1, #7
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4013      	ands	r3, r2
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d007      	beq.n	8004424 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	23e0      	movs	r3, #224	; 0xe0
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	429a      	cmp	r2, r3
 800442e:	d94e      	bls.n	80044ce <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_SPI_Transmit+0x11e>
 8004438:	2316      	movs	r3, #22
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d13f      	bne.n	80044c2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004466:	e02c      	b.n	80044c2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d112      	bne.n	800449c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800449a:	e012      	b.n	80044c2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449c:	f7fd fc96 	bl	8001dcc <HAL_GetTick>
 80044a0:	0002      	movs	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d802      	bhi.n	80044b2 <HAL_SPI_Transmit+0x18e>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_SPI_Transmit+0x194>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80044b8:	231f      	movs	r3, #31
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2203      	movs	r2, #3
 80044be:	701a      	strb	r2, [r3, #0]
          goto error;
 80044c0:	e079      	b.n	80045b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1cd      	bne.n	8004468 <HAL_SPI_Transmit+0x144>
 80044cc:	e04f      	b.n	800456e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_SPI_Transmit+0x1bc>
 80044d6:	2316      	movs	r3, #22
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d141      	bne.n	8004564 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004506:	e02d      	b.n	8004564 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d113      	bne.n	800453e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800453c:	e012      	b.n	8004564 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453e:	f7fd fc45 	bl	8001dcc <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d802      	bhi.n	8004554 <HAL_SPI_Transmit+0x230>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_SPI_Transmit+0x236>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800455a:	231f      	movs	r3, #31
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2203      	movs	r2, #3
 8004560:	701a      	strb	r2, [r3, #0]
          goto error;
 8004562:	e028      	b.n	80045b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1cc      	bne.n	8004508 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f95d 	bl	8004834 <SPI_EndRxTxTransaction>
 800457a:	1e03      	subs	r3, r0, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80045aa:	231f      	movs	r3, #31
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e000      	b.n	80045b6 <HAL_SPI_Transmit+0x292>
  }

error:
 80045b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	225d      	movs	r2, #93	; 0x5d
 80045ba:	2101      	movs	r1, #1
 80045bc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	225c      	movs	r2, #92	; 0x5c
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80045c6:	231f      	movs	r3, #31
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b008      	add	sp, #32
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045e4:	f7fd fbf2 	bl	8001dcc <HAL_GetTick>
 80045e8:	0002      	movs	r2, r0
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045f4:	f7fd fbea 	bl	8001dcc <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045fc:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	015b      	lsls	r3, r3, #5
 8004602:	0d1b      	lsrs	r3, r3, #20
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	4353      	muls	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800460a:	e058      	b.n	80046be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	d055      	beq.n	80046be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004612:	f7fd fbdb 	bl	8001dcc <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	429a      	cmp	r2, r3
 8004620:	d902      	bls.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d142      	bne.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	21e0      	movs	r1, #224	; 0xe0
 8004634:	438a      	bics	r2, r1
 8004636:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	2382      	movs	r3, #130	; 0x82
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	429a      	cmp	r2, r3
 8004642:	d113      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	429a      	cmp	r2, r3
 800464e:	d005      	beq.n	800465c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	429a      	cmp	r2, r3
 800465a:	d107      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2140      	movs	r1, #64	; 0x40
 8004668:	438a      	bics	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	429a      	cmp	r2, r3
 8004676:	d110      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	491a      	ldr	r1, [pc, #104]	; (80046ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004684:	400a      	ands	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0189      	lsls	r1, r1, #6
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	225d      	movs	r2, #93	; 0x5d
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	225c      	movs	r2, #92	; 0x5c
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e017      	b.n	80046de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	425a      	negs	r2, r3
 80046ce:	4153      	adcs	r3, r2
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	001a      	movs	r2, r3
 80046d4:	1dfb      	adds	r3, r7, #7
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d197      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b008      	add	sp, #32
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	20000000 	.word	0x20000000
 80046ec:	ffffdfff 	.word	0xffffdfff

080046f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046fe:	2317      	movs	r3, #23
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004706:	f7fd fb61 	bl	8001dcc <HAL_GetTick>
 800470a:	0002      	movs	r2, r0
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	18d3      	adds	r3, r2, r3
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004716:	f7fd fb59 	bl	8001dcc <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	0013      	movs	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	189b      	adds	r3, r3, r2
 8004730:	00da      	lsls	r2, r3, #3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	0d1b      	lsrs	r3, r3, #20
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	4353      	muls	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800473c:	e068      	b.n	8004810 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	23c0      	movs	r3, #192	; 0xc0
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	429a      	cmp	r2, r3
 8004746:	d10a      	bne.n	800475e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	2117      	movs	r1, #23
 8004756:	187b      	adds	r3, r7, r1
 8004758:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800475a:	187b      	adds	r3, r7, r1
 800475c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	d055      	beq.n	8004810 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004764:	f7fd fb32 	bl	8001dcc <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	429a      	cmp	r2, r3
 8004772:	d902      	bls.n	800477a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d142      	bne.n	8004800 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	21e0      	movs	r1, #224	; 0xe0
 8004786:	438a      	bics	r2, r1
 8004788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	2382      	movs	r3, #130	; 0x82
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	d113      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0xce>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	429a      	cmp	r2, r3
 80047a0:	d005      	beq.n	80047ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d107      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	438a      	bics	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	019b      	lsls	r3, r3, #6
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d110      	bne.n	80047ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4916      	ldr	r1, [pc, #88]	; (8004830 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80047d6:	400a      	ands	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	0189      	lsls	r1, r1, #6
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	225d      	movs	r2, #93	; 0x5d
 80047f0:	2101      	movs	r1, #1
 80047f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	225c      	movs	r2, #92	; 0x5c
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e010      	b.n	8004822 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3b01      	subs	r3, #1
 800480e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d18e      	bne.n	800473e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b00a      	add	sp, #40	; 0x28
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	20000000 	.word	0x20000000
 8004830:	ffffdfff 	.word	0xffffdfff

08004834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	23c0      	movs	r3, #192	; 0xc0
 8004844:	0159      	lsls	r1, r3, #5
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	0013      	movs	r3, r2
 800484e:	2200      	movs	r2, #0
 8004850:	f7ff ff4e 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d007      	beq.n	8004868 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	2220      	movs	r2, #32
 800485e:	431a      	orrs	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e027      	b.n	80048b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	0013      	movs	r3, r2
 8004872:	2200      	movs	r2, #0
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	f7ff fead 	bl	80045d4 <SPI_WaitFlagStateUntilTimeout>
 800487a:	1e03      	subs	r3, r0, #0
 800487c:	d007      	beq.n	800488e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	2220      	movs	r2, #32
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e014      	b.n	80048b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	23c0      	movs	r3, #192	; 0xc0
 8004892:	00d9      	lsls	r1, r3, #3
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0013      	movs	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	f7ff ff27 	bl	80046f0 <SPI_WaitFifoStateUntilTimeout>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d007      	beq.n	80048b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2220      	movs	r2, #32
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e000      	b.n	80048b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e042      	b.n	8004958 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	223d      	movs	r2, #61	; 0x3d
 80048d6:	5c9b      	ldrb	r3, [r3, r2]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223c      	movs	r2, #60	; 0x3c
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 f839 	bl	8004960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223d      	movs	r2, #61	; 0x3d
 80048f2:	2102      	movs	r1, #2
 80048f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	0019      	movs	r1, r3
 8004900:	0010      	movs	r0, r2
 8004902:	f000 f9bd 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2246      	movs	r2, #70	; 0x46
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223e      	movs	r2, #62	; 0x3e
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	223f      	movs	r2, #63	; 0x3f
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2240      	movs	r2, #64	; 0x40
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2241      	movs	r2, #65	; 0x41
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2242      	movs	r2, #66	; 0x42
 8004932:	2101      	movs	r1, #1
 8004934:	5499      	strb	r1, [r3, r2]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2243      	movs	r2, #67	; 0x43
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2244      	movs	r2, #68	; 0x44
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2245      	movs	r2, #69	; 0x45
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	223d      	movs	r2, #61	; 0x3d
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	223d      	movs	r2, #61	; 0x3d
 800497c:	5c9b      	ldrb	r3, [r3, r2]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e03b      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223d      	movs	r2, #61	; 0x3d
 800498c:	2102      	movs	r1, #2
 800498e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_TIM_Base_Start_IT+0x98>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <HAL_TIM_Base_Start_IT+0x5a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	05db      	lsls	r3, r3, #23
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d009      	beq.n	80049ca <HAL_TIM_Base_Start_IT+0x5a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <HAL_TIM_Base_Start_IT+0x9c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_TIM_Base_Start_IT+0x5a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_TIM_Base_Start_IT+0xa0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2207      	movs	r2, #7
 80049d2:	4013      	ands	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d010      	beq.n	80049fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	e007      	b.n	80049fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2101      	movs	r1, #1
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40014000 	.word	0x40014000

08004a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d124      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2202      	movs	r2, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d11d      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4252      	negs	r2, r2
 8004a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f8fa 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e007      	b.n	8004a6e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f8ed 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 f8f9 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d125      	bne.n	8004ace <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d11e      	bne.n	8004ace <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2205      	movs	r2, #5
 8004a96:	4252      	negs	r2, r2
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	23c0      	movs	r3, #192	; 0xc0
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f8cd 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e007      	b.n	8004ac8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 f8c0 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f8cc 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d124      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d11d      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2209      	movs	r2, #9
 8004af0:	4252      	negs	r2, r2
 8004af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2204      	movs	r2, #4
 8004af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2203      	movs	r2, #3
 8004b02:	4013      	ands	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 f8a1 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004b0e:	e007      	b.n	8004b20 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f894 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f8a0 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d125      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d11e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2211      	movs	r2, #17
 8004b48:	4252      	negs	r2, r2
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	23c0      	movs	r3, #192	; 0xc0
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 f874 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e007      	b.n	8004b7a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f867 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f873 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2201      	movs	r2, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10f      	bne.n	8004bae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fc fc31 	bl	8001410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d10f      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d108      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2281      	movs	r2, #129	; 0x81
 8004bd0:	4252      	negs	r2, r2
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f8da 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2240      	movs	r2, #64	; 0x40
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d10f      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d108      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2241      	movs	r2, #65	; 0x41
 8004bfe:	4252      	negs	r2, r2
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 f833 	bl	8004c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2220      	movs	r2, #32
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d10f      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d108      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2221      	movs	r2, #33	; 0x21
 8004c2c:	4252      	negs	r2, r2
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f8a4 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d008      	beq.n	8004caa <TIM_Base_SetConfig+0x2a>
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	05db      	lsls	r3, r3, #23
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d003      	beq.n	8004caa <TIM_Base_SetConfig+0x2a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a30      	ldr	r2, [pc, #192]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2270      	movs	r2, #112	; 0x70
 8004cae:	4393      	bics	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	05db      	lsls	r3, r3, #23
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a24      	ldr	r2, [pc, #144]	; (8004d6c <TIM_Base_SetConfig+0xec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <TIM_Base_SetConfig+0xf0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <TIM_Base_SetConfig+0xf4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x76>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <TIM_Base_SetConfig+0xf8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <TIM_Base_SetConfig+0xfc>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	001a      	movs	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0xce>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <TIM_Base_SetConfig+0xf0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0xce>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <TIM_Base_SetConfig+0xf4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0xce>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <TIM_Base_SetConfig+0xf8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d103      	bne.n	8004d56 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	615a      	str	r2, [r3, #20]
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40002000 	.word	0x40002000
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800
 8004d7c:	fffffcff 	.word	0xfffffcff

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e044      	b.n	8004e3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2274      	movs	r2, #116	; 0x74
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fc fc57 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2224      	movs	r2, #36	; 0x24
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2101      	movs	r1, #1
 8004ddc:	438a      	bics	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	0018      	movs	r0, r3
 8004de4:	f000 f830 	bl	8004e48 <UART_SetConfig>
 8004de8:	0003      	movs	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e024      	b.n	8004e3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 f9ab 	bl	8005158 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_UART_Init+0xa4>)
 8004e0e:	400a      	ands	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	212a      	movs	r1, #42	; 0x2a
 8004e1e:	438a      	bics	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 fa43 	bl	80052c0 <UART_CheckIdleState>
 8004e3a:	0003      	movs	r3, r0
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	ffffb7ff 	.word	0xffffb7ff

08004e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e50:	231e      	movs	r3, #30
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4aaf      	ldr	r2, [pc, #700]	; (8005134 <UART_SetConfig+0x2ec>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4aaa      	ldr	r2, [pc, #680]	; (8005138 <UART_SetConfig+0x2f0>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4aa1      	ldr	r2, [pc, #644]	; (800513c <UART_SetConfig+0x2f4>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a9d      	ldr	r2, [pc, #628]	; (8005140 <UART_SetConfig+0x2f8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d127      	bne.n	8004f1e <UART_SetConfig+0xd6>
 8004ece:	4b9d      	ldr	r3, [pc, #628]	; (8005144 <UART_SetConfig+0x2fc>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d00d      	beq.n	8004ef6 <UART_SetConfig+0xae>
 8004eda:	d81b      	bhi.n	8004f14 <UART_SetConfig+0xcc>
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d014      	beq.n	8004f0a <UART_SetConfig+0xc2>
 8004ee0:	d818      	bhi.n	8004f14 <UART_SetConfig+0xcc>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <UART_SetConfig+0xa4>
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d00a      	beq.n	8004f00 <UART_SetConfig+0xb8>
 8004eea:	e013      	b.n	8004f14 <UART_SetConfig+0xcc>
 8004eec:	231f      	movs	r3, #31
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e065      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004ef6:	231f      	movs	r3, #31
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	2202      	movs	r2, #2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e060      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f00:	231f      	movs	r3, #31
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	2204      	movs	r2, #4
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e05b      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f0a:	231f      	movs	r3, #31
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2208      	movs	r2, #8
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e056      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f14:	231f      	movs	r3, #31
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2210      	movs	r2, #16
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e051      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a89      	ldr	r2, [pc, #548]	; (8005148 <UART_SetConfig+0x300>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d134      	bne.n	8004f92 <UART_SetConfig+0x14a>
 8004f28:	4b86      	ldr	r3, [pc, #536]	; (8005144 <UART_SetConfig+0x2fc>)
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2c:	23c0      	movs	r3, #192	; 0xc0
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	22c0      	movs	r2, #192	; 0xc0
 8004f34:	0292      	lsls	r2, r2, #10
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d017      	beq.n	8004f6a <UART_SetConfig+0x122>
 8004f3a:	22c0      	movs	r2, #192	; 0xc0
 8004f3c:	0292      	lsls	r2, r2, #10
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d822      	bhi.n	8004f88 <UART_SetConfig+0x140>
 8004f42:	2280      	movs	r2, #128	; 0x80
 8004f44:	0292      	lsls	r2, r2, #10
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d019      	beq.n	8004f7e <UART_SetConfig+0x136>
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	0292      	lsls	r2, r2, #10
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d81a      	bhi.n	8004f88 <UART_SetConfig+0x140>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <UART_SetConfig+0x118>
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	0252      	lsls	r2, r2, #9
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00a      	beq.n	8004f74 <UART_SetConfig+0x12c>
 8004f5e:	e013      	b.n	8004f88 <UART_SetConfig+0x140>
 8004f60:	231f      	movs	r3, #31
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e02b      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f6a:	231f      	movs	r3, #31
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2202      	movs	r2, #2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e026      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f74:	231f      	movs	r3, #31
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	2204      	movs	r2, #4
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e021      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f7e:	231f      	movs	r3, #31
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2208      	movs	r2, #8
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e01c      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f88:	231f      	movs	r3, #31
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e017      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a6d      	ldr	r2, [pc, #436]	; (800514c <UART_SetConfig+0x304>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d104      	bne.n	8004fa6 <UART_SetConfig+0x15e>
 8004f9c:	231f      	movs	r3, #31
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a69      	ldr	r2, [pc, #420]	; (8005150 <UART_SetConfig+0x308>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d104      	bne.n	8004fba <UART_SetConfig+0x172>
 8004fb0:	231f      	movs	r3, #31
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e003      	b.n	8004fc2 <UART_SetConfig+0x17a>
 8004fba:	231f      	movs	r3, #31
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d15d      	bne.n	800508a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004fce:	231f      	movs	r3, #31
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d015      	beq.n	8005004 <UART_SetConfig+0x1bc>
 8004fd8:	dc18      	bgt.n	800500c <UART_SetConfig+0x1c4>
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d00d      	beq.n	8004ffa <UART_SetConfig+0x1b2>
 8004fde:	dc15      	bgt.n	800500c <UART_SetConfig+0x1c4>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <UART_SetConfig+0x1a2>
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d005      	beq.n	8004ff4 <UART_SetConfig+0x1ac>
 8004fe8:	e010      	b.n	800500c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fea:	f7fe ffa5 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	61bb      	str	r3, [r7, #24]
        break;
 8004ff2:	e012      	b.n	800501a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff4:	4b57      	ldr	r3, [pc, #348]	; (8005154 <UART_SetConfig+0x30c>)
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e00f      	b.n	800501a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffa:	f7fe ff13 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8004ffe:	0003      	movs	r3, r0
 8005000:	61bb      	str	r3, [r7, #24]
        break;
 8005002:	e00a      	b.n	800501a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	61bb      	str	r3, [r7, #24]
        break;
 800500a:	e006      	b.n	800501a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005010:	231e      	movs	r3, #30
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
        break;
 8005018:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d100      	bne.n	8005022 <UART_SetConfig+0x1da>
 8005020:	e07b      	b.n	800511a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	005a      	lsls	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	18d2      	adds	r2, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0019      	movs	r1, r3
 8005034:	0010      	movs	r0, r2
 8005036:	f7fb f871 	bl	800011c <__udivsi3>
 800503a:	0003      	movs	r3, r0
 800503c:	b29b      	uxth	r3, r3
 800503e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b0f      	cmp	r3, #15
 8005044:	d91c      	bls.n	8005080 <UART_SetConfig+0x238>
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	429a      	cmp	r2, r3
 800504e:	d217      	bcs.n	8005080 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	b29a      	uxth	r2, r3
 8005054:	200e      	movs	r0, #14
 8005056:	183b      	adds	r3, r7, r0
 8005058:	210f      	movs	r1, #15
 800505a:	438a      	bics	r2, r1
 800505c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	2207      	movs	r2, #7
 8005066:	4013      	ands	r3, r2
 8005068:	b299      	uxth	r1, r3
 800506a:	183b      	adds	r3, r7, r0
 800506c:	183a      	adds	r2, r7, r0
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	183a      	adds	r2, r7, r0
 800507a:	8812      	ldrh	r2, [r2, #0]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	e04c      	b.n	800511a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005080:	231e      	movs	r3, #30
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e047      	b.n	800511a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508a:	231f      	movs	r3, #31
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d015      	beq.n	80050c0 <UART_SetConfig+0x278>
 8005094:	dc18      	bgt.n	80050c8 <UART_SetConfig+0x280>
 8005096:	2b04      	cmp	r3, #4
 8005098:	d00d      	beq.n	80050b6 <UART_SetConfig+0x26e>
 800509a:	dc15      	bgt.n	80050c8 <UART_SetConfig+0x280>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <UART_SetConfig+0x25e>
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d005      	beq.n	80050b0 <UART_SetConfig+0x268>
 80050a4:	e010      	b.n	80050c8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a6:	f7fe ff47 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 80050aa:	0003      	movs	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]
        break;
 80050ae:	e012      	b.n	80050d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <UART_SetConfig+0x30c>)
 80050b2:	61bb      	str	r3, [r7, #24]
        break;
 80050b4:	e00f      	b.n	80050d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe feb5 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 80050ba:	0003      	movs	r3, r0
 80050bc:	61bb      	str	r3, [r7, #24]
        break;
 80050be:	e00a      	b.n	80050d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	61bb      	str	r3, [r7, #24]
        break;
 80050c6:	e006      	b.n	80050d6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050cc:	231e      	movs	r3, #30
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
        break;
 80050d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	085a      	lsrs	r2, r3, #1
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	18d2      	adds	r2, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	0019      	movs	r1, r3
 80050ec:	0010      	movs	r0, r2
 80050ee:	f7fb f815 	bl	800011c <__udivsi3>
 80050f2:	0003      	movs	r3, r0
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0f      	cmp	r3, #15
 80050fc:	d909      	bls.n	8005112 <UART_SetConfig+0x2ca>
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	025b      	lsls	r3, r3, #9
 8005104:	429a      	cmp	r2, r3
 8005106:	d204      	bcs.n	8005112 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e003      	b.n	800511a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005112:	231e      	movs	r3, #30
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005126:	231e      	movs	r3, #30
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b008      	add	sp, #32
 8005132:	bd80      	pop	{r7, pc}
 8005134:	efff69f3 	.word	0xefff69f3
 8005138:	ffffcfff 	.word	0xffffcfff
 800513c:	fffff4ff 	.word	0xfffff4ff
 8005140:	40013800 	.word	0x40013800
 8005144:	40021000 	.word	0x40021000
 8005148:	40004400 	.word	0x40004400
 800514c:	40004800 	.word	0x40004800
 8005150:	40004c00 	.word	0x40004c00
 8005154:	007a1200 	.word	0x007a1200

08005158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2201      	movs	r2, #1
 8005166:	4013      	ands	r3, r2
 8005168:	d00b      	beq.n	8005182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a4a      	ldr	r2, [pc, #296]	; (800529c <UART_AdvFeatureConfig+0x144>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	d00b      	beq.n	80051a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4a43      	ldr	r2, [pc, #268]	; (80052a0 <UART_AdvFeatureConfig+0x148>)
 8005194:	4013      	ands	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2204      	movs	r2, #4
 80051aa:	4013      	ands	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <UART_AdvFeatureConfig+0x14c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2208      	movs	r2, #8
 80051cc:	4013      	ands	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <UART_AdvFeatureConfig+0x150>)
 80051d8:	4013      	ands	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2210      	movs	r2, #16
 80051ee:	4013      	ands	r3, r2
 80051f0:	d00b      	beq.n	800520a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <UART_AdvFeatureConfig+0x154>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2220      	movs	r2, #32
 8005210:	4013      	ands	r3, r2
 8005212:	d00b      	beq.n	800522c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <UART_AdvFeatureConfig+0x158>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	4013      	ands	r3, r2
 8005234:	d01d      	beq.n	8005272 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <UART_AdvFeatureConfig+0x15c>)
 800523e:	4013      	ands	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	035b      	lsls	r3, r3, #13
 8005256:	429a      	cmp	r2, r3
 8005258:	d10b      	bne.n	8005272 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <UART_AdvFeatureConfig+0x160>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	4013      	ands	r3, r2
 800527a:	d00b      	beq.n	8005294 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <UART_AdvFeatureConfig+0x164>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	b002      	add	sp, #8
 800529a:	bd80      	pop	{r7, pc}
 800529c:	fffdffff 	.word	0xfffdffff
 80052a0:	fffeffff 	.word	0xfffeffff
 80052a4:	fffbffff 	.word	0xfffbffff
 80052a8:	ffff7fff 	.word	0xffff7fff
 80052ac:	ffffefff 	.word	0xffffefff
 80052b0:	ffffdfff 	.word	0xffffdfff
 80052b4:	ffefffff 	.word	0xffefffff
 80052b8:	ff9fffff 	.word	0xff9fffff
 80052bc:	fff7ffff 	.word	0xfff7ffff

080052c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	2100      	movs	r1, #0
 80052ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d0:	f7fc fd7c 	bl	8001dcc <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2208      	movs	r2, #8
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d10c      	bne.n	8005300 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	0391      	lsls	r1, r2, #14
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <UART_CheckIdleState+0x8c>)
 80052f0:	9200      	str	r2, [sp, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f000 f82c 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d001      	beq.n	8005300 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e021      	b.n	8005344 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2204      	movs	r2, #4
 8005308:	4013      	ands	r3, r2
 800530a:	2b04      	cmp	r3, #4
 800530c:	d10c      	bne.n	8005328 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	03d1      	lsls	r1, r2, #15
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4a0d      	ldr	r2, [pc, #52]	; (800534c <UART_CheckIdleState+0x8c>)
 8005318:	9200      	str	r2, [sp, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	f000 f818 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8005320:	1e03      	subs	r3, r0, #0
 8005322:	d001      	beq.n	8005328 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e00d      	b.n	8005344 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2274      	movs	r2, #116	; 0x74
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	01ffffff 	.word	0x01ffffff

08005350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b094      	sub	sp, #80	; 0x50
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	e0a3      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005364:	3301      	adds	r3, #1
 8005366:	d100      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005368:	e09f      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fc fd2f 	bl	8001dcc <HAL_GetTick>
 800536e:	0002      	movs	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x30>
 800537a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800537c:	2b00      	cmp	r3, #0
 800537e:	d13d      	bne.n	80053fc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005388:	647b      	str	r3, [r7, #68]	; 0x44
 800538a:	2301      	movs	r3, #1
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	494c      	ldr	r1, [pc, #304]	; (80054d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b2:	f3ef 8310 	mrs	r3, PRIMASK
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	643b      	str	r3, [r7, #64]	; 0x40
 80053bc:	2301      	movs	r3, #1
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2101      	movs	r1, #1
 80053d4:	438a      	bics	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2274      	movs	r2, #116	; 0x74
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e067      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2204      	movs	r2, #4
 8005404:	4013      	ands	r3, r2
 8005406:	d050      	beq.n	80054aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	401a      	ands	r2, r3
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	429a      	cmp	r2, r3
 800541a:	d146      	bne.n	80054aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	613b      	str	r3, [r7, #16]
  return(result);
 800542c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4923      	ldr	r1, [pc, #140]	; (80054d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005448:	400a      	ands	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005458:	f3ef 8310 	mrs	r3, PRIMASK
 800545c:	61fb      	str	r3, [r7, #28]
  return(result);
 800545e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
 8005462:	2301      	movs	r3, #1
 8005464:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f383 8810 	msr	PRIMASK, r3
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	438a      	bics	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2280      	movs	r2, #128	; 0x80
 800549a:	2120      	movs	r1, #32
 800549c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2274      	movs	r2, #116	; 0x74
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e010      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	425a      	negs	r2, r3
 80054ba:	4153      	adcs	r3, r2
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	001a      	movs	r2, r3
 80054c0:	1dfb      	adds	r3, r7, #7
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d100      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80054c8:	e74b      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b014      	add	sp, #80	; 0x50
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	fffffe5f 	.word	0xfffffe5f

080054d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054e0:	4b09      	ldr	r3, [pc, #36]	; (8005508 <USB_DisableGlobalInt+0x30>)
 80054e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	5a9b      	ldrh	r3, [r3, r2]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	b292      	uxth	r2, r2
 80054f0:	43d2      	mvns	r2, r2
 80054f2:	b292      	uxth	r2, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	b299      	uxth	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	0000bf80 	.word	0x0000bf80

0800550c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800550c:	b084      	sub	sp, #16
 800550e:	b590      	push	{r4, r7, lr}
 8005510:	46c6      	mov	lr, r8
 8005512:	b500      	push	{lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	2004      	movs	r0, #4
 800551c:	2410      	movs	r4, #16
 800551e:	46a4      	mov	ip, r4
 8005520:	2408      	movs	r4, #8
 8005522:	46a0      	mov	r8, r4
 8005524:	44b8      	add	r8, r7
 8005526:	44c4      	add	ip, r8
 8005528:	4460      	add	r0, ip
 800552a:	6001      	str	r1, [r0, #0]
 800552c:	6042      	str	r2, [r0, #4]
 800552e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2240      	movs	r2, #64	; 0x40
 8005534:	2101      	movs	r1, #1
 8005536:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	2100      	movs	r1, #0
 800553e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2244      	movs	r2, #68	; 0x44
 8005544:	2100      	movs	r1, #0
 8005546:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2250      	movs	r2, #80	; 0x50
 800554c:	2100      	movs	r1, #0
 800554e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b002      	add	sp, #8
 8005558:	bc80      	pop	{r7}
 800555a:	46b8      	mov	r8, r7
 800555c:	bc90      	pop	{r4, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	b004      	add	sp, #16
 8005562:	4718      	bx	r3

08005564 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>:
namespace SolarGators {
namespace DataModules {

class DataModule {
public:
  DataModule(uint32_t can_id, uint16_t telem_id, uint32_t size, uint16_t instance_id = 0, bool is_ext_id = false, bool is_rtr = false):
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	801a      	strh	r2, [r3, #0]
    can_id_(can_id), telem_id_(telem_id), size_(size), instance_id_(instance_id), is_ext_id_(is_ext_id), is_rtr_(is_rtr)
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x80>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1dba      	adds	r2, r7, #6
 8005584:	8812      	ldrh	r2, [r2, #0]
 8005586:	811a      	strh	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	2318      	movs	r3, #24
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	8213      	strh	r3, [r2, #16]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	221c      	movs	r2, #28
 800559c:	18ba      	adds	r2, r7, r2
 800559e:	7812      	ldrb	r2, [r2, #0]
 80055a0:	749a      	strb	r2, [r3, #18]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	18ba      	adds	r2, r7, r2
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	74da      	strb	r2, [r3, #19]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x84>)
 80055b0:	669a      	str	r2, [r3, #104]	; 0x68
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3318      	adds	r3, #24
 80055bc:	001a      	movs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	671a      	str	r2, [r3, #112]	; 0x70
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2250      	movs	r2, #80	; 0x50
 80055c6:	675a      	str	r2, [r3, #116]	; 0x74
  {
    mutex_id_ = osMutexNew(&mutex_attributes_);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3368      	adds	r3, #104	; 0x68
 80055cc:	0018      	movs	r0, r3
 80055ce:	f002 fdd7 	bl	8008180 <osMutexNew>
 80055d2:	0002      	movs	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	615a      	str	r2, [r3, #20]
  };
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	0018      	movs	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	b004      	add	sp, #16
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	0800cc0c 	.word	0x0800cc0c
 80055e8:	0800c2b4 	.word	0x0800c2b4

080055ec <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
  virtual ~DataModule() {};
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	4a03      	ldr	r2, [pc, #12]	; (8005604 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x18>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bd80      	pop	{r7, pc}
 8005604:	0800cc0c 	.word	0x0800cc0c

08005608 <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	0018      	movs	r0, r3
 8005614:	f7ff ffea 	bl	80055ec <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2178      	movs	r1, #120	; 0x78
 800561c:	0018      	movs	r0, r3
 800561e:	f005 fdbd 	bl	800b19c <_ZdlPvj>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>:
#include <Mitsuba.hpp>

namespace SolarGators {
namespace DataModules {

MitsubaRequest::MitsubaRequest(uint32_t id):
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af04      	add	r7, sp, #16
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
    DataModule(id, Request_Size, true)
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	2300      	movs	r3, #0
 800563c:	9302      	str	r3, [sp, #8]
 800563e:	2300      	movs	r3, #0
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2301      	movs	r3, #1
 8005648:	2201      	movs	r2, #1
 800564a:	f7ff ff8b 	bl	8005564 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em+0x34>)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
{ }
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b002      	add	sp, #8
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	0800cc3c 	.word	0x0800cc3c

08005664 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>:

MitsubaRequest::~MitsubaRequest()
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	4a05      	ldr	r2, [pc, #20]	; (8005684 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev+0x20>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff ffb9 	bl	80055ec <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bd80      	pop	{r7, pc}
 8005684:	0800cc3c 	.word	0x0800cc3c

08005688 <_ZN11SolarGators11DataModules14MitsubaRequestD0Ev>:
MitsubaRequest::~MitsubaRequest()
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
{ }
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f7ff ffe6 	bl	8005664 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	217c      	movs	r1, #124	; 0x7c
 800569c:	0018      	movs	r0, r3
 800569e:	f005 fd7d 	bl	800b19c <_ZdlPvj>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>:
  requestFrame1 = false;
  requestFrame2 = false;
}

void MitsubaRequest::SetRequestAllFrames()
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  requestFrame0 = true;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2278      	movs	r2, #120	; 0x78
 80056b8:	2101      	movs	r1, #1
 80056ba:	5499      	strb	r1, [r3, r2]
  requestFrame1 = true;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2279      	movs	r2, #121	; 0x79
 80056c0:	2101      	movs	r1, #1
 80056c2:	5499      	strb	r1, [r3, r2]
  requestFrame2 = true;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	227a      	movs	r2, #122	; 0x7a
 80056c8:	2101      	movs	r1, #1
 80056ca:	5499      	strb	r1, [r3, r2]
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_ZNK11SolarGators11DataModules14MitsubaRequest11ToByteArrayEPh>:

void MitsubaRequest::ToByteArray(uint8_t* buff) const
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  buff[0] = 0;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame0) << 0;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	2178      	movs	r1, #120	; 0x78
 80056ec:	5c52      	ldrb	r2, [r2, r1]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame1) << 1;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	b25a      	sxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2179      	movs	r1, #121	; 0x79
 8005700:	5c5b      	ldrb	r3, [r3, r1]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	b25b      	sxtb	r3, r3
 8005706:	4313      	orrs	r3, r2
 8005708:	b25b      	sxtb	r3, r3
 800570a:	b2da      	uxtb	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame2) << 2;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b25a      	sxtb	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	217a      	movs	r1, #122	; 0x7a
 800571a:	5c5b      	ldrb	r3, [r3, r1]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	b25b      	sxtb	r3, r3
 8005720:	4313      	orrs	r3, r2
 8005722:	b25b      	sxtb	r3, r3
 8005724:	b2da      	uxtb	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	701a      	strb	r2, [r3, #0]
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b002      	add	sp, #8
 8005730:	bd80      	pop	{r7, pc}

08005732 <_ZN11SolarGators11DataModules14MitsubaRequest13FromByteArrayEPh>:
void MitsubaRequest::FromByteArray(uint8_t* buff)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  requestFrame0 = buff[0] & (1 << 0);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	001a      	movs	r2, r3
 8005742:	2301      	movs	r3, #1
 8005744:	4013      	ands	r3, r2
 8005746:	1e5a      	subs	r2, r3, #1
 8005748:	4193      	sbcs	r3, r2
 800574a:	b2d9      	uxtb	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2278      	movs	r2, #120	; 0x78
 8005750:	5499      	strb	r1, [r3, r2]
  requestFrame1 = buff[0] & (1 << 1);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	001a      	movs	r2, r3
 8005758:	2302      	movs	r3, #2
 800575a:	4013      	ands	r3, r2
 800575c:	1e5a      	subs	r2, r3, #1
 800575e:	4193      	sbcs	r3, r2
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2279      	movs	r2, #121	; 0x79
 8005766:	5499      	strb	r1, [r3, r2]
  requestFrame2 = buff[0] & (1 << 2);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	001a      	movs	r2, r3
 800576e:	2304      	movs	r3, #4
 8005770:	4013      	ands	r3, r2
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	4193      	sbcs	r3, r2
 8005776:	b2d9      	uxtb	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	227a      	movs	r2, #122	; 0x7a
 800577c:	5499      	strb	r1, [r3, r2]
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b002      	add	sp, #8
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>:

MitsubaRx0::MitsubaRx0(uint32_t can_id, uint16_t telem_id):
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af04      	add	r7, sp, #16
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	1dbb      	adds	r3, r7, #6
 8005794:	801a      	strh	r2, [r3, #0]
    DataModule(can_id, telem_id, Rx0_Size, true), battVoltage(0),battCurrent(0),
    battCurrentDir(false),motorCurrentPkAvg(0),FETtemp(0),
    motorRPM(0),PWMDuty(0),LeadAngle(0)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	2300      	movs	r3, #0
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	2301      	movs	r3, #1
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2308      	movs	r3, #8
 80057ac:	f7ff feda 	bl	8005564 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt+0x78>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2278      	movs	r2, #120	; 0x78
 80057ba:	2100      	movs	r1, #0
 80057bc:	5299      	strh	r1, [r3, r2]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	227a      	movs	r2, #122	; 0x7a
 80057c2:	2100      	movs	r1, #0
 80057c4:	5299      	strh	r1, [r3, r2]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	227c      	movs	r2, #124	; 0x7c
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	227e      	movs	r2, #126	; 0x7e
 80057d2:	2100      	movs	r1, #0
 80057d4:	5299      	strh	r1, [r3, r2]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2282      	movs	r2, #130	; 0x82
 80057e2:	2100      	movs	r1, #0
 80057e4:	5299      	strh	r1, [r3, r2]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2284      	movs	r2, #132	; 0x84
 80057ea:	2100      	movs	r1, #0
 80057ec:	5299      	strh	r1, [r3, r2]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2286      	movs	r2, #134	; 0x86
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]
{ }
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b004      	add	sp, #16
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	0800cc24 	.word	0x0800cc24

08005804 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>:

MitsubaRx0::~MitsubaRx0()
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	4a05      	ldr	r2, [pc, #20]	; (8005824 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev+0x20>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff fee9 	bl	80055ec <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}
 8005824:	0800cc24 	.word	0x0800cc24

08005828 <_ZN11SolarGators11DataModules10MitsubaRx0D0Ev>:
MitsubaRx0::~MitsubaRx0()
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
{ }
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f7ff ffe6 	bl	8005804 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2188      	movs	r1, #136	; 0x88
 800583c:	0018      	movs	r0, r3
 800583e:	f005 fcad 	bl	800b19c <_ZdlPvj>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b002      	add	sp, #8
 800584a:	bd80      	pop	{r7, pc}

0800584c <_ZNK11SolarGators11DataModules10MitsubaRx011ToByteArrayEPh>:
{
  return LeadAngle;
}
// Converter Functions
void MitsubaRx0::ToByteArray(uint8_t* buff) const
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]

  buff[0] = 0;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltage);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2178      	movs	r1, #120	; 0x78
 8005864:	5a5b      	ldrh	r3, [r3, r1]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4313      	orrs	r3, r2
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(battVoltage >> 8);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	7819      	ldrb	r1, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2278      	movs	r2, #120	; 0x78
 8005882:	5a9b      	ldrh	r3, [r3, r2]
 8005884:	121b      	asrs	r3, r3, #8
 8005886:	b2da      	uxtb	r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	430a      	orrs	r2, r1
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrent) << 2);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	7819      	ldrb	r1, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	227a      	movs	r2, #122	; 0x7a
 800589c:	5a9b      	ldrh	r3, [r3, r2]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	430a      	orrs	r2, r1
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	3302      	adds	r3, #2
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(battCurrent >> 6);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3302      	adds	r3, #2
 80058ba:	7819      	ldrb	r1, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	227a      	movs	r2, #122	; 0x7a
 80058c0:	5a9b      	ldrh	r3, [r3, r2]
 80058c2:	119b      	asrs	r3, r3, #6
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	3302      	adds	r3, #2
 80058ca:	430a      	orrs	r2, r1
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrentDir) << 3);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	3302      	adds	r3, #2
 80058d4:	7819      	ldrb	r1, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	227c      	movs	r2, #124	; 0x7c
 80058da:	5c9b      	ldrb	r3, [r3, r2]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	3302      	adds	r3, #2
 80058e4:	430a      	orrs	r2, r1
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(motorCurrentPkAvg << 4);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	3302      	adds	r3, #2
 80058ee:	7819      	ldrb	r1, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	227e      	movs	r2, #126	; 0x7e
 80058f4:	5a9b      	ldrh	r3, [r3, r2]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	3302      	adds	r3, #2
 8005900:	430a      	orrs	r2, r1
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	3303      	adds	r3, #3
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorCurrentPkAvg >> 4);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	3303      	adds	r3, #3
 8005912:	7819      	ldrb	r1, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	227e      	movs	r2, #126	; 0x7e
 8005918:	5a9b      	ldrh	r3, [r3, r2]
 800591a:	111b      	asrs	r3, r3, #4
 800591c:	b2da      	uxtb	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3303      	adds	r3, #3
 8005922:	430a      	orrs	r2, r1
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(static_cast<uint32_t>(FETtemp) << 6);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	3303      	adds	r3, #3
 800592c:	7819      	ldrb	r1, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	b2da      	uxtb	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	3303      	adds	r3, #3
 800593c:	430a      	orrs	r2, r1
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]


  uint32_t convMotorRPM = motorRPM * 1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2282      	movs	r2, #130	; 0x82
 8005946:	5a9b      	ldrh	r3, [r3, r2]
 8005948:	60fb      	str	r3, [r7, #12]
  buff[4] = 0;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	3304      	adds	r3, #4
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
  buff[4] |= static_cast<uint8_t>(FETtemp >> 2);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	3304      	adds	r3, #4
 8005956:	7819      	ldrb	r1, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	5c9b      	ldrb	r3, [r3, r2]
 800595e:	109b      	asrs	r3, r3, #2
 8005960:	b2da      	uxtb	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3304      	adds	r3, #4
 8005966:	430a      	orrs	r2, r1
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
  buff[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	3304      	adds	r3, #4
 8005970:	7819      	ldrb	r1, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	b2da      	uxtb	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3304      	adds	r3, #4
 800597e:	430a      	orrs	r2, r1
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]

  buff[5] = 0;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3305      	adds	r3, #5
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	3305      	adds	r3, #5
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	b2db      	uxtb	r3, r3
 8005998:	227f      	movs	r2, #127	; 0x7f
 800599a:	4013      	ands	r3, r2
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	3305      	adds	r3, #5
 80059a2:	430a      	orrs	r2, r1
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint8_t>(PWMDuty << 7));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	3305      	adds	r3, #5
 80059ac:	7819      	ldrb	r1, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2284      	movs	r2, #132	; 0x84
 80059b2:	5a9b      	ldrh	r3, [r3, r2]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	3305      	adds	r3, #5
 80059be:	430a      	orrs	r2, r1
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]

  buff[6] = 0;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	3306      	adds	r3, #6
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
  buff[6] |= static_cast<uint8_t>(PWMDuty >> 1);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	3306      	adds	r3, #6
 80059d0:	7819      	ldrb	r1, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2284      	movs	r2, #132	; 0x84
 80059d6:	5a9b      	ldrh	r3, [r3, r2]
 80059d8:	105b      	asrs	r3, r3, #1
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3306      	adds	r3, #6
 80059e0:	430a      	orrs	r2, r1
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

  buff[7] = 0;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	3307      	adds	r3, #7
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(PWMDuty >> 9);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3307      	adds	r3, #7
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2284      	movs	r2, #132	; 0x84
 80059f8:	5a9b      	ldrh	r3, [r3, r2]
 80059fa:	125b      	asrs	r3, r3, #9
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	3307      	adds	r3, #7
 8005a02:	430a      	orrs	r2, r1
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(static_cast<uint32_t>(LeadAngle) << 1);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	3307      	adds	r3, #7
 8005a0c:	7819      	ldrb	r1, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2286      	movs	r2, #134	; 0x86
 8005a12:	5c9b      	ldrb	r3, [r3, r2]
 8005a14:	18db      	adds	r3, r3, r3
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	3307      	adds	r3, #7
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b004      	add	sp, #16
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <_ZN11SolarGators11DataModules10MitsubaRx013FromByteArrayEPh>:

void MitsubaRx0::FromByteArray(uint8_t* buff)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  uint32_t preBattVoltage = (static_cast<uint32_t>(buff[1] & 3) << 8) | (buff[0]);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	23c0      	movs	r3, #192	; 0xc0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4013      	ands	r3, r2
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61fb      	str	r3, [r7, #28]
  battVoltage = static_cast<uint16_t>(preBattVoltage);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	b299      	uxth	r1, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2278      	movs	r2, #120	; 0x78
 8005a52:	5299      	strh	r1, [r3, r2]

  uint32_t preBattCurrent = (static_cast<uint32_t>(buff[2] & 7) << 6) | (buff[1] >> 2);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	3302      	adds	r3, #2
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	019a      	lsls	r2, r3, #6
 8005a5c:	23e0      	movs	r3, #224	; 0xe0
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	3201      	adds	r2, #1
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	1092      	asrs	r2, r2, #2
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
  battCurrent = static_cast<uint16_t>(preBattCurrent);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	b299      	uxth	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	227a      	movs	r2, #122	; 0x7a
 8005a76:	5299      	strh	r1, [r3, r2]

  battCurrentDir = static_cast<bool>(buff[2] & 8);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	3302      	adds	r3, #2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	001a      	movs	r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	4013      	ands	r3, r2
 8005a84:	1e5a      	subs	r2, r3, #1
 8005a86:	4193      	sbcs	r3, r2
 8005a88:	b2d9      	uxtb	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	227c      	movs	r2, #124	; 0x7c
 8005a8e:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorCurrent = static_cast<uint32_t>((buff[3] & 0x3F) << 4) | (buff[2] >> 4);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	3303      	adds	r3, #3
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	001a      	movs	r2, r3
 8005a9a:	23fc      	movs	r3, #252	; 0xfc
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	3202      	adds	r2, #2
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	1112      	asrs	r2, r2, #4
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	227e      	movs	r2, #126	; 0x7e
 8005ab4:	5299      	strh	r1, [r3, r2]

  uint32_t preFETtemp = static_cast<uint32_t>((buff[4] & 7) << 2) | (buff[3] >> 6);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	001a      	movs	r2, r3
 8005ac0:	231c      	movs	r3, #28
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	3203      	adds	r2, #3
 8005ac8:	7812      	ldrb	r2, [r2, #0]
 8005aca:	1192      	asrs	r2, r2, #6
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
  FETtemp = static_cast<uint8_t>(preFETtemp);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	b2d9      	uxtb	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorRPM = (static_cast<uint32_t>(buff[5] & 0x7F) << 5) | (buff[4] >> 3);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	3305      	adds	r3, #5
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	23fe      	movs	r3, #254	; 0xfe
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	3204      	adds	r2, #4
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	10d2      	asrs	r2, r2, #3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  motorRPM = static_cast<uint16_t>(preMotorRPM);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	b299      	uxth	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2282      	movs	r2, #130	; 0x82
 8005afc:	5299      	strh	r1, [r3, r2]

  uint32_t preDuty = (static_cast<uint32_t>(buff[7] & 1) << 9) | (buff[6] << 1) | (buff[5] >> 7);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3307      	adds	r3, #7
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	025a      	lsls	r2, r3, #9
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	3206      	adds	r2, #6
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	0052      	lsls	r2, r2, #1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	3205      	adds	r2, #5
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	11d2      	asrs	r2, r2, #7
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]
  PWMDuty = static_cast<uint16_t>(preDuty);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	b299      	uxth	r1, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2284      	movs	r2, #132	; 0x84
 8005b2a:	5299      	strh	r1, [r3, r2]

  LeadAngle = static_cast<uint8_t>((buff[7] >> 1));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	3307      	adds	r3, #7
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	105b      	asrs	r3, r3, #1
 8005b34:	b2d9      	uxtb	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2286      	movs	r2, #134	; 0x86
 8005b3a:	5499      	strb	r1, [r3, r2]
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b008      	add	sp, #32
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZN11SolarGators11DataModules8OrionBMSC1Em>:

#include "OrionBMS.hpp"

namespace SolarGators::DataModules
{
  OrionBMS::OrionBMS(uint32_t id):
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af04      	add	r7, sp, #16
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
      DataModule(id, 0, Size)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9302      	str	r3, [sp, #8]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2308      	movs	r3, #8
 8005b60:	2200      	movs	r2, #0
 8005b62:	f7ff fcff 	bl	8005564 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8005b66:	4a04      	ldr	r2, [pc, #16]	; (8005b78 <_ZN11SolarGators11DataModules8OrionBMSC1Em+0x34>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
  { }
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b002      	add	sp, #8
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	0800cc54 	.word	0x0800cc54

08005b7c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>:

  OrionBMS::~OrionBMS()
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	4a05      	ldr	r2, [pc, #20]	; (8005b9c <_ZN11SolarGators11DataModules8OrionBMSD1Ev+0x20>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff fd2d 	bl	80055ec <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  { }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	0800cc54 	.word	0x0800cc54

08005ba0 <_ZN11SolarGators11DataModules8OrionBMSD0Ev>:
  OrionBMS::~OrionBMS()
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  { }
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7ff ffe6 	bl	8005b7c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2188      	movs	r1, #136	; 0x88
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f005 faf1 	bl	800b19c <_ZdlPvj>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh>:
  {
    // TODO: Add this to BMS packet
    return 0;
  }
  void OrionBMS::ToByteArray(uint8_t* buff) const
  {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
    float convLowCellVoltage = lowCellVoltage * 10000;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd2:	4933      	ldr	r1, [pc, #204]	; (8005ca0 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 8005bd4:	1c18      	adds	r0, r3, #0
 8005bd6:	f7fa fd3b 	bl	8000650 <__aeabi_fmul>
 8005bda:	1c03      	adds	r3, r0, #0
 8005bdc:	617b      	str	r3, [r7, #20]
    float convHighCellVoltage = highCellVoltage * 10000;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be2:	492f      	ldr	r1, [pc, #188]	; (8005ca0 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 8005be4:	1c18      	adds	r0, r3, #0
 8005be6:	f7fa fd33 	bl	8000650 <__aeabi_fmul>
 8005bea:	1c03      	adds	r3, r0, #0
 8005bec:	613b      	str	r3, [r7, #16]
    float convAvgCellVoltage = avgCellVoltage * 10000;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	589b      	ldr	r3, [r3, r2]
 8005bf4:	492a      	ldr	r1, [pc, #168]	; (8005ca0 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 8005bf6:	1c18      	adds	r0, r3, #0
 8005bf8:	f7fa fd2a 	bl	8000650 <__aeabi_fmul>
 8005bfc:	1c03      	adds	r3, r0, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
    float convPackSummedVoltage = packSummedVoltage * 1000;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2284      	movs	r2, #132	; 0x84
 8005c04:	589b      	ldr	r3, [r3, r2]
 8005c06:	4927      	ldr	r1, [pc, #156]	; (8005ca4 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xe0>)
 8005c08:	1c18      	adds	r0, r3, #0
 8005c0a:	f7fa fd21 	bl	8000650 <__aeabi_fmul>
 8005c0e:	1c03      	adds	r3, r0, #0
 8005c10:	60bb      	str	r3, [r7, #8]

    buff[0] = static_cast<uint32_t>(convLowCellVoltage) & 0xFF;
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f7fa fbf8 	bl	8000408 <__aeabi_f2uiz>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	701a      	strb	r2, [r3, #0]
    buff[1] = (static_cast<uint32_t>(convLowCellVoltage) >> 8) & 0xFF;
 8005c20:	6978      	ldr	r0, [r7, #20]
 8005c22:	f7fa fbf1 	bl	8000408 <__aeabi_f2uiz>
 8005c26:	0003      	movs	r3, r0
 8005c28:	0a1a      	lsrs	r2, r3, #8
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
    buff[2] = static_cast<uint32_t>(convHighCellVoltage) & 0xFF;
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7fa fbe8 	bl	8000408 <__aeabi_f2uiz>
 8005c38:	0002      	movs	r2, r0
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
    buff[3] = (static_cast<uint32_t>(convHighCellVoltage) >> 8) & 0xFF;
 8005c42:	6938      	ldr	r0, [r7, #16]
 8005c44:	f7fa fbe0 	bl	8000408 <__aeabi_f2uiz>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	0a1a      	lsrs	r2, r3, #8
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	3303      	adds	r3, #3
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
    buff[4] = static_cast<uint32_t>(convAvgCellVoltage) & 0xFF;
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7fa fbd7 	bl	8000408 <__aeabi_f2uiz>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
    buff[5] = (static_cast<uint32_t>(convAvgCellVoltage) >> 8) & 0xFF;
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7fa fbcf 	bl	8000408 <__aeabi_f2uiz>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	0a1a      	lsrs	r2, r3, #8
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	3305      	adds	r3, #5
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
    buff[6] = static_cast<uint32_t>(convPackSummedVoltage) & 0xFF;
 8005c76:	68b8      	ldr	r0, [r7, #8]
 8005c78:	f7fa fbc6 	bl	8000408 <__aeabi_f2uiz>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	3306      	adds	r3, #6
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
    buff[7] = (static_cast<uint32_t>(convPackSummedVoltage) >> 8) & 0xFF;
 8005c86:	68b8      	ldr	r0, [r7, #8]
 8005c88:	f7fa fbbe 	bl	8000408 <__aeabi_f2uiz>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	0a1a      	lsrs	r2, r3, #8
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	3307      	adds	r3, #7
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
  }
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b006      	add	sp, #24
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	461c4000 	.word	0x461c4000
 8005ca4:	447a0000 	.word	0x447a0000

08005ca8 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh>:

  void OrionBMS::FromByteArray(uint8_t* buff)
  {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
    uint32_t preLCV = (static_cast<uint32_t>(buff[1]) << 8) | buff[0];
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    uint32_t preHCV = (static_cast<uint32_t>(buff[3]) << 8) | buff[2];
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	3202      	adds	r2, #2
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    uint32_t preACV = (static_cast<uint32_t>(buff[5]) << 8) | buff[4];
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	3305      	adds	r3, #5
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	3204      	adds	r2, #4
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
    uint32_t prePCV = (static_cast<uint32_t>(buff[7]) << 8) | buff[6];
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	3307      	adds	r3, #7
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	3206      	adds	r2, #6
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
    lowCellVoltage = static_cast<float>(preLCV)/10000;
 8005cf8:	6978      	ldr	r0, [r7, #20]
 8005cfa:	f7fa ffab 	bl	8000c54 <__aeabi_ui2f>
 8005cfe:	1c03      	adds	r3, r0, #0
 8005d00:	4918      	ldr	r1, [pc, #96]	; (8005d64 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8005d02:	1c18      	adds	r0, r3, #0
 8005d04:	f7fa fb98 	bl	8000438 <__aeabi_fdiv>
 8005d08:	1c03      	adds	r3, r0, #0
 8005d0a:	1c1a      	adds	r2, r3, #0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	679a      	str	r2, [r3, #120]	; 0x78
    highCellVoltage = static_cast<float>(preHCV)/10000;
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	f7fa ff9f 	bl	8000c54 <__aeabi_ui2f>
 8005d16:	1c03      	adds	r3, r0, #0
 8005d18:	4912      	ldr	r1, [pc, #72]	; (8005d64 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8005d1a:	1c18      	adds	r0, r3, #0
 8005d1c:	f7fa fb8c 	bl	8000438 <__aeabi_fdiv>
 8005d20:	1c03      	adds	r3, r0, #0
 8005d22:	1c1a      	adds	r2, r3, #0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	67da      	str	r2, [r3, #124]	; 0x7c
    avgCellVoltage = static_cast<float>(preACV)/10000;
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7fa ff93 	bl	8000c54 <__aeabi_ui2f>
 8005d2e:	1c03      	adds	r3, r0, #0
 8005d30:	490c      	ldr	r1, [pc, #48]	; (8005d64 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8005d32:	1c18      	adds	r0, r3, #0
 8005d34:	f7fa fb80 	bl	8000438 <__aeabi_fdiv>
 8005d38:	1c03      	adds	r3, r0, #0
 8005d3a:	1c19      	adds	r1, r3, #0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	5099      	str	r1, [r3, r2]
    //TODO: figure out whether this should be 1000 or 100
    packSummedVoltage = static_cast<float>(prePCV)/1000;
 8005d42:	68b8      	ldr	r0, [r7, #8]
 8005d44:	f7fa ff86 	bl	8000c54 <__aeabi_ui2f>
 8005d48:	1c03      	adds	r3, r0, #0
 8005d4a:	4907      	ldr	r1, [pc, #28]	; (8005d68 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xc0>)
 8005d4c:	1c18      	adds	r0, r3, #0
 8005d4e:	f7fa fb73 	bl	8000438 <__aeabi_fdiv>
 8005d52:	1c03      	adds	r3, r0, #0
 8005d54:	1c19      	adds	r1, r3, #0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2284      	movs	r2, #132	; 0x84
 8005d5a:	5099      	str	r1, [r3, r2]
  }
 8005d5c:	46c0      	nop			; (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b006      	add	sp, #24
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	461c4000 	.word	0x461c4000
 8005d68:	447a0000 	.word	0x447a0000

08005d6c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b002      	add	sp, #8
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZN3etl5ipool7releaseEPKv>:
    /// Release an object in the pool.
    /// If asserts or exceptions are enabled and the object does not belong to this
    /// pool then an etl::pool_object_not_in_pool is thrown.
    /// \param p_object A pointer to the object to be released.
    //*************************************************************************
    void release(const void* const p_object)
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
    {
      const uintptr_t p = uintptr_t(p_object);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
      release_item((char*)p);
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f875 	bl	8005e84 <_ZN3etl5ipool12release_itemEPc>
    }
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZN3etl5ipoolC1EPcmm>:
  protected:

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    ipool(char* p_buffer_, uint32_t item_size_, uint32_t max_size_)
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
      : p_buffer(p_buffer_),
      p_next(p_buffer_),
      items_allocated(0),
      items_initialised(0),
      Item_Size(item_size_),
      Max_Size(max_size_)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	605a      	str	r2, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60da      	str	r2, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	611a      	str	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	615a      	str	r2, [r3, #20]
    {
    }
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b004      	add	sp, #16
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <_ZN3etl5ipool13allocate_itemEv>:
  private:

    //*************************************************************************
    /// Allocate an item from the pool.
    //*************************************************************************
    char* allocate_item()
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
    {
      char* p_value = ETL_NULLPTR;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

      // Any free space left?
      if (items_allocated < Max_Size)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d233      	bcs.n	8005e60 <_ZN3etl5ipool13allocate_itemEv+0x80>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d215      	bcs.n	8005e30 <_ZN3etl5ipool13allocate_itemEv+0x50>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68d9      	ldr	r1, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	434b      	muls	r3, r1
 8005e12:	18d3      	adds	r3, r2, r3
 8005e14:	613b      	str	r3, [r7, #16]
          char* np = p + Item_Size;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	18d3      	adds	r3, r2, r3
 8005e1e:	60fb      	str	r3, [r7, #12]
          *reinterpret_cast<char**>(p) = np;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]
          ++items_initialised;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	617b      	str	r3, [r7, #20]

        ++items_allocated;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d205      	bcs.n	8005e58 <_ZN3etl5ipool13allocate_itemEv+0x78>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e00a      	b.n	8005e6e <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	e006      	b.n	8005e6e <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <_ZN3etl5ipool13allocate_itemEv+0x98>)
 8005e62:	4a06      	ldr	r2, [pc, #24]	; (8005e7c <_ZN3etl5ipool13allocate_itemEv+0x9c>)
 8005e64:	2172      	movs	r1, #114	; 0x72
 8005e66:	31ff      	adds	r1, #255	; 0xff
 8005e68:	4805      	ldr	r0, [pc, #20]	; (8005e80 <_ZN3etl5ipool13allocate_itemEv+0xa0>)
 8005e6a:	f005 f9b7 	bl	800b1dc <__assert_func>
      }

      return p_value;
 8005e6e:	697b      	ldr	r3, [r7, #20]
    }
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b006      	add	sp, #24
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	0800c2b8 	.word	0x0800c2b8
 8005e7c:	0800c2c0 	.word	0x0800c2c0
 8005e80:	0800c2e4 	.word	0x0800c2e4

08005e84 <_ZN3etl5ipool12release_itemEPc>:

    //*************************************************************************
    /// Release an item back to the pool.
    //*************************************************************************
    void release_item(char* p_value)
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
    {
      // Does it belong to us?
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0011      	movs	r1, r2
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 f829 	bl	8005eec <_ZNK3etl5ipool15is_item_in_poolEPKc>
 8005e9a:	1e03      	subs	r3, r0, #0
 8005e9c:	d106      	bne.n	8005eac <_ZN3etl5ipool12release_itemEPc+0x28>
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <_ZN3etl5ipool12release_itemEPc+0x5c>)
 8005ea0:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <_ZN3etl5ipool12release_itemEPc+0x60>)
 8005ea2:	217e      	movs	r1, #126	; 0x7e
 8005ea4:	31ff      	adds	r1, #255	; 0xff
 8005ea6:	4810      	ldr	r0, [pc, #64]	; (8005ee8 <_ZN3etl5ipool12release_itemEPc+0x64>)
 8005ea8:	f005 f998 	bl	800b1dc <__assert_func>

      if (p_next != ETL_NULLPTR)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <_ZN3etl5ipool12release_itemEPc+0x3c>
      {
        // Point it to the current free item.
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	001a      	movs	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <_ZN3etl5ipool12release_itemEPc+0x42>
      }
      else
      {
        // This is the only free item.
        *((uintptr_t*)p_value) = 0;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
      }

      p_next = p_value;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	605a      	str	r2, [r3, #4]

      --items_allocated;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	1e5a      	subs	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
    }
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b002      	add	sp, #8
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	0800c350 	.word	0x0800c350
 8005ee4:	0800c36c 	.word	0x0800c36c
 8005ee8:	0800c2e4 	.word	0x0800c2e4

08005eec <_ZNK3etl5ipool15is_item_in_poolEPKc>:

    //*************************************************************************
    /// Check if the item belongs to this pool.
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	60fb      	str	r3, [r7, #12]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db0b      	blt.n	8005f1e <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	4353      	muls	r3, r2
 8005f12:	001a      	movs	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	dc01      	bgt.n	8005f1e <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	e000      	b.n	8005f20 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x34>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	240b      	movs	r4, #11
 8005f22:	193b      	adds	r3, r7, r4
 8005f24:	701a      	strb	r2, [r3, #0]

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if defined(ETL_DEBUG)
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	0010      	movs	r0, r2
 8005f30:	f7fa f97a 	bl	8000228 <__aeabi_uidivmod>
 8005f34:	000b      	movs	r3, r1
 8005f36:	001a      	movs	r2, r3
 8005f38:	200a      	movs	r0, #10
 8005f3a:	183b      	adds	r3, r7, r0
 8005f3c:	4251      	negs	r1, r2
 8005f3e:	414a      	adcs	r2, r1
 8005f40:	701a      	strb	r2, [r3, #0]
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 8005f42:	193b      	adds	r3, r7, r4
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6c>
 8005f56:	2300      	movs	r3, #0
    }
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b005      	add	sp, #20
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <_ZN3etl5ipoolD1Ev>:
    virtual ~ipool()
    {
    }
#else
  protected:
    ~ipool()
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
    {
    }
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b002      	add	sp, #8
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <_ZNK3etl8map_base4fullEv>:
    }

    //*************************************************************************
    /// Checks to see if the map is full.
    //*************************************************************************
    bool full() const
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
    {
      return current_size == CAPACITY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	425a      	negs	r2, r3
 8005f86:	4153      	adcs	r3, r2
 8005f88:	b2db      	uxtb	r3, r3
    }
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b002      	add	sp, #8
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <_ZN3etl8map_base4Node12mark_as_leafEv>:
      }

      //***********************************************************************
      /// Marks the node as a leaf.
      //***********************************************************************
      void mark_as_leaf()
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
      {
        weight = uint_least8_t(kNeither);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	721a      	strb	r2, [r3, #8]
        dir = uint_least8_t(kNeither);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	725a      	strb	r2, [r3, #9]
        children[0] = ETL_NULLPTR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
        children[1] = ETL_NULLPTR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	605a      	str	r2, [r3, #4]
      }
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ZN3etl8map_baseC1Ej>:
    };

    //*************************************************************************
    /// The constructor that is called from derived classes.
    //*************************************************************************
    map_base(size_type max_size_)
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
      , root_node(ETL_NULLPTR)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]

    {
    }
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZN3etl8map_baseD1Ev>:

    //*************************************************************************
    /// Destructor
    //*************************************************************************
    ~map_base()
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    {
    }
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b002      	add	sp, #8
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>:

    //*************************************************************************
    /// Balance the critical node at the position provided as needed
    //*************************************************************************
    void balance_node(Node*& critical_node)
 8005ff2:	b590      	push	{r4, r7, lr}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
    {
      // Step 1: Update weights for all children of the critical node up to the
      // newly inserted node. This step is costly (in terms of traversing nodes
      // multiple times during insertion) but doesn't require as much recursion
      Node* weight_node = critical_node->children[critical_node->dir];
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	7a5b      	ldrb	r3, [r3, #9]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	589b      	ldr	r3, [r3, r2]
 800600a:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01e      	beq.n	8006050 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5e>
      {
        // Keep going until we reach a terminal node (dir == kNeither)
        if (uint_least8_t(kNeither) != weight_node->dir)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	7a5b      	ldrb	r3, [r3, #9]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d019      	beq.n	800604e <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5c>
        {
          // Does this insert balance the previous weight factor value?
          if (weight_node->weight == 1 - weight_node->dir)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	7a1b      	ldrb	r3, [r3, #8]
 800601e:	001a      	movs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	7a5b      	ldrb	r3, [r3, #9]
 8006024:	0019      	movs	r1, r3
 8006026:	2301      	movs	r3, #1
 8006028:	1a5b      	subs	r3, r3, r1
 800602a:	429a      	cmp	r2, r3
 800602c:	d103      	bne.n	8006036 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x44>
          {
            weight_node->weight = uint_least8_t(kNeither);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2202      	movs	r2, #2
 8006032:	721a      	strb	r2, [r3, #8]
 8006034:	e003      	b.n	800603e <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x4c>
          }
          else
          {
            weight_node->weight = weight_node->dir;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	7a5a      	ldrb	r2, [r3, #9]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	721a      	strb	r2, [r3, #8]
          }

          // Update weight factor node to point to next node
          weight_node = weight_node->children[weight_node->dir];
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7a5b      	ldrb	r3, [r3, #9]
 8006042:	001a      	movs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	0092      	lsls	r2, r2, #2
 8006048:	58d3      	ldr	r3, [r2, r3]
 800604a:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800604c:	e7de      	b.n	800600c <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x1a>
        }
        else
        {
          // Stop loop, terminal node found
          break;
 800604e:	46c0      	nop			; (mov r8, r8)
        }
      } // while(weight_node)

        // Step 2: Update weight for critical_node or rotate tree to balance node
      if (uint_least8_t(kNeither) == critical_node->weight)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	7a1b      	ldrb	r3, [r3, #8]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d106      	bne.n	8006068 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x76>
      {
        critical_node->weight = critical_node->dir;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	7a52      	ldrb	r2, [r2, #9]
 8006064:	721a      	strb	r2, [r3, #8]
        {
          rotate_3node(critical_node, critical_node->dir,
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
        }
      }
    }
 8006066:	e03a      	b.n	80060de <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
      else if (critical_node->dir != critical_node->weight)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	7a5a      	ldrb	r2, [r3, #9]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	7a1b      	ldrb	r3, [r3, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d004      	beq.n	8006082 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x90>
        critical_node->weight = uint_least8_t(kNeither);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2202      	movs	r2, #2
 800607e:	721a      	strb	r2, [r3, #8]
    }
 8006080:	e02d      	b.n	80060de <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
        if (critical_node->weight == critical_node->children[critical_node->dir]->dir)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	7a1a      	ldrb	r2, [r3, #8]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	7a5b      	ldrb	r3, [r3, #9]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	585b      	ldr	r3, [r3, r1]
 8006096:	7a5b      	ldrb	r3, [r3, #9]
 8006098:	429a      	cmp	r2, r3
 800609a:	d108      	bne.n	80060ae <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xbc>
          rotate_2node(critical_node, critical_node->dir);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	7a5a      	ldrb	r2, [r3, #9]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f000 f81d 	bl	80060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
    }
 80060ac:	e017      	b.n	80060de <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
          rotate_3node(critical_node, critical_node->dir,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	7a5c      	ldrb	r4, [r3, #9]
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	7a5b      	ldrb	r3, [r3, #9]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	589a      	ldr	r2, [r3, r2]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	7a5b      	ldrb	r3, [r3, #9]
 80060c8:	0019      	movs	r1, r3
 80060ca:	2301      	movs	r3, #1
 80060cc:	1a5b      	subs	r3, r3, r1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	589b      	ldr	r3, [r3, r2]
          rotate_3node(critical_node, critical_node->dir,
 80060d2:	7a5b      	ldrb	r3, [r3, #9]
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	0022      	movs	r2, r4
 80060da:	f000 f837 	bl	800614c <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
    }
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b005      	add	sp, #20
 80060e4:	bd90      	pop	{r4, r7, pc}

080060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>:

    //*************************************************************************
    /// Rotate two nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_2node(Node*& position, uint_least8_t dir)
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	1dfb      	adds	r3, r7, #7
 80060f2:	701a      	strb	r2, [r3, #0]
      // B (new position) becomes the root
      // A (position) takes ownership of E as its left child
      // B (new position) takes ownership of A as its right child

      // Capture new root
      Node* new_root = position->children[dir];
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	1dfa      	adds	r2, r7, #7
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	0092      	lsls	r2, r2, #2
 80060fe:	58d3      	ldr	r3, [r2, r3]
 8006100:	617b      	str	r3, [r7, #20]
      // Replace position's previous child with new root's other child
      position->children[dir] = new_root->children[1 - dir];
 8006102:	1dfb      	adds	r3, r7, #7
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2201      	movs	r2, #1
 8006108:	1ad0      	subs	r0, r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1dfa      	adds	r2, r7, #7
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	0080      	lsls	r0, r0, #2
 8006116:	5841      	ldr	r1, [r0, r1]
 8006118:	0092      	lsls	r2, r2, #2
 800611a:	50d1      	str	r1, [r2, r3]
      // New root now becomes parent of current position
      new_root->children[1 - dir] = position;
 800611c:	1dfb      	adds	r3, r7, #7
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6819      	ldr	r1, [r3, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	50d1      	str	r1, [r2, r3]
      // Clear weight factor from current position
      position->weight = uint_least8_t(kNeither);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2202      	movs	r2, #2
 8006134:	721a      	strb	r2, [r3, #8]
      // Newly detached right now becomes current position
      position = new_root;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	601a      	str	r2, [r3, #0]
      // Clear weight factor from new root
      position->weight = uint_least8_t(kNeither);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2202      	movs	r2, #2
 8006142:	721a      	strb	r2, [r3, #8]
    }
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b006      	add	sp, #24
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>:

    //*************************************************************************
    /// Rotate three nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_3node(Node*& position, uint_least8_t dir, uint_least8_t third)
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	0019      	movs	r1, r3
 8006158:	1dfb      	adds	r3, r7, #7
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	1dbb      	adds	r3, r7, #6
 800615e:	1c0a      	adds	r2, r1, #0
 8006160:	701a      	strb	r2, [r3, #0]
      // D (new position) becomes the root
      // A (position) takes ownership of F as its right child
      // C takes ownership of G as its left child

      // Capture new root (either E or D depending on dir)
      Node* new_root = position->children[dir]->children[1 - dir];
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1dfa      	adds	r2, r7, #7
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	0092      	lsls	r2, r2, #2
 800616c:	58d3      	ldr	r3, [r2, r3]
 800616e:	1dfa      	adds	r2, r7, #7
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	2101      	movs	r1, #1
 8006174:	1a8a      	subs	r2, r1, r2
 8006176:	0092      	lsls	r2, r2, #2
 8006178:	58d3      	ldr	r3, [r2, r3]
 800617a:	617b      	str	r3, [r7, #20]
      // Set weight factor for B or C based on F or G existing and being a different than dir
      position->children[dir]->weight = third != uint_least8_t(kNeither) && third != dir ? dir : uint_least8_t(kNeither);
 800617c:	1dbb      	adds	r3, r7, #6
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d008      	beq.n	8006196 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 8006184:	1dba      	adds	r2, r7, #6
 8006186:	1dfb      	adds	r3, r7, #7
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d002      	beq.n	8006196 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 8006190:	1dfb      	adds	r3, r7, #7
 8006192:	7819      	ldrb	r1, [r3, #0]
 8006194:	e000      	b.n	8006198 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4c>
 8006196:	2102      	movs	r1, #2
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	1dfa      	adds	r2, r7, #7
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	0092      	lsls	r2, r2, #2
 80061a2:	58d3      	ldr	r3, [r2, r3]
 80061a4:	1c0a      	adds	r2, r1, #0
 80061a6:	721a      	strb	r2, [r3, #8]

      // Detach new root from its tree (replace with new roots child)
      position->children[dir]->children[1 - dir] =
        new_root->children[dir];
 80061a8:	1dfb      	adds	r3, r7, #7
 80061aa:	7818      	ldrb	r0, [r3, #0]
      position->children[dir]->children[1 - dir] =
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1dfa      	adds	r2, r7, #7
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	58d3      	ldr	r3, [r2, r3]
 80061b8:	1dfa      	adds	r2, r7, #7
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	2101      	movs	r1, #1
 80061be:	1a8a      	subs	r2, r1, r2
        new_root->children[dir];
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	0080      	lsls	r0, r0, #2
 80061c4:	5841      	ldr	r1, [r0, r1]
      position->children[dir]->children[1 - dir] =
 80061c6:	0092      	lsls	r2, r2, #2
 80061c8:	50d1      	str	r1, [r2, r3]
      // Attach current left tree to new root
      new_root->children[dir] = position->children[dir];
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	1dfa      	adds	r2, r7, #7
 80061d0:	7811      	ldrb	r1, [r2, #0]
 80061d2:	1dfa      	adds	r2, r7, #7
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	0089      	lsls	r1, r1, #2
 80061d8:	58c9      	ldr	r1, [r1, r3]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	50d1      	str	r1, [r2, r3]
      // Set weight factor for A based on F or G
      position->weight = third != uint_least8_t(kNeither) && third == dir ? 1 - dir : uint_least8_t(kNeither);
 80061e0:	1dbb      	adds	r3, r7, #6
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d00b      	beq.n	8006200 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 80061e8:	1dba      	adds	r2, r7, #6
 80061ea:	1dfb      	adds	r3, r7, #7
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d105      	bne.n	8006200 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 80061f4:	1dfb      	adds	r3, r7, #7
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	e000      	b.n	8006202 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb6>
 8006200:	2202      	movs	r2, #2
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	721a      	strb	r2, [r3, #8]

      // Move new root's right tree to current roots left tree
      position->children[dir] = new_root->children[1 - dir];
 8006208:	1dfb      	adds	r3, r7, #7
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	1ad0      	subs	r0, r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	1dfa      	adds	r2, r7, #7
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	0080      	lsls	r0, r0, #2
 800621c:	5841      	ldr	r1, [r0, r1]
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	50d1      	str	r1, [r2, r3]
      // Attach current root to new roots right tree
      new_root->children[1 - dir] = position;
 8006222:	1dfb      	adds	r3, r7, #7
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	1ad2      	subs	r2, r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6819      	ldr	r1, [r3, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	50d1      	str	r1, [r2, r3]
      // Replace current position with new root
      position = new_root;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	601a      	str	r2, [r3, #0]
      // Clear weight factor for new current position
      position->weight = uint_least8_t(kNeither);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2202      	movs	r2, #2
 8006240:	721a      	strb	r2, [r3, #8]
    }
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b006      	add	sp, #24
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>:

    //*************************************************************************
    /// Find the node whose key would go before all the other keys from the
    /// position provided
    //*************************************************************************
    Node* find_limit_node(Node* position, const int8_t dir) const
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	701a      	strb	r2, [r3, #0]
    {
      // Something at this position and in the direction specified? keep going
      Node* limit_node = position;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00f      	beq.n	8006282 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
 8006262:	1dfb      	adds	r3, r7, #7
 8006264:	2200      	movs	r2, #0
 8006266:	569a      	ldrsb	r2, [r3, r2]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	58d3      	ldr	r3, [r2, r3]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
      {
        limit_node = limit_node->children[dir];
 8006272:	1dfb      	adds	r3, r7, #7
 8006274:	2200      	movs	r2, #0
 8006276:	569a      	ldrsb	r2, [r3, r2]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0092      	lsls	r2, r2, #2
 800627c:	58d3      	ldr	r3, [r2, r3]
 800627e:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 8006280:	e7ec      	b.n	800625c <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x12>
      }

      // Return the limit node position found
      return limit_node;
 8006282:	697b      	ldr	r3, [r7, #20]
    }
 8006284:	0018      	movs	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	b006      	add	sp, #24
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>:
    }

    //*************************************************************************
    /// Attach the provided node to the position provided
    //*************************************************************************
    void attach_node(Node*& position, Node& node)
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
    {
      // Mark new node as leaf on attach to tree at position provided
      node.mark_as_leaf();
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	0018      	movs	r0, r3
 800629c:	f7ff fe79 	bl	8005f92 <_ZN3etl8map_base4Node12mark_as_leafEv>

      // Add the node here
      position = &node;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]

      // One more.
      ++current_size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]
    }
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b004      	add	sp, #16
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>:

    //*************************************************************************
    /// Detach the node at the position provided
    //*************************************************************************
    void detach_node(Node*& position, Node*& replacement)
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
    {
      // Make temporary copy of actual nodes involved because we might lose
      // their references in the process (e.g. position is the same as
      // replacement or replacement is a child of position)
      Node* detached = position;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	617b      	str	r3, [r7, #20]
      Node* swap = replacement;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]

      // Update current position to point to swap (replacement) node first
      position = swap;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	601a      	str	r2, [r3, #0]

      // Update replacement node to point to child in opposite direction
      // otherwise we might lose the other child of the swap node
      replacement = swap->children[1 - swap->dir];
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	7a5b      	ldrb	r3, [r3, #9]
 80062da:	001a      	movs	r2, r3
 80062dc:	2301      	movs	r3, #1
 80062de:	1a9a      	subs	r2, r3, r2
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	0092      	lsls	r2, r2, #2
 80062e4:	58d2      	ldr	r2, [r2, r3]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]

      // Point swap node to detached node's children and weight
      swap->children[kLeft] = detached->children[kLeft];
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	601a      	str	r2, [r3, #0]
      swap->children[kRight] = detached->children[kRight];
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	605a      	str	r2, [r3, #4]
      swap->weight = detached->weight;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	7a1a      	ldrb	r2, [r3, #8]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	721a      	strb	r2, [r3, #8]
    }
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	46bd      	mov	sp, r7
 8006306:	b006      	add	sp, #24
 8006308:	bd80      	pop	{r7, pc}

0800630a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <_ZNK3etl4lessItEclERKtS3_>:
  template <typename T = void>
  struct less : public etl::binary_function<T, T, bool>
  {
    typedef T value_type;

    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
    {
      return (lhs < rhs);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	881a      	ldrh	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	419b      	sbcs	r3, r3
 8006334:	425b      	negs	r3, r3
 8006336:	b2db      	uxtb	r3, r3
    }
 8006338:	0018      	movs	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	b004      	add	sp, #16
 800633e:	bd80      	pop	{r7, pc}

08006340 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef* hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x90>)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	0018      	movs	r0, r3
 8006358:	f000 f9da 	bl	8006710 <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEEC1Ev>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2194      	movs	r1, #148	; 0x94
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	505a      	str	r2, [r3, r1]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2198      	movs	r1, #152	; 0x98
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	505a      	str	r2, [r3, r1]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	23c0      	movs	r3, #192	; 0xc0
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	18d3      	adds	r3, r2, r3
 8006374:	2224      	movs	r2, #36	; 0x24
 8006376:	2100      	movs	r1, #0
 8006378:	0018      	movs	r0, r3
 800637a:	f004 ffa5 	bl	800b2c8 <memset>
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	23c0      	movs	r3, #192	; 0xc0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4913      	ldr	r1, [pc, #76]	; (80063d4 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x94>)
 8006386:	50d1      	str	r1, [r2, r3]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	22a9      	movs	r2, #169	; 0xa9
 800638c:	0092      	lsls	r2, r2, #2
 800638e:	1899      	adds	r1, r3, r2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	23c2      	movs	r3, #194	; 0xc2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	50d1      	str	r1, [r2, r3]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	23c3      	movs	r3, #195	; 0xc3
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	215c      	movs	r1, #92	; 0x5c
 80063a0:	50d1      	str	r1, [r2, r3]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	33a4      	adds	r3, #164	; 0xa4
 80063a6:	0019      	movs	r1, r3
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	23c4      	movs	r3, #196	; 0xc4
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	50d1      	str	r1, [r2, r3]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	23c5      	movs	r3, #197	; 0xc5
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	0089      	lsls	r1, r1, #2
 80063ba:	50d1      	str	r1, [r2, r3]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	23c6      	movs	r3, #198	; 0xc6
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	2130      	movs	r1, #48	; 0x30
 80063c4:	50d1      	str	r1, [r2, r3]
{

}
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b004      	add	sp, #16
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	0800cc6c 	.word	0x0800cc6c
 80063d4:	0800c7a4 	.word	0x0800c7a4

080063d8 <_ZN11SolarGators7Drivers9CANDriver4InitEv>:

void CANDriver::Init()
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08c      	sub	sp, #48	; 0x30
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  // Configure Filter
  //Initialize a hardware filter that passes everything
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 80063e0:	2108      	movs	r1, #8
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	2201      	movs	r2, #1
 80063e6:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   /*Mask mode*/
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	2200      	movs	r2, #0
 80063ec:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterMaskIdHigh = 0;
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;                  /*Accept everything*/
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	2200      	movs	r2, #0
 80063f8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  /*One 32-bit filter*/
 80063fa:	187b      	adds	r3, r7, r1
 80063fc:	2201      	movs	r2, #1
 80063fe:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;                       /*Init bank 0*/
 8006400:	187b      	adds	r3, r7, r1
 8006402:	2200      	movs	r2, #0
 8006404:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = 0;             /*Assign to FIFO 0*/
 8006406:	187b      	adds	r3, r7, r1
 8006408:	2200      	movs	r2, #0
 800640a:	611a      	str	r2, [r3, #16]
  HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2294      	movs	r2, #148	; 0x94
 8006410:	589b      	ldr	r3, [r3, r2]
 8006412:	187a      	adds	r2, r7, r1
 8006414:	0011      	movs	r1, r2
 8006416:	0018      	movs	r0, r3
 8006418:	f7fb fde0 	bl	8001fdc <HAL_CAN_ConfigFilter>

  can_rx_event_ = osEventFlagsNew(NULL);
 800641c:	2000      	movs	r0, #0
 800641e:	f001 fda5 	bl	8007f6c <osEventFlagsNew>
 8006422:	0002      	movs	r2, r0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	219c      	movs	r1, #156	; 0x9c
 8006428:	505a      	str	r2, [r3, r1]
  if (can_rx_event_ == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	229c      	movs	r2, #156	; 0x9c
 800642e:	589b      	ldr	r3, [r3, r2]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x60>
  {
      Error_Handler();
 8006434:	f7fa fffe 	bl	8001434 <Error_Handler>
  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	22c0      	movs	r2, #192	; 0xc0
 800643c:	0092      	lsls	r2, r2, #2
 800643e:	189a      	adds	r2, r3, r2
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0xac>)
 8006444:	0018      	movs	r0, r3
 8006446:	f001 fbe7 	bl	8007c18 <osThreadNew>
 800644a:	0002      	movs	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	21a0      	movs	r1, #160	; 0xa0
 8006450:	505a      	str	r2, [r3, r1]
  if (rx_task_handle_ == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	22a0      	movs	r2, #160	; 0xa0
 8006456:	589b      	ldr	r3, [r3, r2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x88>
  {
      Error_Handler();
 800645c:	f7fa ffea 	bl	8001434 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2294      	movs	r2, #148	; 0x94
 8006464:	589b      	ldr	r3, [r3, r2]
 8006466:	2102      	movs	r1, #2
 8006468:	0018      	movs	r0, r3
 800646a:	f7fc f94c 	bl	8002706 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(hcan_);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2294      	movs	r2, #148	; 0x94
 8006472:	589b      	ldr	r3, [r3, r2]
 8006474:	0018      	movs	r0, r3
 8006476:	f7fb fea3 	bl	80021c0 <HAL_CAN_Start>
}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b00c      	add	sp, #48	; 0x30
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	080064d9 	.word	0x080064d9

08006488 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	4a06      	ldr	r2, [pc, #24]	; (80064ac <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x24>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	0018      	movs	r0, r3
 800649c:	f000 f951 	bl	8006742 <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEED1Ev>
{ }
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b002      	add	sp, #8
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	0800cc6c 	.word	0x0800cc6c

080064b0 <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
{ }
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7ff ffe4 	bl	8006488 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 80064c0:	23c9      	movs	r3, #201	; 0xc9
 80064c2:	009a      	lsls	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	0011      	movs	r1, r2
 80064c8:	0018      	movs	r0, r3
 80064ca:	f004 fe67 	bl	800b19c <_ZdlPvj>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b093      	sub	sp, #76	; 0x4c
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  while(1)
  {
    osEventFlagsWait(can_rx_event_, 0x1, osFlagsWaitAny, osWaitForever);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	229c      	movs	r2, #156	; 0x9c
 80064e4:	5898      	ldr	r0, [r3, r2]
 80064e6:	2301      	movs	r3, #1
 80064e8:	425b      	negs	r3, r3
 80064ea:	2200      	movs	r2, #0
 80064ec:	2101      	movs	r1, #1
 80064ee:	f001 fdd9 	bl	80080a4 <osEventFlagsWait>
    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2294      	movs	r2, #148	; 0x94
 80064f6:	589a      	ldr	r2, [r3, r2]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2198      	movs	r1, #152	; 0x98
 80064fc:	585b      	ldr	r3, [r3, r1]
 80064fe:	0019      	movs	r1, r3
 8006500:	0010      	movs	r0, r2
 8006502:	f7fc f8d5 	bl	80026b0 <HAL_CAN_GetRxFifoFillLevel>
 8006506:	0003      	movs	r3, r0
 8006508:	1e5a      	subs	r2, r3, #1
 800650a:	4193      	sbcs	r3, r2
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d048      	beq.n	80065a4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0xcc>
    {
      HAL_CAN_GetRxMessage(hcan_, rx_fifo_num_, &pHeader, aData);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2294      	movs	r2, #148	; 0x94
 8006516:	5898      	ldr	r0, [r3, r2]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2298      	movs	r2, #152	; 0x98
 800651c:	5899      	ldr	r1, [r3, r2]
 800651e:	230c      	movs	r3, #12
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	241c      	movs	r4, #28
 8006524:	193a      	adds	r2, r7, r4
 8006526:	f7fb ffa7 	bl	8002478 <HAL_CAN_GetRxMessage>
      DataModules::DataModule* rx_module = (*modules_.find(pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId)).second;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	1d19      	adds	r1, r3, #4
 800652e:	0022      	movs	r2, r4
 8006530:	18bb      	adds	r3, r7, r2
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x68>
 8006538:	18bb      	adds	r3, r7, r2
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	e003      	b.n	8006548 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x70>
 8006540:	231c      	movs	r3, #28
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	b29b      	uxth	r3, r3
 8006548:	2042      	movs	r0, #66	; 0x42
 800654a:	183a      	adds	r2, r7, r0
 800654c:	8013      	strh	r3, [r2, #0]
 800654e:	2438      	movs	r4, #56	; 0x38
 8006550:	193b      	adds	r3, r7, r4
 8006552:	183a      	adds	r2, r7, r0
 8006554:	0018      	movs	r0, r3
 8006556:	f000 f90a 	bl	800676e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>
 800655a:	193b      	adds	r3, r7, r4
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f926 	bl	80067ae <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>
 8006562:	0003      	movs	r3, r0
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	647b      	str	r3, [r7, #68]	; 0x44
 8006568:	193b      	adds	r3, r7, r4
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f916 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      if(rx_module != nullptr)
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0bd      	beq.n	80064f2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1a>
      {
        osMutexAcquire(rx_module->mutex_id_, osWaitForever);
 8006576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	4252      	negs	r2, r2
 800657e:	0011      	movs	r1, r2
 8006580:	0018      	movs	r0, r3
 8006582:	f001 fe97 	bl	80082b4 <osMutexAcquire>
        rx_module->FromByteArray(aData);
 8006586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	220c      	movs	r2, #12
 8006590:	18b9      	adds	r1, r7, r2
 8006592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006594:	0010      	movs	r0, r2
 8006596:	4798      	blx	r3
        osMutexRelease(rx_module->mutex_id_);
 8006598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	0018      	movs	r0, r3
 800659e:	f001 fee5 	bl	800836c <osMutexRelease>
    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 80065a2:	e7a6      	b.n	80064f2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1a>
      }
    }
    HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2294      	movs	r2, #148	; 0x94
 80065a8:	589b      	ldr	r3, [r3, r2]
 80065aa:	2102      	movs	r1, #2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7fc f8aa 	bl	8002706 <HAL_CAN_ActivateNotification>
  }
 80065b2:	e795      	b.n	80064e0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

080065b4 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>:
}

void CANDriver::Send(SolarGators::DataModules::DataModule* data)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b08f      	sub	sp, #60	; 0x3c
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  //Spinlock until a tx mailbox is empty
  while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan_));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2294      	movs	r2, #148	; 0x94
 80065c2:	589b      	ldr	r3, [r3, r2]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7fb ff1f 	bl	8002408 <HAL_CAN_GetTxMailboxesFreeLevel>
 80065ca:	0003      	movs	r3, r0
 80065cc:	425a      	negs	r2, r3
 80065ce:	4153      	adcs	r3, r2
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d000      	beq.n	80065d8 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x24>
 80065d6:	e7f2      	b.n	80065be <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0xa>

  //Initialize Header
  uint32_t pTxMailbox;
  CAN_TxHeaderTypeDef pHeader;
  pHeader.RTR = CAN_RTR_DATA;
 80065d8:	211c      	movs	r1, #28
 80065da:	187b      	adds	r3, r7, r1
 80065dc:	2200      	movs	r2, #0
 80065de:	60da      	str	r2, [r3, #12]
  pHeader.DLC = data->size_;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	611a      	str	r2, [r3, #16]
  if(data->is_ext_id_)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	7c9b      	ldrb	r3, [r3, #18]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x4c>
  {
    pHeader.ExtId = data->can_id_;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	605a      	str	r2, [r3, #4]
    pHeader.IDE = CAN_ID_EXT;
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	2204      	movs	r2, #4
 80065fc:	609a      	str	r2, [r3, #8]
 80065fe:	e007      	b.n	8006610 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x5c>
  }
  else
  {
    pHeader.StdId = data->can_id_;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	211c      	movs	r1, #28
 8006606:	187b      	adds	r3, r7, r1
 8006608:	601a      	str	r2, [r3, #0]
    pHeader.IDE = CAN_ID_STD;
 800660a:	187b      	adds	r3, r7, r1
 800660c:	2200      	movs	r2, #0
 800660e:	609a      	str	r2, [r3, #8]
  }
  //Put CAN message in tx mailbox
  uint8_t aData[MAX_DATA_SIZE];
  osMutexAcquire(data->mutex_id_, osWaitForever);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2201      	movs	r2, #1
 8006616:	4252      	negs	r2, r2
 8006618:	0011      	movs	r1, r2
 800661a:	0018      	movs	r0, r3
 800661c:	f001 fe4a 	bl	80082b4 <osMutexAcquire>
  data->ToByteArray(aData);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	240c      	movs	r4, #12
 800662a:	1939      	adds	r1, r7, r4
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	0010      	movs	r0, r2
 8006630:	4798      	blx	r3
  osMutexRelease(data->mutex_id_);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	0018      	movs	r0, r3
 8006638:	f001 fe98 	bl	800836c <osMutexRelease>
  HAL_CAN_AddTxMessage(hcan_, &pHeader, aData, &pTxMailbox);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2294      	movs	r2, #148	; 0x94
 8006640:	5898      	ldr	r0, [r3, r2]
 8006642:	2334      	movs	r3, #52	; 0x34
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	193a      	adds	r2, r7, r4
 8006648:	211c      	movs	r1, #28
 800664a:	1879      	adds	r1, r7, r1
 800664c:	f7fb fdfe 	bl	800224c <HAL_CAN_AddTxMessage>
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b00f      	add	sp, #60	; 0x3c
 8006656:	bd90      	pop	{r4, r7, pc}

08006658 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 f89a 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	0018      	movs	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	b002      	add	sp, #8
 8006670:	bd80      	pop	{r7, pc}

08006672 <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 8006672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006674:	b08b      	sub	sp, #44	; 0x2c
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  modules_.insert(etl::make_pair(module->can_id_, module));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1d1c      	adds	r4, r3, #4
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	1d19      	adds	r1, r3, #4
 8006684:	2520      	movs	r5, #32
 8006686:	197b      	adds	r3, r7, r5
 8006688:	003a      	movs	r2, r7
 800668a:	0018      	movs	r0, r3
 800668c:	f000 f89e 	bl	80067cc <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>
 8006690:	2618      	movs	r6, #24
 8006692:	19bb      	adds	r3, r7, r6
 8006694:	197a      	adds	r2, r7, r5
 8006696:	0011      	movs	r1, r2
 8006698:	0018      	movs	r0, r3
 800669a:	f000 f8b7 	bl	800680c <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>
 800669e:	250c      	movs	r5, #12
 80066a0:	197b      	adds	r3, r7, r5
 80066a2:	19ba      	adds	r2, r7, r6
 80066a4:	0021      	movs	r1, r4
 80066a6:	0018      	movs	r0, r3
 80066a8:	f000 f8c8 	bl	800683c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>
 80066ac:	197b      	adds	r3, r7, r5
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7ff ffd2 	bl	8006658 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>
  // TODO: Check if successful insertion
  return true;
 80066b4:	2301      	movs	r3, #1
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b00b      	add	sp, #44	; 0x2c
 80066bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066be <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>:
  // TODO: Implement (Remove needs to be added to tree container)
  return false;
}

void CANDriver::SetRxFlag()
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  osEventFlagsSet(can_rx_event_, 0x1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	229c      	movs	r2, #156	; 0x9c
 80066ca:	589b      	ldr	r3, [r3, r2]
 80066cc:	2101      	movs	r1, #1
 80066ce:	0018      	movs	r0, r3
 80066d0:	f001 fc9a 	bl	8008008 <osEventFlagsSet>
}
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b002      	add	sp, #8
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN3etl12generic_poolILj20ELj4ELj5EED1Ev>:
  //*************************************************************************
  /// A templated abstract pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <const size_t VTypeSize, const size_t VAlignment, const size_t VSize>
  class generic_pool : public etl::ipool
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7ff fc3a 	bl	8005f60 <_ZN3etl5ipoolD1Ev>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b002      	add	sp, #8
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EED1Ev>:
  //*************************************************************************
  /// A templated pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <typename T, const size_t VSize>
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	0018      	movs	r0, r3
 8006702:	f7ff ffeb 	bl	80066dc <_ZN3etl12generic_poolILj20ELj4ELj5EED1Ev>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEEC1Ev>:
    static ETL_CONSTANT size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Default constructor.
    //*************************************************************************
    map()
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3314      	adds	r3, #20
 800671e:	2205      	movs	r2, #5
 8006720:	0019      	movs	r1, r3
 8006722:	f000 f8e5 	bl	80068f0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3314      	adds	r3, #20
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f901 	bl	8006932 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EEC1Ev>
    {
      this->initialise();
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	0018      	movs	r0, r3
 8006734:	f000 f90a 	bl	800694c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b002      	add	sp, #8
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~map()
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
    {
      this->initialise();
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f8fd 	bl	800694c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3314      	adds	r3, #20
 8006756:	0018      	movs	r0, r3
 8006758:	f7ff ffcd 	bl	80066f6 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EED1Ev>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	0018      	movs	r0, r3
 8006760:	f000 f8da 	bl	8006918 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0018      	movs	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	b002      	add	sp, #8
 800676c:	bd80      	pop	{r7, pc}

0800676e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>:
    iterator find(key_parameter_t key)
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
      return iterator(*this, find_node(root_node, key));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6899      	ldr	r1, [r3, #8]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	0018      	movs	r0, r3
 8006784:	f000 f94d 	bl	8006a22 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>
 8006788:	0002      	movs	r2, r0
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0018      	movs	r0, r3
 8006790:	f000 f976 	bl	8006a80 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	46bd      	mov	sp, r7
 8006798:	b004      	add	sp, #16
 800679a:	bd80      	pop	{r7, pc}

0800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>:
      ~iterator()
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
      }
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>:
      reference operator *() const
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	0018      	movs	r0, r3
 80067bc:	f000 f983 	bl	8006ac6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>
 80067c0:	0003      	movs	r3, r0
 80067c2:	330c      	adds	r3, #12
      }
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>:
  };

  //******************************************************************************
#if ETL_CPP11_SUPPORTED
  template <typename T1, typename T2>
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 80067cc:	b5b0      	push	{r4, r5, r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  {
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f97c 	bl	8006ad8 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 80067e0:	0004      	movs	r4, r0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f000 f980 	bl	8006aea <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 80067ea:	0002      	movs	r2, r0
 80067ec:	2510      	movs	r5, #16
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	0021      	movs	r1, r4
 80067f2:	0018      	movs	r0, r3
 80067f4:	f000 f982 	bl	8006afc <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>
 80067f8:	197a      	adds	r2, r7, r5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 f98d 	bl	8006b1e <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>
  }
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	46bd      	mov	sp, r7
 8006808:	b006      	add	sp, #24
 800680a:	bdb0      	pop	{r4, r5, r7, pc}

0800680c <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>:
    operator std::pair<U1, U2>()
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	2408      	movs	r4, #8
 8006820:	193b      	adds	r3, r7, r4
 8006822:	0018      	movs	r0, r3
 8006824:	f000 f995 	bl	8006b52 <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>
 8006828:	193a      	adds	r2, r7, r4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0011      	movs	r1, r2
 800682e:	0018      	movs	r0, r3
 8006830:	f000 f9b1 	bl	8006b96 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>
    }
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	46bd      	mov	sp, r7
 8006838:	b005      	add	sp, #20
 800683a:	bd90      	pop	{r4, r7, pc}

0800683c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 800683c:	b5b0      	push	{r4, r5, r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 8006848:	2300      	movs	r3, #0
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 800684c:	2317      	movs	r3, #23
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	0018      	movs	r0, r3
 8006858:	f7ff fb8b 	bl	8005f72 <_ZNK3etl8map_base4fullEv>
 800685c:	0003      	movs	r3, r0
 800685e:	001a      	movs	r2, r3
 8006860:	2301      	movs	r3, #1
 8006862:	4053      	eors	r3, r2
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0x3a>
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa4>)
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa8>)
 800686e:	491e      	ldr	r1, [pc, #120]	; (80068e8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xac>)
 8006870:	481e      	ldr	r0, [pc, #120]	; (80068ec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xb0>)
 8006872:	f004 fcb3 	bl	800b1dc <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f9a8 	bl	8006bce <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800687e:	0002      	movs	r2, r0
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f9ab 	bl	8006be0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>
 800688a:	0003      	movs	r3, r0
 800688c:	623b      	str	r3, [r7, #32]
      inserted_node = insert_node(root_node, node);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	3308      	adds	r3, #8
 8006892:	0019      	movs	r1, r3
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	0018      	movs	r0, r3
 800689a:	f000 f9c0 	bl	8006c1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>
 800689e:	0003      	movs	r3, r0
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	425a      	negs	r2, r3
 80068aa:	4153      	adcs	r3, r2
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	2517      	movs	r5, #23
 80068b0:	197b      	adds	r3, r7, r5
 80068b2:	701a      	strb	r2, [r3, #0]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	2418      	movs	r4, #24
 80068ba:	193b      	adds	r3, r7, r4
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 f8df 	bl	8006a80 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	197a      	adds	r2, r7, r5
 80068c6:	1939      	adds	r1, r7, r4
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 fa57 	bl	8006d7c <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>
 80068ce:	193b      	adds	r3, r7, r4
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7ff ff63 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 80068d6:	46c0      	nop			; (mov r8, r8)
    }
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	46bd      	mov	sp, r7
 80068dc:	b00a      	add	sp, #40	; 0x28
 80068de:	bdb0      	pop	{r4, r5, r7, pc}
 80068e0:	0800c7b4 	.word	0x0800c7b4
 80068e4:	0800c7c0 	.word	0x0800c7c0
 80068e8:	000004a7 	.word	0x000004a7
 80068ec:	0800c9f0 	.word	0x0800c9f0

080068f0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	0011      	movs	r1, r2
 8006902:	0018      	movs	r0, r3
 8006904:	f7ff fb59 	bl	8005fba <_ZN3etl8map_baseC1Ej>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	60da      	str	r2, [r3, #12]
    }
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	0018      	movs	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	b004      	add	sp, #16
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>:
    ~imap()
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
    }
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	0018      	movs	r0, r3
 8006924:	f7ff fb5c 	bl	8005fe0 <_ZN3etl8map_baseD1Ev>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b002      	add	sp, #8
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EEC1Ev>:
    using base_t::TYPE_SIZE;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    pool()
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
    {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f000 fa36 	bl	8006dae <_ZN3etl12generic_poolILj20ELj4ELj5EEC1Ev>
    }
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b002      	add	sp, #8
 800694a:	bd80      	pop	{r7, pc}

0800694c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>:
    void initialise()
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	b091      	sub	sp, #68	; 0x44
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 8006954:	2410      	movs	r4, #16
 8006956:	193b      	adds	r3, r7, r4
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	0011      	movs	r1, r2
 800695c:	0018      	movs	r0, r3
 800695e:	f000 fa37 	bl	8006dd0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>
 8006962:	193a      	adds	r2, r7, r4
 8006964:	2308      	movs	r3, #8
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	0011      	movs	r1, r2
 800696a:	0018      	movs	r0, r3
 800696c:	f000 fa46 	bl	8006dfc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 8006970:	193b      	adds	r3, r7, r4
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff ff12 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      while (item != end())
 8006978:	2520      	movs	r5, #32
 800697a:	197b      	adds	r3, r7, r5
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f000 fa68 	bl	8006e56 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>
 8006986:	197a      	adds	r2, r7, r5
 8006988:	2618      	movs	r6, #24
 800698a:	19bb      	adds	r3, r7, r6
 800698c:	0011      	movs	r1, r2
 800698e:	0018      	movs	r0, r3
 8006990:	f000 fa34 	bl	8006dfc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 8006994:	19ba      	adds	r2, r7, r6
 8006996:	2408      	movs	r4, #8
 8006998:	193b      	adds	r3, r7, r4
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f000 fa69 	bl	8006e74 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 80069a2:	0003      	movs	r3, r0
 80069a4:	001c      	movs	r4, r3
 80069a6:	19bb      	adds	r3, r7, r6
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fa39 	bl	8006e20 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 80069ae:	197b      	adds	r3, r7, r5
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7ff fef3 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	d02a      	beq.n	8006a10 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0xc4>
        item = erase(item);
 80069ba:	2408      	movs	r4, #8
 80069bc:	193a      	adds	r2, r7, r4
 80069be:	2538      	movs	r5, #56	; 0x38
 80069c0:	197b      	adds	r3, r7, r5
 80069c2:	0011      	movs	r1, r2
 80069c4:	0018      	movs	r0, r3
 80069c6:	f000 fa34 	bl	8006e32 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>
 80069ca:	2630      	movs	r6, #48	; 0x30
 80069cc:	19bb      	adds	r3, r7, r6
 80069ce:	197a      	adds	r2, r7, r5
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f000 fa62 	bl	8006e9c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>
 80069d8:	19ba      	adds	r2, r7, r6
 80069da:	2328      	movs	r3, #40	; 0x28
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	0011      	movs	r1, r2
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 fa0b 	bl	8006dfc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 80069e6:	2328      	movs	r3, #40	; 0x28
 80069e8:	18fa      	adds	r2, r7, r3
 80069ea:	193b      	adds	r3, r7, r4
 80069ec:	0011      	movs	r1, r2
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 fa83 	bl	8006efa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>
 80069f4:	2328      	movs	r3, #40	; 0x28
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fa11 	bl	8006e20 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 80069fe:	19bb      	adds	r3, r7, r6
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7ff fecb 	bl	800679c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 8006a06:	197b      	adds	r3, r7, r5
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 fa09 	bl	8006e20 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
      while (item != end())
 8006a0e:	e7b3      	b.n	8006978 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0x2c>
      const_iterator item = begin();
 8006a10:	2308      	movs	r3, #8
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 fa03 	bl	8006e20 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
    }
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b011      	add	sp, #68	; 0x44
 8006a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a22 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>:
    Node* find_node(Node* position, key_parameter_t key)
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
      Node* found = position;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	617b      	str	r3, [r7, #20]
      while (found)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01e      	beq.n	8006a76 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x54>
        Data_Node& found_data_node = imap::data_cast(*found);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 fa6f 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8006a40:	0003      	movs	r3, r0
 8006a42:	613b      	str	r3, [r7, #16]
        if (node_comp(key, found_data_node))
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 fa70 	bl	8006f30 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d003      	beq.n	8006a5c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x3a>
          found = found->children[kLeft];
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e7ea      	b.n	8006a32 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
        else if (node_comp(found_data_node, key))
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6939      	ldr	r1, [r7, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 fa79 	bl	8006f5a <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 8006a68:	1e03      	subs	r3, r0, #0
 8006a6a:	d003      	beq.n	8006a74 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x52>
          found = found->children[kRight];
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	617b      	str	r3, [r7, #20]
      while (found)
 8006a72:	e7de      	b.n	8006a32 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
          break;
 8006a74:	46c0      	nop			; (mov r8, r8)
      return found;
 8006a76:	697b      	ldr	r3, [r7, #20]
    }
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b006      	add	sp, #24
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
        , p_node(node)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	605a      	str	r2, [r3, #4]
      }
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b004      	add	sp, #16
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>:
      iterator(const iterator& other)
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]
      }
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	0018      	movs	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b002      	add	sp, #8
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>:
    static Data_Node* data_cast(Node* p_node)
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node*>(p_node);
 8006ace:	687b      	ldr	r3, [r7, #4]
    }
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b002      	add	sp, #8
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8006ae0:	687b      	ldr	r3, [r7, #4]
  }
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b002      	add	sp, #8
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8006af2:	687b      	ldr	r3, [r7, #4]
  }
 8006af4:	0018      	movs	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}

08006afc <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
      , second(b)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]
    }
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f7ff ffd3 	bl	8006ad8 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8006b32:	0002      	movs	r2, r0
      , second(etl::forward<U2>(other.second))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7ff ffd4 	bl	8006aea <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 8006b42:	0002      	movs	r2, r0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
    }
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b002      	add	sp, #8
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8006b52:	b590      	push	{r4, r7, lr}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fa0e 	bl	8006f82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b66:	0004      	movs	r4, r0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f000 fa12 	bl	8006f94 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006b70:	0002      	movs	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	0021      	movs	r1, r4
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 fa15 	bl	8006fa6 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>
    }
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b005      	add	sp, #20
 8006b82:	bd90      	pop	{r4, r7, pc}

08006b84 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff ffee 	bl	8006b84 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006ba8:	0003      	movs	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 fa0c 	bl	8006fd4 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b002      	add	sp, #8
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 8006bd6:	687b      	ldr	r3, [r7, #4]
  }
 8006bd8:	0018      	movs	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b002      	add	sp, #8
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 f9fb 	bl	8006fe8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>
 8006bf2:	0003      	movs	r3, r0
 8006bf4:	60fb      	str	r3, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7ff ffe8 	bl	8006bce <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 8006bfe:	0004      	movs	r4, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	330c      	adds	r3, #12
 8006c04:	0019      	movs	r1, r3
 8006c06:	2008      	movs	r0, #8
 8006c08:	f7ff f8b0 	bl	8005d6c <_ZnwjPv>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	0022      	movs	r2, r4
 8006c10:	ca03      	ldmia	r2!, {r0, r1}
 8006c12:	c303      	stmia	r3!, {r0, r1}
      return node;
 8006c14:	68fb      	ldr	r3, [r7, #12]
    }
 8006c16:	0018      	movs	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b005      	add	sp, #20
 8006c1c:	bd90      	pop	{r4, r7, pc}

08006c1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b088      	sub	sp, #32
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
      Node* found = position;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	61fb      	str	r3, [r7, #28]
      if (position)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d100      	bne.n	8006c3a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x1c>
 8006c38:	e092      	b.n	8006d60 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x142>
        Node* critical_parent_node = ETL_NULLPTR;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	617b      	str	r3, [r7, #20]
        while (found)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d05b      	beq.n	8006d02 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (kNeither != found->weight)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	7a1b      	ldrb	r3, [r3, #8]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d001      	beq.n	8006c56 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x38>
            critical_node = found;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f000 f960 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	613b      	str	r3, [r7, #16]
          if (node_comp(node, found_data_node))
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f9eb 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d003      	beq.n	8006c7a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x5c>
            found->dir = kLeft;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2200      	movs	r2, #0
 8006c76:	725a      	strb	r2, [r3, #9]
 8006c78:	e017      	b.n	8006caa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
          else if (node_comp(found_data_node, node))
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6939      	ldr	r1, [r7, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	0018      	movs	r0, r3
 8006c82:	f000 f9df 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d003      	beq.n	8006c92 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x74>
            found->dir = kRight;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	725a      	strb	r2, [r3, #9]
 8006c90:	e00b      	b.n	8006caa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
            found->dir = kNeither;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2202      	movs	r2, #2
 8006c96:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	0011      	movs	r1, r2
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 f9e4 	bl	8007070 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
            break;
 8006ca8:	e02b      	b.n	8006d02 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (found->children[found->dir])
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	7a5b      	ldrb	r3, [r3, #9]
 8006cae:	001a      	movs	r2, r3
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	0092      	lsls	r2, r2, #2
 8006cb4:	58d3      	ldr	r3, [r2, r3]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d012      	beq.n	8006ce0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xc2>
            if (kNeither != found->children[found->dir]->weight)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	7a5b      	ldrb	r3, [r3, #9]
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	0092      	lsls	r2, r2, #2
 8006cc4:	58d3      	ldr	r3, [r2, r3]
 8006cc6:	7a1b      	ldrb	r3, [r3, #8]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d001      	beq.n	8006cd0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xb2>
              critical_parent_node = found;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	7a5b      	ldrb	r3, [r3, #9]
 8006cd4:	001a      	movs	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	58d3      	ldr	r3, [r2, r3]
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	e7b1      	b.n	8006c44 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	7a5b      	ldrb	r3, [r3, #9]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	18d3      	adds	r3, r2, r3
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	0019      	movs	r1, r3
 8006cf0:	f7ff facc 	bl	800628c <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	7a5b      	ldrb	r3, [r3, #9]
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	58d3      	ldr	r3, [r2, r3]
 8006d00:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d034      	beq.n	8006d72 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10c      	bne.n	8006d28 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d107      	bne.n	8006d28 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
            balance_node(root_node);
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	0019      	movs	r1, r3
 8006d20:	0010      	movs	r0, r2
 8006d22:	f7ff f966 	bl	8005ff2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 8006d26:	e024      	b.n	8006d72 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d106      	bne.n	8006d46 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
            balance_node(position);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0011      	movs	r1, r2
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7ff f957 	bl	8005ff2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 8006d44:	e015      	b.n	8006d72 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
            if (critical_parent_node != ETL_NULLPTR)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	7a5b      	ldrb	r3, [r3, #9]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	18d3      	adds	r3, r2, r3
 8006d58:	0019      	movs	r1, r3
 8006d5a:	f7ff f94a 	bl	8005ff2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 8006d5e:	e008      	b.n	8006d72 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
        attach_node(position, node);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7ff fa90 	bl	800628c <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	61fb      	str	r3, [r7, #28]
      return found;
 8006d72:	69fb      	ldr	r3, [r7, #28]
    }
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b008      	add	sp, #32
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>:
    make_pair(_T1&& __x, _T2&& __y)
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 f980 	bl	8007090 <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 8006d90:	0004      	movs	r4, r0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7ff fab8 	bl	800630a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	0021      	movs	r1, r4
 8006da0:	0018      	movs	r0, r3
 8006da2:	f000 f97e 	bl	80070a2 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>
    }
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	46bd      	mov	sp, r7
 8006daa:	b005      	add	sp, #20
 8006dac:	bd90      	pop	{r4, r7, pc}

08006dae <_ZN3etl12generic_poolILj20ELj4ELj5EEC1Ev>:
    static ETL_CONSTANT size_t TYPE_SIZE = VTypeSize;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    generic_pool()
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3318      	adds	r3, #24
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	2305      	movs	r3, #5
 8006dc0:	2214      	movs	r2, #20
 8006dc2:	f7fe ffee 	bl	8005da2 <_ZN3etl5ipoolC1EPcmm>
    {
    }
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>:
    iterator begin()
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 8006dda:	6838      	ldr	r0, [r7, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2200      	movs	r2, #0
 8006de2:	0019      	movs	r1, r3
 8006de4:	f7ff fa31 	bl	800624a <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 8006de8:	0002      	movs	r2, r0
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7ff fe46 	bl	8006a80 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	605a      	str	r2, [r3, #4]
      }
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>:
      ~const_iterator()
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
      }
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b002      	add	sp, #8
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>:
      const_iterator(const const_iterator& other)
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]
      }
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0018      	movs	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b002      	add	sp, #8
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>:
    iterator end()
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	0011      	movs	r1, r2
 8006e66:	0018      	movs	r0, r3
 8006e68:	f000 f938 	bl	80070dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>
    }
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	0011      	movs	r1, r2
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f939 	bl	80070fc <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4053      	eors	r3, r2
 8006e92:	b2db      	uxtb	r3, r3
      }
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>:
    iterator erase(const_iterator position)
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	0019      	movs	r1, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f000 f939 	bl	800712c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	617b      	str	r3, [r7, #20]
      iterator next(*this, reference_node);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7ff fdda 	bl	8006a80 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
      ++next;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 f973 	bl	80071ba <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	001c      	movs	r4, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 f97d 	bl	80071dc <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	001a      	movs	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	0021      	movs	r1, r4
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f985 	bl	80071fa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>
      return next;
 8006ef0:	46c0      	nop			; (mov r8, r8)
    }
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b007      	add	sp, #28
 8006ef8:	bd90      	pop	{r4, r7, pc}

08006efa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>:
      const_iterator& operator =(const const_iterator& other)
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	605a      	str	r2, [r3, #4]
        return *this;
 8006f14:	687b      	ldr	r3, [r7, #4]
      }
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b002      	add	sp, #8
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 8006f26:	687b      	ldr	r3, [r7, #4]
    }
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b002      	add	sp, #8
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3310      	adds	r3, #16
 8006f40:	0018      	movs	r0, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	330c      	adds	r3, #12
 8006f46:	001a      	movs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	f7ff f9e6 	bl	800631c <_ZNK3etl4lessItEclERKtS3_>
 8006f50:	0003      	movs	r3, r0
    }
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b004      	add	sp, #16
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3310      	adds	r3, #16
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	0019      	movs	r1, r3
 8006f74:	f7ff f9d2 	bl	800631c <_ZNK3etl4lessItEclERKtS3_>
 8006f78:	0003      	movs	r3, r0
    }
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b004      	add	sp, #16
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff ffe9 	bl	8006f94 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	0018      	movs	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b004      	add	sp, #16
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b002      	add	sp, #8
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 8006ff0:	2008      	movs	r0, #8
 8006ff2:	183b      	adds	r3, r7, r0
 8006ff4:	4a12      	ldr	r2, [pc, #72]	; (8007040 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x58>)
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	183b      	adds	r3, r7, r0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
      return *(p_node_pool->*func)();
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	183b      	adds	r3, r7, r0
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	105b      	asrs	r3, r3, #1
 8007008:	18d1      	adds	r1, r2, r3
 800700a:	183b      	adds	r3, r7, r0
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	4013      	ands	r3, r2
 8007012:	d102      	bne.n	800701a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x32>
 8007014:	183b      	adds	r3, r7, r0
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	e00b      	b.n	8007032 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x4a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	2008      	movs	r0, #8
 8007020:	183b      	adds	r3, r7, r0
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	105b      	asrs	r3, r3, #1
 8007026:	18d3      	adds	r3, r2, r3
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	183b      	adds	r3, r7, r0
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	18d3      	adds	r3, r2, r3
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	0008      	movs	r0, r1
 8007034:	4798      	blx	r3
 8007036:	0003      	movs	r3, r0
    }
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bd80      	pop	{r7, pc}
 8007040:	0800754d 	.word	0x0800754d

08007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3310      	adds	r3, #16
 8007054:	0018      	movs	r0, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	330c      	adds	r3, #12
 800705a:	0019      	movs	r1, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	330c      	adds	r3, #12
 8007060:	001a      	movs	r2, r3
 8007062:	f7ff f95b 	bl	800631c <_ZNK3etl4lessItEclERKtS3_>
 8007066:	0003      	movs	r3, r0
    }
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b004      	add	sp, #16
 800706e:	bd80      	pop	{r7, pc}

08007070 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
      p_node_pool->release(&node);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	0011      	movs	r1, r2
 8007082:	0018      	movs	r0, r3
 8007084:	f7fe fe7c 	bl	8005d80 <_ZN3etl5ipool7releaseEPKv>
    }
 8007088:	46c0      	nop			; (mov r8, r8)
 800708a:	46bd      	mov	sp, r7
 800708c:	b002      	add	sp, #8
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	b002      	add	sp, #8
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80070a2:	b590      	push	{r4, r7, lr}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80070ae:	68fc      	ldr	r4, [r7, #12]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7ff ffec 	bl	8007090 <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 80070b8:	0003      	movs	r3, r0
 80070ba:	0019      	movs	r1, r3
 80070bc:	0020      	movs	r0, r4
 80070be:	f7ff fcf0 	bl	8006aa2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff f920 	bl	800630a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80070ca:	0003      	movs	r3, r0
 80070cc:	781a      	ldrb	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	721a      	strb	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	0018      	movs	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b005      	add	sp, #20
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>:
      iterator(imap& map)
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	605a      	str	r2, [r3, #4]
      }
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b002      	add	sp, #8
 80070fa:	bd80      	pop	{r7, pc}

080070fc <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d107      	bne.n	8007122 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d101      	bne.n	8007122 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x28>
 8007122:	2300      	movs	r3, #0
      }
 8007124:	0018      	movs	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	b002      	add	sp, #8
 800712a:	bd80      	pop	{r7, pc}

0800712c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>:
    Node*& find_node(Node*& position, const Node* node)
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
      Node* found = position;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	61fb      	str	r3, [r7, #28]
      while (found)
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d034      	beq.n	80071ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x82>
        if (found->children[kLeft] == node)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d101      	bne.n	8007152 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x26>
          return found->children[kLeft];
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	e02f      	b.n	80071b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
        else if (found->children[kRight] == node)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d102      	bne.n	8007162 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x36>
          return found->children[kRight];
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	3304      	adds	r3, #4
 8007160:	e027      	b.n	80071b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
          Data_Node& found_data_node = imap::data_cast(*found);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	0018      	movs	r0, r3
 8007166:	f7ff feda 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800716a:	0003      	movs	r3, r0
 800716c:	61bb      	str	r3, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 fa09 	bl	8007588 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 8007176:	0003      	movs	r3, r0
 8007178:	617b      	str	r3, [r7, #20]
          if (node_comp(data_node, found_data_node))
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	6979      	ldr	r1, [r7, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff ff5f 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 8007186:	1e03      	subs	r3, r0, #0
 8007188:	d003      	beq.n	8007192 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x66>
            found = found->children[kLeft];
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e7d5      	b.n	800713e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
          else if (node_comp(found_data_node, data_node))
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	0018      	movs	r0, r3
 800719a:	f7ff ff53 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800719e:	1e03      	subs	r3, r0, #0
 80071a0:	d003      	beq.n	80071aa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
            found = found->children[kRight];
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e7c9      	b.n	800713e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
            return position;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	e001      	b.n	80071b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
      return root_node;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3308      	adds	r3, #8
    }
 80071b2:	0018      	movs	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	b008      	add	sp, #32
 80071b8:	bd80      	pop	{r7, pc}

080071ba <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>:
      iterator& operator ++()
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3304      	adds	r3, #4
 80071ca:	0019      	movs	r1, r3
 80071cc:	0010      	movs	r0, r2
 80071ce:	f000 f9e4 	bl	800759a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 80071d2:	687b      	ldr	r3, [r7, #4]
      }
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}

080071dc <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>:
      const_reference operator *() const
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 fa11 	bl	8007610 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>
 80071ee:	0003      	movs	r3, r0
 80071f0:	330c      	adds	r3, #12
      }
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b002      	add	sp, #8
 80071f8:	bd80      	pop	{r7, pc}

080071fa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>:
    Node* remove_node(Node*& position, key_parameter_t key)
 80071fa:	b590      	push	{r4, r7, lr}
 80071fc:	b08f      	sub	sp, #60	; 0x3c
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 800720a:	2300      	movs	r3, #0
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 800720e:	2300      	movs	r3, #0
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 8007218:	2300      	movs	r3, #0
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	623b      	str	r3, [r7, #32]
      while (replace)
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d059      	beq.n	80072dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe2>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	0018      	movs	r0, r3
 800722c:	f7ff fe77 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8007230:	0003      	movs	r3, r0
 8007232:	61fb      	str	r3, [r7, #28]
        if (node_comp(key, replace_data_node))
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0018      	movs	r0, r3
 800723c:	f7ff fe78 	bl	8006f30 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 8007240:	1e03      	subs	r3, r0, #0
 8007242:	d003      	beq.n	800724c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x52>
          replace->dir = kLeft;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	2200      	movs	r2, #0
 8007248:	725a      	strb	r2, [r3, #9]
 800724a:	e017      	b.n	800727c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
        else if (node_comp(replace_data_node, key))
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff fe81 	bl	8006f5a <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 8007258:	1e03      	subs	r3, r0, #0
 800725a:	d003      	beq.n	8007264 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x6a>
          replace->dir = kRight;
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	2201      	movs	r2, #1
 8007260:	725a      	strb	r2, [r3, #9]
 8007262:	e00b      	b.n	800727c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	425a      	negs	r2, r3
 800726a:	4153      	adcs	r3, r2
 800726c:	b2db      	uxtb	r3, r3
 800726e:	001a      	movs	r2, r3
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	7a5b      	ldrb	r3, [r3, #9]
 8007280:	001a      	movs	r2, r3
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	0092      	lsls	r2, r2, #2
 8007286:	58d3      	ldr	r3, [r2, r3]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d026      	beq.n	80072da <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe0>
        if ((replace->weight == kNeither) ||
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	7a1b      	ldrb	r3, [r3, #8]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d014      	beq.n	80072be <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc4>
          (replace->weight == (1 - replace->dir) &&
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	7a1b      	ldrb	r3, [r3, #8]
 8007298:	001a      	movs	r2, r3
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	7a5b      	ldrb	r3, [r3, #9]
 800729e:	0019      	movs	r1, r3
 80072a0:	2301      	movs	r3, #1
 80072a2:	1a5b      	subs	r3, r3, r1
        if ((replace->weight == kNeither) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d10e      	bne.n	80072c6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
            replace->children[1 - replace->dir]->weight == kNeither))
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	7a5b      	ldrb	r3, [r3, #9]
 80072ac:	001a      	movs	r2, r3
 80072ae:	2301      	movs	r3, #1
 80072b0:	1a9a      	subs	r2, r3, r2
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	0092      	lsls	r2, r2, #2
 80072b6:	58d3      	ldr	r3, [r2, r3]
 80072b8:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d103      	bne.n	80072c6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
          balance_parent = replace_parent;
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	7a5b      	ldrb	r3, [r3, #9]
 80072ce:	001a      	movs	r2, r3
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	58d3      	ldr	r3, [r2, r3]
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 80072d8:	e7a3      	b.n	8007222 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x28>
          break;
 80072da:	46c0      	nop			; (mov r8, r8)
      if (found)
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d100      	bne.n	80072e4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
 80072e2:	e12e      	b.n	8007542 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x348>
        while (balance)
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d100      	bne.n	80072ec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xf2>
 80072ea:	e0ee      	b.n	80074ca <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2d0>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	7a5b      	ldrb	r3, [r3, #9]
 80072f0:	001a      	movs	r2, r3
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	0092      	lsls	r2, r2, #2
 80072f6:	58d3      	ldr	r3, [r2, r3]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d100      	bne.n	80072fe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x104>
 80072fc:	e0e4      	b.n	80074c8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ce>
          if (balance->weight == kNeither)
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	7a1b      	ldrb	r3, [r3, #8]
 8007302:	2b02      	cmp	r3, #2
 8007304:	d107      	bne.n	8007316 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x11c>
            balance->weight = 1 - balance->dir;
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	7a5b      	ldrb	r3, [r3, #9]
 800730a:	2201      	movs	r2, #1
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	721a      	strb	r2, [r3, #8]
 8007314:	e0ce      	b.n	80074b4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
          else if (balance->weight == balance->dir)
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	7a1a      	ldrb	r2, [r3, #8]
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	7a5b      	ldrb	r3, [r3, #9]
 800731e:	429a      	cmp	r2, r3
 8007320:	d103      	bne.n	800732a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x130>
            balance->weight = kNeither;
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	2202      	movs	r2, #2
 8007326:	721a      	strb	r2, [r3, #8]
 8007328:	e0c4      	b.n	80074b4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
            int weight = balance->children[1 - balance->dir]->weight;
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	7a5b      	ldrb	r3, [r3, #9]
 800732e:	001a      	movs	r2, r3
 8007330:	2301      	movs	r3, #1
 8007332:	1a9a      	subs	r2, r3, r2
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	0092      	lsls	r2, r2, #2
 8007338:	58d3      	ldr	r3, [r2, r3]
 800733a:	7a1b      	ldrb	r3, [r3, #8]
 800733c:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	7a5b      	ldrb	r3, [r3, #9]
 8007342:	001a      	movs	r2, r3
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	4293      	cmp	r3, r2
 8007348:	d138      	bne.n	80073bc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1c2>
              if (balance_parent == ETL_NULLPTR)
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d119      	bne.n	8007384 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x18a>
                rotate_3node(root_node, 1 - balance->dir,
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3308      	adds	r3, #8
 8007356:	0019      	movs	r1, r3
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	7a5b      	ldrb	r3, [r3, #9]
 800735c:	2201      	movs	r2, #1
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	7a5b      	ldrb	r3, [r3, #9]
 8007366:	001a      	movs	r2, r3
 8007368:	2301      	movs	r3, #1
 800736a:	1a9a      	subs	r2, r3, r2
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	0092      	lsls	r2, r2, #2
 8007370:	58d3      	ldr	r3, [r2, r3]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	7a52      	ldrb	r2, [r2, #9]
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(root_node, 1 - balance->dir,
 800737a:	7a1b      	ldrb	r3, [r3, #8]
 800737c:	0022      	movs	r2, r4
 800737e:	f7fe fee5 	bl	800614c <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 8007382:	e070      	b.n	8007466 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	7a5b      	ldrb	r3, [r3, #9]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	18d1      	adds	r1, r2, r3
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	7a5b      	ldrb	r3, [r3, #9]
 8007394:	2201      	movs	r2, #1
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	7a5b      	ldrb	r3, [r3, #9]
 800739e:	001a      	movs	r2, r3
 80073a0:	2301      	movs	r3, #1
 80073a2:	1a9a      	subs	r2, r3, r2
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	0092      	lsls	r2, r2, #2
 80073a8:	58d3      	ldr	r3, [r2, r3]
 80073aa:	6a3a      	ldr	r2, [r7, #32]
 80073ac:	7a52      	ldrb	r2, [r2, #9]
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 80073b2:	7a1b      	ldrb	r3, [r3, #8]
 80073b4:	0022      	movs	r2, r4
 80073b6:	f7fe fec9 	bl	800614c <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 80073ba:	e054      	b.n	8007466 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
            else if (weight == kNeither)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d133      	bne.n	800742a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x230>
              if (balance_parent == ETL_NULLPTR)
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d111      	bne.n	80073ec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1f2>
                rotate_2node(root_node, 1 - balance->dir);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3308      	adds	r3, #8
 80073ce:	0019      	movs	r1, r3
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	7a5b      	ldrb	r3, [r3, #9]
 80073d4:	2201      	movs	r2, #1
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	001a      	movs	r2, r3
 80073dc:	f7fe fe83 	bl	80060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	6a3a      	ldr	r2, [r7, #32]
 80073e6:	7a52      	ldrb	r2, [r2, #9]
 80073e8:	721a      	strb	r2, [r3, #8]
 80073ea:	e016      	b.n	800741a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x220>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	7a5b      	ldrb	r3, [r3, #9]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	18d1      	adds	r1, r2, r3
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	7a5b      	ldrb	r3, [r3, #9]
 80073fc:	2201      	movs	r2, #1
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	b2db      	uxtb	r3, r3
 8007402:	001a      	movs	r2, r3
 8007404:	f7fe fe6f 	bl	80060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	7a5b      	ldrb	r3, [r3, #9]
 800740c:	001a      	movs	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	58d3      	ldr	r3, [r2, r3]
 8007414:	6a3a      	ldr	r2, [r7, #32]
 8007416:	7a52      	ldrb	r2, [r2, #9]
 8007418:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	7a5b      	ldrb	r3, [r3, #9]
 800741e:	2201      	movs	r2, #1
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	721a      	strb	r2, [r3, #8]
 8007428:	e01d      	b.n	8007466 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
              if (balance_parent == ETL_NULLPTR)
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10c      	bne.n	800744a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x250>
                rotate_2node(root_node, 1 - balance->dir);
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3308      	adds	r3, #8
 8007436:	0019      	movs	r1, r3
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	7a5b      	ldrb	r3, [r3, #9]
 800743c:	2201      	movs	r2, #1
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	b2db      	uxtb	r3, r3
 8007442:	001a      	movs	r2, r3
 8007444:	f7fe fe4f 	bl	80060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 8007448:	e00d      	b.n	8007466 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	7a5b      	ldrb	r3, [r3, #9]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007454:	18d1      	adds	r1, r2, r3
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	7a5b      	ldrb	r3, [r3, #9]
 800745a:	2201      	movs	r2, #1
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	b2db      	uxtb	r3, r3
 8007460:	001a      	movs	r2, r3
 8007462:	f7fe fe40 	bl	80060e6 <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	429a      	cmp	r2, r3
 800746c:	d122      	bne.n	80074b4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
              if (balance_parent)
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x29e>
                found_parent = balance_parent->children[balance_parent->dir];
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	7a5b      	ldrb	r3, [r3, #9]
 8007478:	001a      	movs	r2, r3
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	58d3      	ldr	r3, [r2, r3]
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	1e5a      	subs	r2, r3, #1
 800748c:	4193      	sbcs	r3, r2
 800748e:	b2db      	uxtb	r3, r3
 8007490:	001a      	movs	r2, r3
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	725a      	strb	r2, [r3, #9]
 8007496:	e00d      	b.n	80074b4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
                found_parent = root_node;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	1e5a      	subs	r2, r3, #1
 80074aa:	4193      	sbcs	r3, r2
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	7a5b      	ldrb	r3, [r3, #9]
 80074bc:	001a      	movs	r2, r3
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	0092      	lsls	r2, r2, #2
 80074c2:	58d3      	ldr	r3, [r2, r3]
 80074c4:	623b      	str	r3, [r7, #32]
        while (balance)
 80074c6:	e70d      	b.n	80072e4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
            break;
 80074c8:	46c0      	nop			; (mov r8, r8)
        if (found_parent)
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2f4>
          detach_node(found_parent->children[found_parent->dir],
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	7a5b      	ldrb	r3, [r3, #9]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	7a5b      	ldrb	r3, [r3, #9]
          detach_node(found_parent->children[found_parent->dir],
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e4:	18d3      	adds	r3, r2, r3
 80074e6:	001a      	movs	r2, r3
 80074e8:	f7fe fee6 	bl	80062b8 <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 80074ec:	e018      	b.n	8007520 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
          if (replace_parent)
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x314>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3308      	adds	r3, #8
 80074fa:	0019      	movs	r1, r3
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	7a5b      	ldrb	r3, [r3, #9]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007504:	18d3      	adds	r3, r2, r3
 8007506:	001a      	movs	r2, r3
 8007508:	f7fe fed6 	bl	80062b8 <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800750c:	e008      	b.n	8007520 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
            detach_node(root_node, root_node);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3308      	adds	r3, #8
 8007514:	0019      	movs	r1, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3308      	adds	r3, #8
 800751a:	001a      	movs	r2, r3
 800751c:	f7fe fecc 	bl	80062b8 <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	0018      	movs	r0, r3
 8007524:	f7ff fcfb 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8007528:	0003      	movs	r3, r0
 800752a:	617b      	str	r3, [r7, #20]
        --current_size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	0011      	movs	r1, r2
 800753c:	0018      	movs	r0, r3
 800753e:	f7ff fd97 	bl	8007070 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
      return found;
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	b00f      	add	sp, #60	; 0x3c
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v>:
    T* allocate()
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b13      	cmp	r3, #19
 800755a:	d805      	bhi.n	8007568 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x30>)
 800755e:	4a08      	ldr	r2, [pc, #32]	; (8007580 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x34>)
 8007560:	4808      	ldr	r0, [pc, #32]	; (8007584 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x38>)
 8007562:	2175      	movs	r1, #117	; 0x75
 8007564:	f003 fe3a 	bl	800b1dc <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	0018      	movs	r0, r3
 800756c:	f7fe fc38 	bl	8005de0 <_ZN3etl5ipool13allocate_itemEv>
 8007570:	0003      	movs	r3, r0
    }
 8007572:	0018      	movs	r0, r3
 8007574:	46bd      	mov	sp, r7
 8007576:	b002      	add	sp, #8
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	0800c6c8 	.word	0x0800c6c8
 8007580:	0800ca58 	.word	0x0800ca58
 8007584:	0800c6f4 	.word	0x0800c6f4

08007588 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 8007590:	687b      	ldr	r3, [r7, #4]
    }
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	b002      	add	sp, #8
 8007598:	bd80      	pop	{r7, pc}

0800759a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
      if (position)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02d      	beq.n	8007608 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
        if (position->children[kRight])
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	0019      	movs	r1, r3
 80075c2:	f7fe fe42 	bl	800624a <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 80075c6:	0002      	movs	r2, r0
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	601a      	str	r2, [r3, #0]
    }
 80075cc:	e01c      	b.n	8007608 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
          Node* parent = position;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
            position = parent;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6899      	ldr	r1, [r3, #8]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	0018      	movs	r0, r3
 80075e6:	f000 f81c 	bl	8007622 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>
 80075ea:	0003      	movs	r3, r0
 80075ec:	60fb      	str	r3, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d100      	bne.n	8007602 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
          do {
 8007600:	e7e8      	b.n	80075d4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]
    }
 8007608:	46c0      	nop			; (mov r8, r8)
 800760a:	46bd      	mov	sp, r7
 800760c:	b004      	add	sp, #16
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 8007618:	687b      	ldr	r3, [r7, #4]
    }
 800761a:	0018      	movs	r0, r3
 800761c:	46bd      	mov	sp, r7
 800761e:	b002      	add	sp, #8
 8007620:	bd80      	pop	{r7, pc}

08007622 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>:
    Node* find_parent_node(Node* position, const Node* node)
 8007622:	b580      	push	{r7, lr}
 8007624:	b088      	sub	sp, #32
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d03c      	beq.n	80076b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d039      	beq.n	80076b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d035      	beq.n	80076b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
        while (position)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d032      	beq.n	80076b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
          if (position->children[kLeft] != node &&
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d028      	beq.n	80076a8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            position->children[kRight] != node)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d023      	beq.n	80076a8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            const Data_Node& node_data_node = imap::data_cast(*node);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	0018      	movs	r0, r3
 8007664:	f7ff ff90 	bl	8007588 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 8007668:	0003      	movs	r3, r0
 800766a:	61bb      	str	r3, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	0018      	movs	r0, r3
 8007670:	f7ff fc55 	bl	8006f1e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8007674:	0003      	movs	r3, r0
 8007676:	617b      	str	r3, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	69b9      	ldr	r1, [r7, #24]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	0018      	movs	r0, r3
 8007680:	f7ff fce0 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 8007684:	1e03      	subs	r3, r0, #0
 8007686:	d003      	beq.n	8007690 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x6e>
              position = position->children[kLeft];
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	60bb      	str	r3, [r7, #8]
            }
 800768e:	e00e      	b.n	80076ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            else if (node_comp(position_data_node, node_data_node))
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	0018      	movs	r0, r3
 8007698:	f7ff fcd4 	bl	8007044 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800769c:	1e03      	subs	r3, r0, #0
 800769e:	d006      	beq.n	80076ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
              position = position->children[kRight];
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	60bb      	str	r3, [r7, #8]
            }
 80076a6:	e002      	b.n	80076ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            found = position;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]
            break;
 80076ac:	e001      	b.n	80076b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
            }
 80076ae:	46c0      	nop			; (mov r8, r8)
        while (position)
 80076b0:	e7c9      	b.n	8007646 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x24>
      return found;
 80076b2:	69fb      	ldr	r3, [r7, #28]
    }
 80076b4:	0018      	movs	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b008      	add	sp, #32
 80076ba:	bd80      	pop	{r7, pc}

080076bc <_ZN11SolarGators7Drivers7LTC2630C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftNS0_13OperatingModeE>:
#include "LTC2630.hpp"

namespace SolarGators {
namespace Drivers {

LTC2630::LTC2630(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin, OperatingMode mode):
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	001a      	movs	r2, r3
 80076ca:	1cbb      	adds	r3, r7, #2
 80076cc:	801a      	strh	r2, [r3, #0]
    hspi_(hspi), cs_port_(cs_port), cs_pin_(cs_pin), mode_(mode), current_val_(0)
 80076ce:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <_ZN11SolarGators7Drivers7LTC2630C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftNS0_13OperatingModeE+0x48>)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1cba      	adds	r2, r7, #2
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	819a      	strh	r2, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	81da      	strh	r2, [r3, #14]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	2318      	movs	r3, #24
 80076f2:	18fb      	adds	r3, r7, r3
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	7493      	strb	r3, [r2, #18]
{ }
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	0018      	movs	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b004      	add	sp, #16
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	0800cc7c 	.word	0x0800cc7c

08007708 <_ZN11SolarGators7Drivers7LTC2630D1Ev>:
void LTC2630::Init()
{
  WriteAndUpdate(0x00);
}

LTC2630::~LTC2630()
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	4a06      	ldr	r2, [pc, #24]	; (800772c <_ZN11SolarGators7Drivers7LTC2630D1Ev+0x24>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
{
  // If it falls out of scope we don't wana be stuck accelerating
  WriteAndUpdate(0x00);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	0018      	movs	r0, r3
 800771c:	f000 f81a 	bl	8007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>
}
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	0800cc7c 	.word	0x0800cc7c

08007730 <_ZN11SolarGators7Drivers7LTC2630D0Ev>:
LTC2630::~LTC2630()
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
}
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	0018      	movs	r0, r3
 800773c:	f7ff ffe4 	bl	8007708 <_ZN11SolarGators7Drivers7LTC2630D1Ev>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2114      	movs	r1, #20
 8007744:	0018      	movs	r0, r3
 8007746:	f003 fd29 	bl	800b19c <_ZdlPvj>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b002      	add	sp, #8
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZN11SolarGators7Drivers7LTC263014WriteAndUpdateEt>:
  uint16_t data = 0x0000;
  Write(C_UpdateOutput, data);
  current_val_ = pending_val_;
}
void LTC2630::WriteAndUpdate(uint16_t data)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	000a      	movs	r2, r1
 800775e:	1cbb      	adds	r3, r7, #2
 8007760:	801a      	strh	r2, [r3, #0]
  current_val_ = data;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	1cba      	adds	r2, r7, #2
 8007766:	8812      	ldrh	r2, [r2, #0]
 8007768:	81da      	strh	r2, [r3, #14]
  data = AdjData(data);
 800776a:	1cbc      	adds	r4, r7, #2
 800776c:	1cbb      	adds	r3, r7, #2
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0011      	movs	r1, r2
 8007774:	0018      	movs	r0, r3
 8007776:	f000 f85a 	bl	800782e <_ZN11SolarGators7Drivers7LTC26307AdjDataEt>
 800777a:	0003      	movs	r3, r0
 800777c:	8023      	strh	r3, [r4, #0]
  Write(C_WriteAndUpdate, data);
 800777e:	1cbb      	adds	r3, r7, #2
 8007780:	881a      	ldrh	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2103      	movs	r1, #3
 8007786:	0018      	movs	r0, r3
 8007788:	f000 f817 	bl	80077ba <_ZN11SolarGators7Drivers7LTC26305WriteEht>
}
 800778c:	46c0      	nop			; (mov r8, r8)
 800778e:	46bd      	mov	sp, r7
 8007790:	b003      	add	sp, #12
 8007792:	bd90      	pop	{r4, r7, pc}

08007794 <_ZN11SolarGators7Drivers7LTC26309SetRefVccEv>:
{
  uint16_t data = 0x0000;
  Write(C_SetRefInternal, data);
}
void LTC2630::SetRefVcc()
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint16_t data = 0x0000;
 800779c:	210e      	movs	r1, #14
 800779e:	187b      	adds	r3, r7, r1
 80077a0:	2200      	movs	r2, #0
 80077a2:	801a      	strh	r2, [r3, #0]
  Write(C_SetRefVcc, data);
 80077a4:	187b      	adds	r3, r7, r1
 80077a6:	881a      	ldrh	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2107      	movs	r1, #7
 80077ac:	0018      	movs	r0, r3
 80077ae:	f000 f804 	bl	80077ba <_ZN11SolarGators7Drivers7LTC26305WriteEht>
}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	46bd      	mov	sp, r7
 80077b6:	b004      	add	sp, #16
 80077b8:	bd80      	pop	{r7, pc}

080077ba <_ZN11SolarGators7Drivers7LTC26305WriteEht>:

void LTC2630::Write(uint8_t command, uint16_t data)
{
 80077ba:	b590      	push	{r4, r7, lr}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	0008      	movs	r0, r1
 80077c4:	0011      	movs	r1, r2
 80077c6:	1cfb      	adds	r3, r7, #3
 80077c8:	1c02      	adds	r2, r0, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	003b      	movs	r3, r7
 80077ce:	1c0a      	adds	r2, r1, #0
 80077d0:	801a      	strh	r2, [r3, #0]
  uint8_t buff[3]={ command << 4, data >> 8, data & 0xFF };
 80077d2:	1cfb      	adds	r3, r7, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	240c      	movs	r4, #12
 80077dc:	193b      	adds	r3, r7, r4
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	003b      	movs	r3, r7
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	121b      	asrs	r3, r3, #8
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	193b      	adds	r3, r7, r4
 80077ea:	705a      	strb	r2, [r3, #1]
 80077ec:	003b      	movs	r3, r7
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	193b      	adds	r3, r7, r4
 80077f4:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_RESET);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6898      	ldr	r0, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	899b      	ldrh	r3, [r3, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	0019      	movs	r1, r3
 8007802:	f7fb fc0f 	bl	8003024 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, buff, 3, HAL_MAX_DELAY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6858      	ldr	r0, [r3, #4]
 800780a:	2301      	movs	r3, #1
 800780c:	425b      	negs	r3, r3
 800780e:	1939      	adds	r1, r7, r4
 8007810:	2203      	movs	r2, #3
 8007812:	f7fc fd87 	bl	8004324 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_SET);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6898      	ldr	r0, [r3, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	899b      	ldrh	r3, [r3, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	0019      	movs	r1, r3
 8007822:	f7fb fbff 	bl	8003024 <HAL_GPIO_WritePin>
}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b005      	add	sp, #20
 800782c:	bd90      	pop	{r4, r7, pc}

0800782e <_ZN11SolarGators7Drivers7LTC26307AdjDataEt>:

uint16_t LTC2630::AdjData(uint16_t data)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	000a      	movs	r2, r1
 8007838:	1cbb      	adds	r3, r7, #2
 800783a:	801a      	strh	r2, [r3, #0]

  switch (mode_) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c9b      	ldrb	r3, [r3, #18]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d00f      	beq.n	8007864 <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x36>
 8007844:	d813      	bhi.n	800786e <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x40>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x22>
 800784a:	2b01      	cmp	r3, #1
 800784c:	d005      	beq.n	800785a <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x2c>
 800784e:	e00e      	b.n	800786e <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x40>
    case OperatingMode::Bit8:
      return data << 8;
 8007850:	1cbb      	adds	r3, r7, #2
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	b29b      	uxth	r3, r3
 8007858:	e00a      	b.n	8007870 <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x42>
    case OperatingMode::Bit10:
      return data << 6;
 800785a:	1cbb      	adds	r3, r7, #2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	019b      	lsls	r3, r3, #6
 8007860:	b29b      	uxth	r3, r3
 8007862:	e005      	b.n	8007870 <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x42>
    case OperatingMode::Bit12:
      return data << 4;
 8007864:	1cbb      	adds	r3, r7, #2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	b29b      	uxth	r3, r3
 800786c:	e000      	b.n	8007870 <_ZN11SolarGators7Drivers7LTC26307AdjDataEt+0x42>
    default:
      return 0;  // Fail Safe
 800786e:	2300      	movs	r3, #0
  }
}
 8007870:	0018      	movs	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	b002      	add	sp, #8
 8007876:	bd80      	pop	{r7, pc}

08007878 <_ZN11SolarGators7Drivers8PitCommsC1EPNS0_5RadioE>:
#include "PitComms.hpp"

namespace SolarGators {
namespace Drivers {

PitComms::PitComms(SolarGators::Drivers::Radio* radio):radio_(radio)
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <_ZN11SolarGators7Drivers8PitCommsC1EPNS0_5RadioE+0x34>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	605a      	str	r2, [r3, #4]
{
  radio_->Init();
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3310      	adds	r3, #16
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	0010      	movs	r0, r2
 800789e:	4798      	blx	r3
}
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b002      	add	sp, #8
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	0800cc8c 	.word	0x0800cc8c

080078b0 <_ZN11SolarGators7Drivers8PitCommsD1Ev>:

PitComms::~PitComms()
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	4a03      	ldr	r2, [pc, #12]	; (80078c8 <_ZN11SolarGators7Drivers8PitCommsD1Ev+0x18>)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b002      	add	sp, #8
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	0800cc8c 	.word	0x0800cc8c

080078cc <_ZN11SolarGators7Drivers8PitCommsD0Ev>:
PitComms::~PitComms()
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
}
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f7ff ffea 	bl	80078b0 <_ZN11SolarGators7Drivers8PitCommsD1Ev>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2108      	movs	r1, #8
 80078e0:	0018      	movs	r0, r3
 80078e2:	f003 fc5b 	bl	800b19c <_ZdlPvj>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	0018      	movs	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b002      	add	sp, #8
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <_ZN11SolarGators7Drivers8PitComms14SendDataModuleERNS_11DataModules10DataModuleE>:

void PitComms::SendDataModule(SolarGators::DataModules::DataModule& data_module)
{
 80078f0:	b5b0      	push	{r4, r5, r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  // Start Condition
  radio_->SendByte(START_CHAR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	21ff      	movs	r1, #255	; 0xff
 800790a:	0010      	movs	r0, r2
 800790c:	4798      	blx	r3
  // Only Sending one Datamodule
  radio_->SendByte(1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2101      	movs	r1, #1
 800791e:	0010      	movs	r0, r2
 8007920:	4798      	blx	r3
  radio_->SendByte(data_module.telem_id_);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6858      	ldr	r0, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	330c      	adds	r3, #12
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	8912      	ldrh	r2, [r2, #8]
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	0011      	movs	r1, r2
 8007938:	4798      	blx	r3
  radio_->SendByte(data_module.instance_id_);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6858      	ldr	r0, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	8a12      	ldrh	r2, [r2, #16]
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	0011      	movs	r1, r2
 8007950:	4798      	blx	r3
  radio_->SendByte(data_module.size_);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6858      	ldr	r0, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	0019      	movs	r1, r3
 8007968:	4790      	blx	r2
  // Temporary buffer
  uint8_t buff[16];
  data_module.ToByteArray(buff);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	220c      	movs	r2, #12
 8007974:	18b9      	adds	r1, r7, r2
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	0010      	movs	r0, r2
 800797a:	4798      	blx	r3
  // Send Buffer
  for (uint16_t i = 0; i < data_module.size_; ++i) {
 800797c:	231e      	movs	r3, #30
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	241e      	movs	r4, #30
 8007986:	193b      	adds	r3, r7, r4
 8007988:	881a      	ldrh	r2, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	429a      	cmp	r2, r3
 8007990:	d21c      	bcs.n	80079cc <_ZN11SolarGators7Drivers8PitComms14SendDataModuleERNS_11DataModules10DataModuleE+0xdc>
    EscapeData(buff[i]);
 8007992:	193b      	adds	r3, r7, r4
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	250c      	movs	r5, #12
 8007998:	197a      	adds	r2, r7, r5
 800799a:	5cd2      	ldrb	r2, [r2, r3]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	0011      	movs	r1, r2
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 f821 	bl	80079e8 <_ZN11SolarGators7Drivers8PitComms10EscapeDataEh>
    radio_->SendByte(buff[i]);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6858      	ldr	r0, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	330c      	adds	r3, #12
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	193a      	adds	r2, r7, r4
 80079b6:	8812      	ldrh	r2, [r2, #0]
 80079b8:	1979      	adds	r1, r7, r5
 80079ba:	5c8a      	ldrb	r2, [r1, r2]
 80079bc:	0011      	movs	r1, r2
 80079be:	4798      	blx	r3
  for (uint16_t i = 0; i < data_module.size_; ++i) {
 80079c0:	193b      	adds	r3, r7, r4
 80079c2:	193a      	adds	r2, r7, r4
 80079c4:	8812      	ldrh	r2, [r2, #0]
 80079c6:	3201      	adds	r2, #1
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e7db      	b.n	8007984 <_ZN11SolarGators7Drivers8PitComms14SendDataModuleERNS_11DataModules10DataModuleE+0x94>
  }
  // End condition
  radio_->SendByte(END_CHAR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	213f      	movs	r1, #63	; 0x3f
 80079dc:	0010      	movs	r0, r2
 80079de:	4798      	blx	r3
}
 80079e0:	46c0      	nop			; (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b008      	add	sp, #32
 80079e6:	bdb0      	pop	{r4, r5, r7, pc}

080079e8 <_ZN11SolarGators7Drivers8PitComms10EscapeDataEh>:

inline void PitComms::EscapeData(uint8_t data)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	000a      	movs	r2, r1
 80079f2:	1cfb      	adds	r3, r7, #3
 80079f4:	701a      	strb	r2, [r3, #0]
  if(data == START_CHAR || data == END_CHAR || data == ESC_CHAR)
 80079f6:	1cfb      	adds	r3, r7, #3
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2bff      	cmp	r3, #255	; 0xff
 80079fc:	d007      	beq.n	8007a0e <_ZN11SolarGators7Drivers8PitComms10EscapeDataEh+0x26>
 80079fe:	1cfb      	adds	r3, r7, #3
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b3f      	cmp	r3, #63	; 0x3f
 8007a04:	d003      	beq.n	8007a0e <_ZN11SolarGators7Drivers8PitComms10EscapeDataEh+0x26>
 8007a06:	1cfb      	adds	r3, r7, #3
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b2f      	cmp	r3, #47	; 0x2f
 8007a0c:	d109      	bne.n	8007a22 <_ZN11SolarGators7Drivers8PitComms10EscapeDataEh+0x3a>
  {
    radio_->SendByte(ESC_CHAR);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	212f      	movs	r1, #47	; 0x2f
 8007a1e:	0010      	movs	r0, r2
 8007a20:	4798      	blx	r3
  }
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b002      	add	sp, #8
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <_ZN11SolarGators7Drivers7RFD900xC1EP20__UART_HandleTypeDef>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

RFD900x::RFD900x(UART_HandleTypeDef* huart):Radio(),huart_(huart)
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f000 f877 	bl	8007b2c <_ZN11SolarGators7Drivers5RadioC1Ev>
 8007a3e:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <_ZN11SolarGators7Drivers7RFD900xC1EP20__UART_HandleTypeDef+0x28>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	605a      	str	r2, [r3, #4]
{ }
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	0800cc9c 	.word	0x0800cc9c

08007a58 <_ZN11SolarGators7Drivers7RFD900xD1Ev>:

RFD900x::~RFD900x()
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	4a05      	ldr	r2, [pc, #20]	; (8007a78 <_ZN11SolarGators7Drivers7RFD900xD1Ev+0x20>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f000 f86d 	bl	8007b48 <_ZN11SolarGators7Drivers5RadioD1Ev>
{ }
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800cc9c 	.word	0x0800cc9c

08007a7c <_ZN11SolarGators7Drivers7RFD900xD0Ev>:
RFD900x::~RFD900x()
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
{ }
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7ff ffe6 	bl	8007a58 <_ZN11SolarGators7Drivers7RFD900xD1Ev>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2108      	movs	r1, #8
 8007a90:	0018      	movs	r0, r3
 8007a92:	f003 fb83 	bl	800b19c <_ZdlPvj>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZN11SolarGators7Drivers7RFD900x4InitEv>:

void RFD900x::Init()
{ }
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZN11SolarGators7Drivers7RFD900x8SendDataEPhm>:

inline void RFD900x::SendData(uint8_t* data, uint32_t size)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < size; ++i)
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d20e      	bcs.n	8007ae6 <_ZN11SolarGators7Drivers7RFD900x8SendDataEPhm+0x36>
  {
    SendByte(data[i]);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	188a      	adds	r2, r1, r2
 8007ad6:	7811      	ldrb	r1, [r2, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	0010      	movs	r0, r2
 8007adc:	4798      	blx	r3
  for (uint32_t i = 0; i < size; ++i)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e7ec      	b.n	8007ac0 <_ZN11SolarGators7Drivers7RFD900x8SendDataEPhm+0x10>
  }
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b006      	add	sp, #24
 8007aec:	bd80      	pop	{r7, pc}

08007aee <_ZN11SolarGators7Drivers7RFD900x8SendByteEh>:

inline void RFD900x::SendByte(uint8_t data)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	000a      	movs	r2, r1
 8007af8:	1cfb      	adds	r3, r7, #3
 8007afa:	701a      	strb	r2, [r3, #0]
  while(!(this->huart_->Instance->ISR & USART_ISR_TXE));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	2280      	movs	r2, #128	; 0x80
 8007b06:	4013      	ands	r3, r2
 8007b08:	425a      	negs	r2, r3
 8007b0a:	4153      	adcs	r3, r2
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d000      	beq.n	8007b14 <_ZN11SolarGators7Drivers7RFD900x8SendByteEh+0x26>
 8007b12:	e7f3      	b.n	8007afc <_ZN11SolarGators7Drivers7RFD900x8SendByteEh+0xe>
  this->huart_->Instance->TDR = data;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1cfa      	adds	r2, r7, #3
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b002      	add	sp, #8
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <_ZN11SolarGators7Drivers5RadioC1Ev>:
#include "Radio.hpp"

namespace SolarGators {
namespace Drivers {

Radio::Radio() {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	4a03      	ldr	r2, [pc, #12]	; (8007b44 <_ZN11SolarGators7Drivers5RadioC1Ev+0x18>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
  // TODO Auto-generated constructor stub

}
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b002      	add	sp, #8
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	0800ccb8 	.word	0x0800ccb8

08007b48 <_ZN11SolarGators7Drivers5RadioD1Ev>:

Radio::~Radio() {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	4a03      	ldr	r2, [pc, #12]	; (8007b60 <_ZN11SolarGators7Drivers5RadioD1Ev+0x18>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
  // TODO Auto-generated destructor stub
}
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	0800ccb8 	.word	0x0800ccb8

08007b64 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b6a:	f3ef 8305 	mrs	r3, IPSR
 8007b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b76:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <osKernelInitialize+0x2e>
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <osKernelInitialize+0x54>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d103      	bne.n	8007b92 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e00c      	b.n	8007bac <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <osKernelInitialize+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d105      	bne.n	8007ba6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <osKernelInitialize+0x54>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e002      	b.n	8007bac <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	425b      	negs	r3, r3
 8007baa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007bac:	68fb      	ldr	r3, [r7, #12]
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b004      	add	sp, #16
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	200005a4 	.word	0x200005a4

08007bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc2:	f3ef 8305 	mrs	r3, IPSR
 8007bc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bce:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd2:	607b      	str	r3, [r7, #4]
  return(result);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <osKernelStart+0x2e>
 8007bda:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <osKernelStart+0x58>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d103      	bne.n	8007bea <osKernelStart+0x2e>
    stat = osErrorISR;
 8007be2:	2306      	movs	r3, #6
 8007be4:	425b      	negs	r3, r3
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e00e      	b.n	8007c08 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <osKernelStart+0x58>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d107      	bne.n	8007c02 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <osKernelStart+0x58>)
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007bf8:	f001 fe1e 	bl	8009838 <vTaskStartScheduler>
      stat = osOK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e002      	b.n	8007c08 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8007c02:	2301      	movs	r3, #1
 8007c04:	425b      	negs	r3, r3
 8007c06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	200005a4 	.word	0x200005a4

08007c18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af04      	add	r7, sp, #16
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c28:	f3ef 8305 	mrs	r3, IPSR
 8007c2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d000      	beq.n	8007c36 <osThreadNew+0x1e>
 8007c34:	e090      	b.n	8007d58 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c36:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <osThreadNew+0x34>
 8007c42:	4b48      	ldr	r3, [pc, #288]	; (8007d64 <osThreadNew+0x14c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d100      	bne.n	8007c4c <osThreadNew+0x34>
 8007c4a:	e085      	b.n	8007d58 <osThreadNew+0x140>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d100      	bne.n	8007c54 <osThreadNew+0x3c>
 8007c52:	e081      	b.n	8007d58 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8007c54:	2380      	movs	r3, #128	; 0x80
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007c58:	2318      	movs	r3, #24
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8007c5c:	2117      	movs	r1, #23
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8007c64:	187b      	adds	r3, r7, r1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	425b      	negs	r3, r3
 8007c6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d044      	beq.n	8007cfe <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <osThreadNew+0x6a>
        name = attr->name;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <osThreadNew+0x8e>
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b38      	cmp	r3, #56	; 0x38
 8007c9a:	d804      	bhi.n	8007ca6 <osThreadNew+0x8e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d001      	beq.n	8007caa <osThreadNew+0x92>
        return (NULL);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e057      	b.n	8007d5a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <osThreadNew+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b5b      	cmp	r3, #91	; 0x5b
 8007cc8:	d90a      	bls.n	8007ce0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <osThreadNew+0xc8>
        mem = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	623b      	str	r3, [r7, #32]
 8007cde:	e010      	b.n	8007d02 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10c      	bne.n	8007d02 <osThreadNew+0xea>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d108      	bne.n	8007d02 <osThreadNew+0xea>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <osThreadNew+0xea>
          mem = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	e001      	b.n	8007d02 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d112      	bne.n	8007d2e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d10:	68bd      	ldr	r5, [r7, #8]
 8007d12:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8007d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	9302      	str	r3, [sp, #8]
 8007d1a:	9201      	str	r2, [sp, #4]
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	002b      	movs	r3, r5
 8007d22:	0022      	movs	r2, r4
 8007d24:	f001 fbe9 	bl	80094fa <xTaskCreateStatic>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	e014      	b.n	8007d58 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d111      	bne.n	8007d58 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68bc      	ldr	r4, [r7, #8]
 8007d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	2310      	movs	r3, #16
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	0023      	movs	r3, r4
 8007d4a:	f001 fc19 	bl	8009580 <xTaskCreate>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d001      	beq.n	8007d58 <osThreadNew+0x140>
          hTask = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d58:	693b      	ldr	r3, [r7, #16]
}
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b00c      	add	sp, #48	; 0x30
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	200005a4 	.word	0x200005a4

08007d68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d70:	f3ef 8305 	mrs	r3, IPSR
 8007d74:	613b      	str	r3, [r7, #16]
  return(result);
 8007d76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <osDelay+0x30>
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <osDelay+0x4c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d103      	bne.n	8007d98 <osDelay+0x30>
    stat = osErrorISR;
 8007d90:	2306      	movs	r3, #6
 8007d92:	425b      	negs	r3, r3
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e008      	b.n	8007daa <osDelay+0x42>
  }
  else {
    stat = osOK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <osDelay+0x42>
      vTaskDelay(ticks);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	0018      	movs	r0, r3
 8007da6:	f001 fd21 	bl	80097ec <vTaskDelay>
    }
  }

  return (stat);
 8007daa:	697b      	ldr	r3, [r7, #20]
}
 8007dac:	0018      	movs	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b006      	add	sp, #24
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200005a4 	.word	0x200005a4

08007db8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f002 fed0 	bl	800ab68 <pvTimerGetTimerID>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <TimerCallback+0x26>
    callb->func (callb->arg);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	0018      	movs	r0, r3
 8007ddc:	4790      	blx	r2
  }
}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b004      	add	sp, #16
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08e      	sub	sp, #56	; 0x38
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	230b      	movs	r3, #11
 8007df6:	18fb      	adds	r3, r7, r3
 8007df8:	1c0a      	adds	r2, r1, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e00:	f3ef 8305 	mrs	r3, IPSR
 8007e04:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e06:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d000      	beq.n	8007e0e <osTimerNew+0x26>
 8007e0c:	e06b      	b.n	8007ee6 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e12:	617b      	str	r3, [r7, #20]
  return(result);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <osTimerNew+0x3a>
 8007e1a:	4b35      	ldr	r3, [pc, #212]	; (8007ef0 <osTimerNew+0x108>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d061      	beq.n	8007ee6 <osTimerNew+0xfe>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d05e      	beq.n	8007ee6 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007e28:	2008      	movs	r0, #8
 8007e2a:	f003 f811 	bl	800ae50 <pvPortMalloc>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d056      	beq.n	8007ee6 <osTimerNew+0xfe>
      callb->func = func;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007e44:	230b      	movs	r3, #11
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <osTimerNew+0x6c>
        reload = pdFALSE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
 8007e52:	e001      	b.n	8007e58 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	425b      	negs	r3, r3
 8007e5c:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <osTimerNew+0x8e>
          name = attr->name;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <osTimerNew+0xa4>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b2f      	cmp	r3, #47	; 0x2f
 8007e84:	d902      	bls.n	8007e8c <osTimerNew+0xa4>
          mem = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	623b      	str	r3, [r7, #32]
 8007e8a:	e00c      	b.n	8007ea6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d108      	bne.n	8007ea6 <osTimerNew+0xbe>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <osTimerNew+0xbe>
            mem = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	623b      	str	r3, [r7, #32]
 8007ea0:	e001      	b.n	8007ea6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d10e      	bne.n	8007eca <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	69f9      	ldr	r1, [r7, #28]
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <osTimerNew+0x10c>)
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	000b      	movs	r3, r1
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	f002 fb6b 	bl	800a59a <xTimerCreateStatic>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec8:	e00d      	b.n	8007ee6 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ed6:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <osTimerNew+0x10c>)
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	000b      	movs	r3, r1
 8007edc:	2101      	movs	r1, #1
 8007ede:	f002 fb39 	bl	800a554 <xTimerCreate>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007ee8:	0018      	movs	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b00c      	add	sp, #48	; 0x30
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	200005a4 	.word	0x200005a4
 8007ef4:	08007db9 	.word	0x08007db9

08007ef8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f06:	f3ef 8305 	mrs	r3, IPSR
 8007f0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f12:	f3ef 8310 	mrs	r3, PRIMASK
 8007f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <osTimerStart+0x36>
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <osTimerStart+0x70>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d103      	bne.n	8007f2e <osTimerStart+0x36>
    stat = osErrorISR;
 8007f26:	2306      	movs	r3, #6
 8007f28:	425b      	negs	r3, r3
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e017      	b.n	8007f5e <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <osTimerStart+0x44>
    stat = osErrorParameter;
 8007f34:	2304      	movs	r3, #4
 8007f36:	425b      	negs	r3, r3
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	e010      	b.n	8007f5e <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	6938      	ldr	r0, [r7, #16]
 8007f40:	2300      	movs	r3, #0
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	2104      	movs	r1, #4
 8007f48:	f002 fb7c 	bl	800a644 <xTimerGenericCommand>
 8007f4c:	0003      	movs	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d102      	bne.n	8007f58 <osTimerStart+0x60>
      stat = osOK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e002      	b.n	8007f5e <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007f5e:	697b      	ldr	r3, [r7, #20]
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b006      	add	sp, #24
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200005a4 	.word	0x200005a4

08007f6c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f78:	f3ef 8305 	mrs	r3, IPSR
 8007f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f7e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d139      	bne.n	8007ff8 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f84:	f3ef 8310 	mrs	r3, PRIMASK
 8007f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <osEventFlagsNew+0x2c>
 8007f90:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <osEventFlagsNew+0x98>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d02f      	beq.n	8007ff8 <osEventFlagsNew+0x8c>
    mem = -1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	425b      	negs	r3, r3
 8007f9c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d015      	beq.n	8007fd0 <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <osEventFlagsNew+0x4e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b1f      	cmp	r3, #31
 8007fb2:	d902      	bls.n	8007fba <osEventFlagsNew+0x4e>
        mem = 1;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	e00c      	b.n	8007fd4 <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d108      	bne.n	8007fd4 <osEventFlagsNew+0x68>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <osEventFlagsNew+0x68>
          mem = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	e001      	b.n	8007fd4 <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d107      	bne.n	8007fea <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f000 fa3e 	bl	8008460 <xEventGroupCreateStatic>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e006      	b.n	8007ff8 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 8007ff0:	f000 fa5b 	bl	80084aa <xEventGroupCreate>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007ff8:	697b      	ldr	r3, [r7, #20]
}
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	b006      	add	sp, #24
 8008000:	bd80      	pop	{r7, pc}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	200005a4 	.word	0x200005a4

08008008 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <osEventFlagsSet+0x1c>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	0e1b      	lsrs	r3, r3, #24
 8008020:	061b      	lsls	r3, r3, #24
 8008022:	d003      	beq.n	800802c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8008024:	2304      	movs	r3, #4
 8008026:	425b      	negs	r3, r3
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	e032      	b.n	8008092 <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800802c:	f3ef 8305 	mrs	r3, IPSR
 8008030:	617b      	str	r3, [r7, #20]
  return(result);
 8008032:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008038:	f3ef 8310 	mrs	r3, PRIMASK
 800803c:	613b      	str	r3, [r7, #16]
  return(result);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01c      	beq.n	800807e <osEventFlagsSet+0x76>
 8008044:	4b15      	ldr	r3, [pc, #84]	; (800809c <osEventFlagsSet+0x94>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d118      	bne.n	800807e <osEventFlagsSet+0x76>
    yield = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008050:	230c      	movs	r3, #12
 8008052:	18fa      	adds	r2, r7, r3
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	0018      	movs	r0, r3
 800805a:	f000 fb8f 	bl	800877c <xEventGroupSetBitsFromISR>
 800805e:	1e03      	subs	r3, r0, #0
 8008060:	d003      	beq.n	800806a <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 8008062:	2303      	movs	r3, #3
 8008064:	425b      	negs	r3, r3
 8008066:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008068:	e012      	b.n	8008090 <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00d      	beq.n	8008090 <osEventFlagsSet+0x88>
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <osEventFlagsSet+0x98>)
 8008076:	2280      	movs	r2, #128	; 0x80
 8008078:	0552      	lsls	r2, r2, #21
 800807a:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800807c:	e008      	b.n	8008090 <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	0011      	movs	r1, r2
 8008084:	0018      	movs	r0, r3
 8008086:	f000 fad1 	bl	800862c <xEventGroupSetBits>
 800808a:	0003      	movs	r3, r0
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	e000      	b.n	8008092 <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008090:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	0018      	movs	r0, r3
 8008096:	46bd      	mov	sp, r7
 8008098:	b008      	add	sp, #32
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200005a4 	.word	0x200005a4
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b08d      	sub	sp, #52	; 0x34
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <osEventFlagsWait+0x20>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	d003      	beq.n	80080cc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80080c4:	2304      	movs	r3, #4
 80080c6:	425b      	negs	r3, r3
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	e051      	b.n	8008170 <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080cc:	f3ef 8305 	mrs	r3, IPSR
 80080d0:	617b      	str	r3, [r7, #20]
  return(result);
 80080d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d8:	f3ef 8310 	mrs	r3, PRIMASK
 80080dc:	613b      	str	r3, [r7, #16]
  return(result);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <osEventFlagsWait+0x50>
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <osEventFlagsWait+0xd8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d103      	bne.n	80080f4 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 80080ec:	2306      	movs	r3, #6
 80080ee:	425b      	negs	r3, r3
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e03d      	b.n	8008170 <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	4013      	ands	r3, r2
 80080fa:	d002      	beq.n	8008102 <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008100:	e001      	b.n	8008106 <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 8008102:	2300      	movs	r3, #0
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	4013      	ands	r3, r2
 800810c:	d002      	beq.n	8008114 <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 800810e:	2300      	movs	r3, #0
 8008110:	623b      	str	r3, [r7, #32]
 8008112:	e001      	b.n	8008118 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008118:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	69b8      	ldr	r0, [r7, #24]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	0023      	movs	r3, r4
 8008126:	f000 f9db 	bl	80084e0 <xEventGroupWaitBits>
 800812a:	0003      	movs	r3, r0
 800812c:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	4013      	ands	r3, r2
 8008134:	d00e      	beq.n	8008154 <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	429a      	cmp	r2, r3
 800813c:	d018      	beq.n	8008170 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 8008144:	2302      	movs	r3, #2
 8008146:	425b      	negs	r3, r3
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e011      	b.n	8008170 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800814c:	2303      	movs	r3, #3
 800814e:	425b      	negs	r3, r3
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	e00d      	b.n	8008170 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	4013      	ands	r3, r2
 800815a:	d109      	bne.n	8008170 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 8008162:	2302      	movs	r3, #2
 8008164:	425b      	negs	r3, r3
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	e002      	b.n	8008170 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800816a:	2303      	movs	r3, #3
 800816c:	425b      	negs	r3, r3
 800816e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8008170:	69fb      	ldr	r3, [r7, #28]
}
 8008172:	0018      	movs	r0, r3
 8008174:	46bd      	mov	sp, r7
 8008176:	b00b      	add	sp, #44	; 0x2c
 8008178:	bd90      	pop	{r4, r7, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	200005a4 	.word	0x200005a4

08008180 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800818c:	f3ef 8305 	mrs	r3, IPSR
 8008190:	613b      	str	r3, [r7, #16]
  return(result);
 8008192:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008194:	2b00      	cmp	r3, #0
 8008196:	d000      	beq.n	800819a <osMutexNew+0x1a>
 8008198:	e084      	b.n	80082a4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819a:	f3ef 8310 	mrs	r3, PRIMASK
 800819e:	60fb      	str	r3, [r7, #12]
  return(result);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <osMutexNew+0x30>
 80081a6:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <osMutexNew+0x130>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d100      	bne.n	80081b0 <osMutexNew+0x30>
 80081ae:	e079      	b.n	80082a4 <osMutexNew+0x124>
    if (attr != NULL) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <osMutexNew+0x3e>
      type = attr->attr_bits;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	623b      	str	r3, [r7, #32]
 80081bc:	e001      	b.n	80081c2 <osMutexNew+0x42>
    } else {
      type = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	2201      	movs	r2, #1
 80081c6:	4013      	ands	r3, r2
 80081c8:	d002      	beq.n	80081d0 <osMutexNew+0x50>
      rmtx = 1U;
 80081ca:	2301      	movs	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	e001      	b.n	80081d4 <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2208      	movs	r2, #8
 80081d8:	4013      	ands	r3, r2
 80081da:	d000      	beq.n	80081de <osMutexNew+0x5e>
 80081dc:	e062      	b.n	80082a4 <osMutexNew+0x124>
      mem = -1;
 80081de:	2301      	movs	r3, #1
 80081e0:	425b      	negs	r3, r3
 80081e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d015      	beq.n	8008216 <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d006      	beq.n	8008200 <osMutexNew+0x80>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b4f      	cmp	r3, #79	; 0x4f
 80081f8:	d902      	bls.n	8008200 <osMutexNew+0x80>
          mem = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	e00c      	b.n	800821a <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d108      	bne.n	800821a <osMutexNew+0x9a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <osMutexNew+0x9a>
            mem = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e001      	b.n	800821a <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d114      	bne.n	800824a <osMutexNew+0xca>
        if (rmtx != 0U) {
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	0019      	movs	r1, r3
 800822c:	2004      	movs	r0, #4
 800822e:	f000 fc96 	bl	8008b5e <xQueueCreateMutexStatic>
 8008232:	0003      	movs	r3, r0
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e019      	b.n	800826c <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	0019      	movs	r1, r3
 800823e:	2001      	movs	r0, #1
 8008240:	f000 fc8d 	bl	8008b5e <xQueueCreateMutexStatic>
 8008244:	0003      	movs	r3, r0
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
 8008248:	e010      	b.n	800826c <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <osMutexNew+0xec>
          if (rmtx != 0U) {
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008256:	2004      	movs	r0, #4
 8008258:	f000 fc65 	bl	8008b26 <xQueueCreateMutex>
 800825c:	0003      	movs	r3, r0
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	e004      	b.n	800826c <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008262:	2001      	movs	r0, #1
 8008264:	f000 fc5f 	bl	8008b26 <xQueueCreateMutex>
 8008268:	0003      	movs	r3, r0
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <osMutexNew+0x110>
        if (attr != NULL) {
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <osMutexNew+0x100>
          name = attr->name;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	e001      	b.n	8008284 <osMutexNew+0x104>
        } else {
          name = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	0011      	movs	r1, r2
 800828a:	0018      	movs	r0, r3
 800828c:	f001 f8da 	bl	8009444 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d006      	beq.n	80082a4 <osMutexNew+0x124>
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	2201      	movs	r2, #1
 80082a0:	4313      	orrs	r3, r2
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b00a      	add	sp, #40	; 0x28
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	200005a4 	.word	0x200005a4

080082b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	4393      	bics	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	4013      	ands	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d2:	f3ef 8305 	mrs	r3, IPSR
 80082d6:	613b      	str	r3, [r7, #16]
  return(result);
 80082d8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082de:	f3ef 8310 	mrs	r3, PRIMASK
 80082e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <osMutexAcquire+0x46>
 80082ea:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <osMutexAcquire+0xb4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d103      	bne.n	80082fa <osMutexAcquire+0x46>
    stat = osErrorISR;
 80082f2:	2306      	movs	r3, #6
 80082f4:	425b      	negs	r3, r3
 80082f6:	61fb      	str	r3, [r7, #28]
 80082f8:	e030      	b.n	800835c <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 8008300:	2304      	movs	r3, #4
 8008302:	425b      	negs	r3, r3
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e029      	b.n	800835c <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d013      	beq.n	8008336 <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	0011      	movs	r1, r2
 8008314:	0018      	movs	r0, r3
 8008316:	f000 fc6d 	bl	8008bf4 <xQueueTakeMutexRecursive>
 800831a:	0003      	movs	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d01d      	beq.n	800835c <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 8008326:	2302      	movs	r3, #2
 8008328:	425b      	negs	r3, r3
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e016      	b.n	800835c <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800832e:	2303      	movs	r3, #3
 8008330:	425b      	negs	r3, r3
 8008332:	61fb      	str	r3, [r7, #28]
 8008334:	e012      	b.n	800835c <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	0011      	movs	r1, r2
 800833c:	0018      	movs	r0, r3
 800833e:	f000 fe73 	bl	8009028 <xQueueSemaphoreTake>
 8008342:	0003      	movs	r3, r0
 8008344:	2b01      	cmp	r3, #1
 8008346:	d009      	beq.n	800835c <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800834e:	2302      	movs	r3, #2
 8008350:	425b      	negs	r3, r3
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	e002      	b.n	800835c <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 8008356:	2303      	movs	r3, #3
 8008358:	425b      	negs	r3, r3
 800835a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800835c:	69fb      	ldr	r3, [r7, #28]
}
 800835e:	0018      	movs	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	b008      	add	sp, #32
 8008364:	bd80      	pop	{r7, pc}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	200005a4 	.word	0x200005a4

0800836c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	4393      	bics	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	4013      	ands	r3, r2
 8008382:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008384:	2300      	movs	r3, #0
 8008386:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008388:	f3ef 8305 	mrs	r3, IPSR
 800838c:	613b      	str	r3, [r7, #16]
  return(result);
 800838e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008394:	f3ef 8310 	mrs	r3, PRIMASK
 8008398:	60fb      	str	r3, [r7, #12]
  return(result);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <osMutexRelease+0x44>
 80083a0:	4b16      	ldr	r3, [pc, #88]	; (80083fc <osMutexRelease+0x90>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d103      	bne.n	80083b0 <osMutexRelease+0x44>
    stat = osErrorISR;
 80083a8:	2306      	movs	r3, #6
 80083aa:	425b      	negs	r3, r3
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	e020      	b.n	80083f2 <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <osMutexRelease+0x52>
    stat = osErrorParameter;
 80083b6:	2304      	movs	r3, #4
 80083b8:	425b      	negs	r3, r3
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	e019      	b.n	80083f2 <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	0018      	movs	r0, r3
 80083c8:	f000 fbe9 	bl	8008b9e <xQueueGiveMutexRecursive>
 80083cc:	0003      	movs	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d00f      	beq.n	80083f2 <osMutexRelease+0x86>
        stat = osErrorResource;
 80083d2:	2303      	movs	r3, #3
 80083d4:	425b      	negs	r3, r3
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e00b      	b.n	80083f2 <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80083da:	69b8      	ldr	r0, [r7, #24]
 80083dc:	2300      	movs	r3, #0
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	f000 fc37 	bl	8008c54 <xQueueGenericSend>
 80083e6:	0003      	movs	r3, r0
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d002      	beq.n	80083f2 <osMutexRelease+0x86>
        stat = osErrorResource;
 80083ec:	2303      	movs	r3, #3
 80083ee:	425b      	negs	r3, r3
 80083f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80083f2:	69fb      	ldr	r3, [r7, #28]
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b008      	add	sp, #32
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200005a4 	.word	0x200005a4

08008400 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4a06      	ldr	r2, [pc, #24]	; (8008428 <vApplicationGetIdleTaskMemory+0x28>)
 8008410:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4a05      	ldr	r2, [pc, #20]	; (800842c <vApplicationGetIdleTaskMemory+0x2c>)
 8008416:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2280      	movs	r2, #128	; 0x80
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b004      	add	sp, #16
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	200005a8 	.word	0x200005a8
 800842c:	20000604 	.word	0x20000604

08008430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4a06      	ldr	r2, [pc, #24]	; (8008458 <vApplicationGetTimerTaskMemory+0x28>)
 8008440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4a05      	ldr	r2, [pc, #20]	; (800845c <vApplicationGetTimerTaskMemory+0x2c>)
 8008446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2280      	movs	r2, #128	; 0x80
 800844c:	0052      	lsls	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b004      	add	sp, #16
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000804 	.word	0x20000804
 800845c:	20000860 	.word	0x20000860

08008460 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <xEventGroupCreateStatic+0x12>
 800846e:	b672      	cpsid	i
 8008470:	e7fe      	b.n	8008470 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008472:	2320      	movs	r3, #32
 8008474:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b20      	cmp	r3, #32
 800847a:	d001      	beq.n	8008480 <xEventGroupCreateStatic+0x20>
 800847c:	b672      	cpsid	i
 800847e:	e7fe      	b.n	800847e <xEventGroupCreateStatic+0x1e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3304      	adds	r3, #4
 8008494:	0018      	movs	r0, r3
 8008496:	f000 f987 	bl	80087a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80084a0:	68fb      	ldr	r3, [r7, #12]
	}
 80084a2:	0018      	movs	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b004      	add	sp, #16
 80084a8:	bd80      	pop	{r7, pc}

080084aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80084b0:	2020      	movs	r0, #32
 80084b2:	f002 fccd 	bl	800ae50 <pvPortMalloc>
 80084b6:	0003      	movs	r3, r0
 80084b8:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3304      	adds	r3, #4
 80084ca:	0018      	movs	r0, r3
 80084cc:	f000 f96c 	bl	80087a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80084d6:	687b      	ldr	r3, [r7, #4]
	}
 80084d8:	0018      	movs	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	b002      	add	sp, #8
 80084de:	bd80      	pop	{r7, pc}

080084e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08c      	sub	sp, #48	; 0x30
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <xEventGroupWaitBits+0x24>
 8008500:	b672      	cpsid	i
 8008502:	e7fe      	b.n	8008502 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	0e1b      	lsrs	r3, r3, #24
 8008508:	061b      	lsls	r3, r3, #24
 800850a:	d001      	beq.n	8008510 <xEventGroupWaitBits+0x30>
 800850c:	b672      	cpsid	i
 800850e:	e7fe      	b.n	800850e <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <xEventGroupWaitBits+0x3a>
 8008516:	b672      	cpsid	i
 8008518:	e7fe      	b.n	8008518 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800851a:	f001 fe07 	bl	800a12c <xTaskGetSchedulerState>
 800851e:	1e03      	subs	r3, r0, #0
 8008520:	d102      	bne.n	8008528 <xEventGroupWaitBits+0x48>
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <xEventGroupWaitBits+0x4c>
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <xEventGroupWaitBits+0x4e>
 800852c:	2300      	movs	r3, #0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <xEventGroupWaitBits+0x56>
 8008532:	b672      	cpsid	i
 8008534:	e7fe      	b.n	8008534 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 8008536:	f001 f9d3 	bl	80098e0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	0018      	movs	r0, r3
 8008548:	f000 f8f8 	bl	800873c <prvTestWaitCondition>
 800854c:	0003      	movs	r3, r0
 800854e:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02a      	beq.n	80085ba <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	43d2      	mvns	r2, r2
 800856c:	401a      	ands	r2, r3
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	e022      	b.n	80085ba <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d104      	bne.n	8008584 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	623b      	str	r3, [r7, #32]
 8008582:	e01a      	b.n	80085ba <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d004      	beq.n	8008594 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	2280      	movs	r2, #128	; 0x80
 800858e:	0452      	lsls	r2, r2, #17
 8008590:	4313      	orrs	r3, r2
 8008592:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	2280      	movs	r2, #128	; 0x80
 800859e:	04d2      	lsls	r2, r2, #19
 80085a0:	4313      	orrs	r3, r2
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	1d18      	adds	r0, r3, #4
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	4313      	orrs	r3, r2
 80085ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b0:	0019      	movs	r1, r3
 80085b2:	f001 fb6f 	bl	8009c94 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80085ba:	f001 f99d 	bl	80098f8 <xTaskResumeAll>
 80085be:	0003      	movs	r3, r0
 80085c0:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02c      	beq.n	8008622 <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 80085ce:	f002 fb97 	bl	800ad00 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80085d2:	f001 ff05 	bl	800a3e0 <uxTaskResetEventItemValue>
 80085d6:	0003      	movs	r3, r0
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80085da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085dc:	2380      	movs	r3, #128	; 0x80
 80085de:	049b      	lsls	r3, r3, #18
 80085e0:	4013      	ands	r3, r2
 80085e2:	d11a      	bne.n	800861a <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 80085e4:	f002 fb9c 	bl	800ad20 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	0018      	movs	r0, r3
 80085f6:	f000 f8a1 	bl	800873c <prvTestWaitCondition>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d009      	beq.n	8008612 <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d006      	beq.n	8008612 <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	43d2      	mvns	r2, r2
 800860c:	401a      	ands	r2, r3
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 8008616:	f002 fb95 	bl	800ad44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	021b      	lsls	r3, r3, #8
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	b00c      	add	sp, #48	; 0x30
 800862a:	bd80      	pop	{r7, pc}

0800862c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	; 0x30
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008636:	2300      	movs	r3, #0
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <xEventGroupSetBits+0x20>
 8008648:	b672      	cpsid	i
 800864a:	e7fe      	b.n	800864a <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	0e1b      	lsrs	r3, r3, #24
 8008650:	061b      	lsls	r3, r3, #24
 8008652:	d001      	beq.n	8008658 <xEventGroupSetBits+0x2c>
 8008654:	b672      	cpsid	i
 8008656:	e7fe      	b.n	8008656 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	3304      	adds	r3, #4
 800865c:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3308      	adds	r3, #8
 8008662:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 8008664:	f001 f93c 	bl	80098e0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	431a      	orrs	r2, r3
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800867a:	e03d      	b.n	80086f8 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	0e1b      	lsrs	r3, r3, #24
 8008690:	061b      	lsls	r3, r3, #24
 8008692:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	04db      	lsls	r3, r3, #19
 80086a2:	4013      	ands	r3, r2
 80086a4:	d107      	bne.n	80086b6 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4013      	ands	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
 80086b4:	e008      	b.n	80086c8 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4013      	ands	r3, r2
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d101      	bne.n	80086c8 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d012      	beq.n	80086f4 <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	045b      	lsls	r3, r3, #17
 80086d4:	4013      	ands	r3, r2
 80086d6:	d003      	beq.n	80086e0 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80086d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2280      	movs	r2, #128	; 0x80
 80086e6:	0492      	lsls	r2, r2, #18
 80086e8:	431a      	orrs	r2, r3
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	0011      	movs	r1, r2
 80086ee:	0018      	movs	r0, r3
 80086f0:	f001 fb80 	bl	8009df4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 80086f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d1bd      	bne.n	800867c <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008706:	43d2      	mvns	r2, r2
 8008708:	401a      	ands	r2, r3
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800870e:	f001 f8f3 	bl	80098f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	681b      	ldr	r3, [r3, #0]
}
 8008716:	0018      	movs	r0, r3
 8008718:	46bd      	mov	sp, r7
 800871a:	b00c      	add	sp, #48	; 0x30
 800871c:	bd80      	pop	{r7, pc}

0800871e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	0011      	movs	r1, r2
 800872e:	0018      	movs	r0, r3
 8008730:	f7ff ff7c 	bl	800862c <xEventGroupSetBits>
}
 8008734:	46c0      	nop			; (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b002      	add	sp, #8
 800873a:	bd80      	pop	{r7, pc}

0800873c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4013      	ands	r3, r2
 8008758:	d00a      	beq.n	8008770 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e007      	b.n	8008770 <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4013      	ands	r3, r2
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	429a      	cmp	r2, r3
 800876a:	d101      	bne.n	8008770 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008770:	697b      	ldr	r3, [r7, #20]
}
 8008772:	0018      	movs	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	b006      	add	sp, #24
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <xEventGroupSetBitsFromISR+0x28>)
 8008790:	f002 fa02 	bl	800ab98 <xTimerPendFunctionCallFromISR>
 8008794:	0003      	movs	r3, r0
 8008796:	617b      	str	r3, [r7, #20]

		return xReturn;
 8008798:	697b      	ldr	r3, [r7, #20]
	}
 800879a:	0018      	movs	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	b006      	add	sp, #24
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	0800871f 	.word	0x0800871f

080087a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3308      	adds	r3, #8
 80087b4:	001a      	movs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	4252      	negs	r2, r2
 80087c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3308      	adds	r3, #8
 80087c6:	001a      	movs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3308      	adds	r3, #8
 80087d0:	001a      	movs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087dc:	46c0      	nop			; (mov r8, r8)
 80087de:	46bd      	mov	sp, r7
 80087e0:	b002      	add	sp, #8
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	46bd      	mov	sp, r7
 80087f6:	b002      	add	sp, #8
 80087f8:	bd80      	pop	{r7, pc}

080087fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	46bd      	mov	sp, r7
 800883a:	b004      	add	sp, #16
 800883c:	bd80      	pop	{r7, pc}

0800883e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3301      	adds	r3, #1
 8008852:	d103      	bne.n	800885c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e00c      	b.n	8008876 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3308      	adds	r3, #8
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e002      	b.n	800886a <vListInsert+0x2c>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	429a      	cmp	r2, r3
 8008874:	d2f6      	bcs.n	8008864 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b004      	add	sp, #16
 80088a8:	bd80      	pop	{r7, pc}

080088aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6892      	ldr	r2, [r2, #8]
 80088c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6852      	ldr	r2, [r2, #4]
 80088ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d103      	bne.n	80088de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	1e5a      	subs	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
}
 80088f2:	0018      	movs	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b004      	add	sp, #16
 80088f8:	bd80      	pop	{r7, pc}

080088fa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <xQueueGenericReset+0x18>
 800890e:	b672      	cpsid	i
 8008910:	e7fe      	b.n	8008910 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008912:	f002 fa05 	bl	800ad20 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	434b      	muls	r3, r1
 8008924:	18d2      	adds	r2, r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	1e59      	subs	r1, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	434b      	muls	r3, r1
 8008948:	18d2      	adds	r2, r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2244      	movs	r2, #68	; 0x44
 8008952:	21ff      	movs	r1, #255	; 0xff
 8008954:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2245      	movs	r2, #69	; 0x45
 800895a:	21ff      	movs	r1, #255	; 0xff
 800895c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d013      	beq.n	8008994 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3310      	adds	r3, #16
 8008970:	0018      	movs	r0, r3
 8008972:	f001 f9e3 	bl	8009d3c <xTaskRemoveFromEventList>
 8008976:	1e03      	subs	r3, r0, #0
 8008978:	d00c      	beq.n	8008994 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800897a:	f002 f9c1 	bl	800ad00 <vPortYield>
 800897e:	e009      	b.n	8008994 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3310      	adds	r3, #16
 8008984:	0018      	movs	r0, r3
 8008986:	f7ff ff0f 	bl	80087a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3324      	adds	r3, #36	; 0x24
 800898e:	0018      	movs	r0, r3
 8008990:	f7ff ff0a 	bl	80087a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008994:	f002 f9d6 	bl	800ad44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008998:	2301      	movs	r3, #1
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	b004      	add	sp, #16
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089a2:	b590      	push	{r4, r7, lr}
 80089a4:	b089      	sub	sp, #36	; 0x24
 80089a6:	af02      	add	r7, sp, #8
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <xQueueGenericCreateStatic+0x18>
 80089b6:	b672      	cpsid	i
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <xQueueGenericCreateStatic+0x22>
 80089c0:	b672      	cpsid	i
 80089c2:	e7fe      	b.n	80089c2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <xQueueGenericCreateStatic+0x2e>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <xQueueGenericCreateStatic+0x32>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <xQueueGenericCreateStatic+0x34>
 80089d4:	2300      	movs	r3, #0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <xQueueGenericCreateStatic+0x3c>
 80089da:	b672      	cpsid	i
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <xQueueGenericCreateStatic+0x48>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <xQueueGenericCreateStatic+0x4c>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <xQueueGenericCreateStatic+0x4e>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <xQueueGenericCreateStatic+0x56>
 80089f4:	b672      	cpsid	i
 80089f6:	e7fe      	b.n	80089f6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089f8:	2350      	movs	r3, #80	; 0x50
 80089fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b50      	cmp	r3, #80	; 0x50
 8008a00:	d001      	beq.n	8008a06 <xQueueGenericCreateStatic+0x64>
 8008a02:	b672      	cpsid	i
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2246      	movs	r2, #70	; 0x46
 8008a14:	2101      	movs	r1, #1
 8008a16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a18:	2328      	movs	r3, #40	; 0x28
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	781c      	ldrb	r4, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	0023      	movs	r3, r4
 8008a2a:	f000 f83b 	bl	8008aa4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008a2e:	697b      	ldr	r3, [r7, #20]
	}
 8008a30:	0018      	movs	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b007      	add	sp, #28
 8008a36:	bd90      	pop	{r4, r7, pc}

08008a38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b08b      	sub	sp, #44	; 0x2c
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	1dfb      	adds	r3, r7, #7
 8008a44:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <xQueueGenericCreate+0x18>
 8008a4c:	b672      	cpsid	i
 8008a4e:	e7fe      	b.n	8008a4e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	e003      	b.n	8008a64 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	4353      	muls	r3, r2
 8008a62:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3350      	adds	r3, #80	; 0x50
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f002 f9f1 	bl	800ae50 <pvPortMalloc>
 8008a6e:	0003      	movs	r3, r0
 8008a70:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	3350      	adds	r3, #80	; 0x50
 8008a7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2246      	movs	r2, #70	; 0x46
 8008a82:	2100      	movs	r1, #0
 8008a84:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a86:	1dfb      	adds	r3, r7, #7
 8008a88:	781c      	ldrb	r4, [r3, #0]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	0023      	movs	r3, r4
 8008a96:	f000 f805 	bl	8008aa4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b009      	add	sp, #36	; 0x24
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	1cfb      	adds	r3, r7, #3
 8008ab4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e002      	b.n	8008aca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	0018      	movs	r0, r3
 8008adc:	f7ff ff0d 	bl	80088fa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	1cfa      	adds	r2, r7, #3
 8008ae4:	214c      	movs	r1, #76	; 0x4c
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b004      	add	sp, #16
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	f000 f89b 	bl	8008c54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008b1e:	46c0      	nop			; (mov r8, r8)
 8008b20:	46bd      	mov	sp, r7
 8008b22:	b002      	add	sp, #8
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	0002      	movs	r2, r0
 8008b2e:	1dfb      	adds	r3, r7, #7
 8008b30:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b32:	2301      	movs	r3, #1
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	2300      	movs	r3, #0
 8008b38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b3a:	1dfb      	adds	r3, r7, #7
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	6939      	ldr	r1, [r7, #16]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff ff78 	bl	8008a38 <xQueueGenericCreate>
 8008b48:	0003      	movs	r3, r0
 8008b4a:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7ff ffcf 	bl	8008af2 <prvInitialiseMutex>

		return pxNewQueue;
 8008b54:	68fb      	ldr	r3, [r7, #12]
	}
 8008b56:	0018      	movs	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b006      	add	sp, #24
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b088      	sub	sp, #32
 8008b62:	af02      	add	r7, sp, #8
 8008b64:	0002      	movs	r2, r0
 8008b66:	6039      	str	r1, [r7, #0]
 8008b68:	1dfb      	adds	r3, r7, #7
 8008b6a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	2300      	movs	r3, #0
 8008b72:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	6939      	ldr	r1, [r7, #16]
 8008b78:	6978      	ldr	r0, [r7, #20]
 8008b7a:	1dfb      	adds	r3, r7, #7
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	0013      	movs	r3, r2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7ff ff0d 	bl	80089a2 <xQueueGenericCreateStatic>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f7ff ffaf 	bl	8008af2 <prvInitialiseMutex>

		return pxNewQueue;
 8008b94:	68fb      	ldr	r3, [r7, #12]
	}
 8008b96:	0018      	movs	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b006      	add	sp, #24
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008b9e:	b590      	push	{r4, r7, lr}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <xQueueGiveMutexRecursive+0x16>
 8008bb0:	b672      	cpsid	i
 8008bb2:	e7fe      	b.n	8008bb2 <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	685c      	ldr	r4, [r3, #4]
 8008bb8:	f001 faaa 	bl	800a110 <xTaskGetCurrentTaskHandle>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d111      	bne.n	8008be6 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008bd4:	68b8      	ldr	r0, [r7, #8]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f000 f83a 	bl	8008c54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e001      	b.n	8008bea <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008bea:	68fb      	ldr	r3, [r7, #12]
	}
 8008bec:	0018      	movs	r0, r3
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	b005      	add	sp, #20
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <xQueueTakeMutexRecursive+0x18>
 8008c08:	b672      	cpsid	i
 8008c0a:	e7fe      	b.n	8008c0a <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685c      	ldr	r4, [r3, #4]
 8008c10:	f001 fa7e 	bl	800a110 <xTaskGetCurrentTaskHandle>
 8008c14:	0003      	movs	r3, r0
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d107      	bne.n	8008c2a <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008c24:	2301      	movs	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e00f      	b.n	8008c4a <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	0011      	movs	r1, r2
 8008c30:	0018      	movs	r0, r3
 8008c32:	f000 f9f9 	bl	8009028 <xQueueSemaphoreTake>
 8008c36:	0003      	movs	r3, r0
 8008c38:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b005      	add	sp, #20
 8008c52:	bd90      	pop	{r4, r7, pc}

08008c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	; 0x28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <xQueueGenericSend+0x20>
 8008c70:	b672      	cpsid	i
 8008c72:	e7fe      	b.n	8008c72 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d103      	bne.n	8008c82 <xQueueGenericSend+0x2e>
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <xQueueGenericSend+0x32>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <xQueueGenericSend+0x34>
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <xQueueGenericSend+0x3c>
 8008c8c:	b672      	cpsid	i
 8008c8e:	e7fe      	b.n	8008c8e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d103      	bne.n	8008c9e <xQueueGenericSend+0x4a>
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <xQueueGenericSend+0x4e>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <xQueueGenericSend+0x50>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <xQueueGenericSend+0x58>
 8008ca8:	b672      	cpsid	i
 8008caa:	e7fe      	b.n	8008caa <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cac:	f001 fa3e 	bl	800a12c <xTaskGetSchedulerState>
 8008cb0:	1e03      	subs	r3, r0, #0
 8008cb2:	d102      	bne.n	8008cba <xQueueGenericSend+0x66>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <xQueueGenericSend+0x6a>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <xQueueGenericSend+0x6c>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <xQueueGenericSend+0x74>
 8008cc4:	b672      	cpsid	i
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cc8:	f002 f82a 	bl	800ad20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d302      	bcc.n	8008cde <xQueueGenericSend+0x8a>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d11e      	bne.n	8008d1c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f000 fa8f 	bl	8009208 <prvCopyDataToQueue>
 8008cea:	0003      	movs	r3, r0
 8008cec:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	3324      	adds	r3, #36	; 0x24
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f001 f81e 	bl	8009d3c <xTaskRemoveFromEventList>
 8008d00:	1e03      	subs	r3, r0, #0
 8008d02:	d007      	beq.n	8008d14 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d04:	f001 fffc 	bl	800ad00 <vPortYield>
 8008d08:	e004      	b.n	8008d14 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d10:	f001 fff6 	bl	800ad00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d14:	f002 f816 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e05b      	b.n	8008dd4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d22:	f002 f80f 	bl	800ad44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e054      	b.n	8008dd4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d30:	2314      	movs	r3, #20
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	0018      	movs	r0, r3
 8008d36:	f001 f8af 	bl	8009e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d3e:	f002 f801 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d42:	f000 fdcd 	bl	80098e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d46:	f001 ffeb 	bl	800ad20 <vPortEnterCritical>
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	2244      	movs	r2, #68	; 0x44
 8008d4e:	5c9b      	ldrb	r3, [r3, r2]
 8008d50:	b25b      	sxtb	r3, r3
 8008d52:	3301      	adds	r3, #1
 8008d54:	d103      	bne.n	8008d5e <xQueueGenericSend+0x10a>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	2244      	movs	r2, #68	; 0x44
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	5499      	strb	r1, [r3, r2]
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	2245      	movs	r2, #69	; 0x45
 8008d62:	5c9b      	ldrb	r3, [r3, r2]
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	3301      	adds	r3, #1
 8008d68:	d103      	bne.n	8008d72 <xQueueGenericSend+0x11e>
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	2245      	movs	r2, #69	; 0x45
 8008d6e:	2100      	movs	r1, #0
 8008d70:	5499      	strb	r1, [r3, r2]
 8008d72:	f001 ffe7 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d76:	1d3a      	adds	r2, r7, #4
 8008d78:	2314      	movs	r3, #20
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	0011      	movs	r1, r2
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f001 f89e 	bl	8009ec0 <xTaskCheckForTimeOut>
 8008d84:	1e03      	subs	r3, r0, #0
 8008d86:	d11e      	bne.n	8008dc6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 fb41 	bl	8009412 <prvIsQueueFull>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d011      	beq.n	8008db8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	3310      	adds	r3, #16
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 ff5b 	bl	8009c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	0018      	movs	r0, r3
 8008da6:	f000 fac0 	bl	800932a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008daa:	f000 fda5 	bl	80098f8 <xTaskResumeAll>
 8008dae:	1e03      	subs	r3, r0, #0
 8008db0:	d18a      	bne.n	8008cc8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008db2:	f001 ffa5 	bl	800ad00 <vPortYield>
 8008db6:	e787      	b.n	8008cc8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f000 fab5 	bl	800932a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc0:	f000 fd9a 	bl	80098f8 <xTaskResumeAll>
 8008dc4:	e780      	b.n	8008cc8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f000 faae 	bl	800932a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dce:	f000 fd93 	bl	80098f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dd2:	2300      	movs	r3, #0
		}
	}
}
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b00a      	add	sp, #40	; 0x28
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b089      	sub	sp, #36	; 0x24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <xQueueGenericSendFromISR+0x1c>
 8008df4:	b672      	cpsid	i
 8008df6:	e7fe      	b.n	8008df6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <xQueueGenericSendFromISR+0x2a>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <xQueueGenericSendFromISR+0x2e>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <xQueueGenericSendFromISR+0x30>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <xQueueGenericSendFromISR+0x38>
 8008e10:	b672      	cpsid	i
 8008e12:	e7fe      	b.n	8008e12 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d103      	bne.n	8008e22 <xQueueGenericSendFromISR+0x46>
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <xQueueGenericSendFromISR+0x4a>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <xQueueGenericSendFromISR+0x4c>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <xQueueGenericSendFromISR+0x54>
 8008e2c:	b672      	cpsid	i
 8008e2e:	e7fe      	b.n	8008e2e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e30:	f001 ffa0 	bl	800ad74 <ulSetInterruptMaskFromISR>
 8008e34:	0003      	movs	r3, r0
 8008e36:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d302      	bcc.n	8008e4a <xQueueGenericSendFromISR+0x6e>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d12e      	bne.n	8008ea8 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e4a:	2413      	movs	r4, #19
 8008e4c:	193b      	adds	r3, r7, r4
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	2145      	movs	r1, #69	; 0x45
 8008e52:	5c52      	ldrb	r2, [r2, r1]
 8008e54:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f000 f9d3 	bl	8009208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e62:	193b      	adds	r3, r7, r4
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	3301      	adds	r3, #1
 8008e6a:	d111      	bne.n	8008e90 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d016      	beq.n	8008ea2 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	3324      	adds	r3, #36	; 0x24
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f000 ff5f 	bl	8009d3c <xTaskRemoveFromEventList>
 8008e7e:	1e03      	subs	r3, r0, #0
 8008e80:	d00f      	beq.n	8008ea2 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00c      	beq.n	8008ea2 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e008      	b.n	8008ea2 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e90:	2313      	movs	r3, #19
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	b259      	sxtb	r1, r3
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2245      	movs	r2, #69	; 0x45
 8008ea0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
		{
 8008ea6:	e001      	b.n	8008eac <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f001 ff66 	bl	800ad80 <vClearInterruptMaskFromISR>

	return xReturn;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
}
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	b009      	add	sp, #36	; 0x24
 8008ebc:	bd90      	pop	{r4, r7, pc}

08008ebe <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b08a      	sub	sp, #40	; 0x28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <xQueueReceive+0x1e>
 8008ed8:	b672      	cpsid	i
 8008eda:	e7fe      	b.n	8008eda <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <xQueueReceive+0x2c>
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <xQueueReceive+0x30>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <xQueueReceive+0x32>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <xQueueReceive+0x3a>
 8008ef4:	b672      	cpsid	i
 8008ef6:	e7fe      	b.n	8008ef6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef8:	f001 f918 	bl	800a12c <xTaskGetSchedulerState>
 8008efc:	1e03      	subs	r3, r0, #0
 8008efe:	d102      	bne.n	8008f06 <xQueueReceive+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <xQueueReceive+0x4c>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueReceive+0x4e>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <xQueueReceive+0x56>
 8008f10:	b672      	cpsid	i
 8008f12:	e7fe      	b.n	8008f12 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f14:	f001 ff04 	bl	800ad20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01a      	beq.n	8008f5a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	0011      	movs	r1, r2
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f000 f9d7 	bl	80092de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	1e5a      	subs	r2, r3, #1
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	3310      	adds	r3, #16
 8008f44:	0018      	movs	r0, r3
 8008f46:	f000 fef9 	bl	8009d3c <xTaskRemoveFromEventList>
 8008f4a:	1e03      	subs	r3, r0, #0
 8008f4c:	d001      	beq.n	8008f52 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f4e:	f001 fed7 	bl	800ad00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f52:	f001 fef7 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e062      	b.n	8009020 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f60:	f001 fef0 	bl	800ad44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e05b      	b.n	8009020 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f6e:	2314      	movs	r3, #20
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 ff90 	bl	8009e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f7c:	f001 fee2 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f80:	f000 fcae 	bl	80098e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f84:	f001 fecc 	bl	800ad20 <vPortEnterCritical>
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2244      	movs	r2, #68	; 0x44
 8008f8c:	5c9b      	ldrb	r3, [r3, r2]
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	3301      	adds	r3, #1
 8008f92:	d103      	bne.n	8008f9c <xQueueReceive+0xde>
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	2244      	movs	r2, #68	; 0x44
 8008f98:	2100      	movs	r1, #0
 8008f9a:	5499      	strb	r1, [r3, r2]
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2245      	movs	r2, #69	; 0x45
 8008fa0:	5c9b      	ldrb	r3, [r3, r2]
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	d103      	bne.n	8008fb0 <xQueueReceive+0xf2>
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	2245      	movs	r2, #69	; 0x45
 8008fac:	2100      	movs	r1, #0
 8008fae:	5499      	strb	r1, [r3, r2]
 8008fb0:	f001 fec8 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fb4:	1d3a      	adds	r2, r7, #4
 8008fb6:	2314      	movs	r3, #20
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	0011      	movs	r1, r2
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 ff7f 	bl	8009ec0 <xTaskCheckForTimeOut>
 8008fc2:	1e03      	subs	r3, r0, #0
 8008fc4:	d11e      	bne.n	8009004 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f000 fa0c 	bl	80093e6 <prvIsQueueEmpty>
 8008fce:	1e03      	subs	r3, r0, #0
 8008fd0:	d011      	beq.n	8008ff6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	3324      	adds	r3, #36	; 0x24
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	0011      	movs	r1, r2
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f000 fe3c 	bl	8009c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f000 f9a1 	bl	800932a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fe8:	f000 fc86 	bl	80098f8 <xTaskResumeAll>
 8008fec:	1e03      	subs	r3, r0, #0
 8008fee:	d191      	bne.n	8008f14 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008ff0:	f001 fe86 	bl	800ad00 <vPortYield>
 8008ff4:	e78e      	b.n	8008f14 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f000 f996 	bl	800932a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ffe:	f000 fc7b 	bl	80098f8 <xTaskResumeAll>
 8009002:	e787      	b.n	8008f14 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	0018      	movs	r0, r3
 8009008:	f000 f98f 	bl	800932a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800900c:	f000 fc74 	bl	80098f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	0018      	movs	r0, r3
 8009014:	f000 f9e7 	bl	80093e6 <prvIsQueueEmpty>
 8009018:	1e03      	subs	r3, r0, #0
 800901a:	d100      	bne.n	800901e <xQueueReceive+0x160>
 800901c:	e77a      	b.n	8008f14 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800901e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b00a      	add	sp, #40	; 0x28
 8009026:	bd80      	pop	{r7, pc}

08009028 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	; 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <xQueueSemaphoreTake+0x20>
 8009044:	b672      	cpsid	i
 8009046:	e7fe      	b.n	8009046 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <xQueueSemaphoreTake+0x2c>
 8009050:	b672      	cpsid	i
 8009052:	e7fe      	b.n	8009052 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009054:	f001 f86a 	bl	800a12c <xTaskGetSchedulerState>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d102      	bne.n	8009062 <xQueueSemaphoreTake+0x3a>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <xQueueSemaphoreTake+0x3e>
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <xQueueSemaphoreTake+0x40>
 8009066:	2300      	movs	r3, #0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <xQueueSemaphoreTake+0x48>
 800906c:	b672      	cpsid	i
 800906e:	e7fe      	b.n	800906e <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009070:	f001 fe56 	bl	800ad20 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01d      	beq.n	80090bc <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	1e5a      	subs	r2, r3, #1
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009090:	f001 f9bc 	bl	800a40c <pvTaskIncrementMutexHeldCount>
 8009094:	0002      	movs	r2, r0
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3310      	adds	r3, #16
 80090a6:	0018      	movs	r0, r3
 80090a8:	f000 fe48 	bl	8009d3c <xTaskRemoveFromEventList>
 80090ac:	1e03      	subs	r3, r0, #0
 80090ae:	d001      	beq.n	80090b4 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090b0:	f001 fe26 	bl	800ad00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090b4:	f001 fe46 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e08b      	b.n	80091d4 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d108      	bne.n	80090d4 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <xQueueSemaphoreTake+0xa4>
 80090c8:	b672      	cpsid	i
 80090ca:	e7fe      	b.n	80090ca <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090cc:	f001 fe3a 	bl	800ad44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e07f      	b.n	80091d4 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d106      	bne.n	80090e8 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090da:	230c      	movs	r3, #12
 80090dc:	18fb      	adds	r3, r7, r3
 80090de:	0018      	movs	r0, r3
 80090e0:	f000 feda 	bl	8009e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090e8:	f001 fe2c 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090ec:	f000 fbf8 	bl	80098e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090f0:	f001 fe16 	bl	800ad20 <vPortEnterCritical>
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	2244      	movs	r2, #68	; 0x44
 80090f8:	5c9b      	ldrb	r3, [r3, r2]
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	3301      	adds	r3, #1
 80090fe:	d103      	bne.n	8009108 <xQueueSemaphoreTake+0xe0>
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	2244      	movs	r2, #68	; 0x44
 8009104:	2100      	movs	r1, #0
 8009106:	5499      	strb	r1, [r3, r2]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2245      	movs	r2, #69	; 0x45
 800910c:	5c9b      	ldrb	r3, [r3, r2]
 800910e:	b25b      	sxtb	r3, r3
 8009110:	3301      	adds	r3, #1
 8009112:	d103      	bne.n	800911c <xQueueSemaphoreTake+0xf4>
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2245      	movs	r2, #69	; 0x45
 8009118:	2100      	movs	r1, #0
 800911a:	5499      	strb	r1, [r3, r2]
 800911c:	f001 fe12 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009120:	003a      	movs	r2, r7
 8009122:	230c      	movs	r3, #12
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	0011      	movs	r1, r2
 8009128:	0018      	movs	r0, r3
 800912a:	f000 fec9 	bl	8009ec0 <xTaskCheckForTimeOut>
 800912e:	1e03      	subs	r3, r0, #0
 8009130:	d12e      	bne.n	8009190 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	0018      	movs	r0, r3
 8009136:	f000 f956 	bl	80093e6 <prvIsQueueEmpty>
 800913a:	1e03      	subs	r3, r0, #0
 800913c:	d021      	beq.n	8009182 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8009146:	f001 fdeb 	bl	800ad20 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	0018      	movs	r0, r3
 8009150:	f001 f808 	bl	800a164 <xTaskPriorityInherit>
 8009154:	0003      	movs	r3, r0
 8009156:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8009158:	f001 fdf4 	bl	800ad44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	3324      	adds	r3, #36	; 0x24
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	0011      	movs	r1, r2
 8009164:	0018      	movs	r0, r3
 8009166:	f000 fd77 	bl	8009c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f8dc 	bl	800932a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009172:	f000 fbc1 	bl	80098f8 <xTaskResumeAll>
 8009176:	1e03      	subs	r3, r0, #0
 8009178:	d000      	beq.n	800917c <xQueueSemaphoreTake+0x154>
 800917a:	e779      	b.n	8009070 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800917c:	f001 fdc0 	bl	800ad00 <vPortYield>
 8009180:	e776      	b.n	8009070 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	0018      	movs	r0, r3
 8009186:	f000 f8d0 	bl	800932a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800918a:	f000 fbb5 	bl	80098f8 <xTaskResumeAll>
 800918e:	e76f      	b.n	8009070 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	0018      	movs	r0, r3
 8009194:	f000 f8c9 	bl	800932a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009198:	f000 fbae 	bl	80098f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 f921 	bl	80093e6 <prvIsQueueEmpty>
 80091a4:	1e03      	subs	r3, r0, #0
 80091a6:	d100      	bne.n	80091aa <xQueueSemaphoreTake+0x182>
 80091a8:	e762      	b.n	8009070 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80091b0:	f001 fdb6 	bl	800ad20 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	0018      	movs	r0, r3
 80091b8:	f000 f810 	bl	80091dc <prvGetDisinheritPriorityAfterTimeout>
 80091bc:	0003      	movs	r3, r0
 80091be:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	0011      	movs	r1, r2
 80091c8:	0018      	movs	r0, r3
 80091ca:	f001 f895 	bl	800a2f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091ce:	f001 fdb9 	bl	800ad44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80091d4:	0018      	movs	r0, r3
 80091d6:	46bd      	mov	sp, r7
 80091d8:	b00a      	add	sp, #40	; 0x28
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2238      	movs	r2, #56	; 0x38
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e001      	b.n	80091fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009200:	0018      	movs	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	b004      	add	sp, #16
 8009206:	bd80      	pop	{r7, pc}

08009208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d14e      	bne.n	80092cc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	0018      	movs	r0, r3
 8009234:	f001 f804 	bl	800a240 <xTaskPriorityDisinherit>
 8009238:	0003      	movs	r3, r0
 800923a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	605a      	str	r2, [r3, #4]
 8009242:	e043      	b.n	80092cc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d119      	bne.n	800927e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6898      	ldr	r0, [r3, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	0019      	movs	r1, r3
 8009256:	f002 f82e 	bl	800b2b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	18d2      	adds	r2, r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d32b      	bcc.n	80092cc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	e026      	b.n	80092cc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	68d8      	ldr	r0, [r3, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	0019      	movs	r1, r3
 800928a:	f002 f814 	bl	800b2b6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	425b      	negs	r3, r3
 8009298:	18d2      	adds	r2, r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d207      	bcs.n	80092ba <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	425b      	negs	r3, r3
 80092b4:	18d2      	adds	r2, r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d105      	bne.n	80092cc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092d4:	697b      	ldr	r3, [r7, #20]
}
 80092d6:	0018      	movs	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	b006      	add	sp, #24
 80092dc:	bd80      	pop	{r7, pc}

080092de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d018      	beq.n	8009322 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	18d2      	adds	r2, r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d303      	bcc.n	8009312 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68d9      	ldr	r1, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	0018      	movs	r0, r3
 800931e:	f001 ffca 	bl	800b2b6 <memcpy>
	}
}
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	46bd      	mov	sp, r7
 8009326:	b002      	add	sp, #8
 8009328:	bd80      	pop	{r7, pc}

0800932a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009332:	f001 fcf5 	bl	800ad20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009336:	230f      	movs	r3, #15
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	2145      	movs	r1, #69	; 0x45
 800933e:	5c52      	ldrb	r2, [r2, r1]
 8009340:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009342:	e013      	b.n	800936c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d016      	beq.n	800937a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	0018      	movs	r0, r3
 8009352:	f000 fcf3 	bl	8009d3c <xTaskRemoveFromEventList>
 8009356:	1e03      	subs	r3, r0, #0
 8009358:	d001      	beq.n	800935e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800935a:	f000 fe01 	bl	8009f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800935e:	210f      	movs	r1, #15
 8009360:	187b      	adds	r3, r7, r1
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	187b      	adds	r3, r7, r1
 800936a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800936c:	230f      	movs	r3, #15
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	b25b      	sxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	dce5      	bgt.n	8009344 <prvUnlockQueue+0x1a>
 8009378:	e000      	b.n	800937c <prvUnlockQueue+0x52>
					break;
 800937a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2245      	movs	r2, #69	; 0x45
 8009380:	21ff      	movs	r1, #255	; 0xff
 8009382:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009384:	f001 fcde 	bl	800ad44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009388:	f001 fcca 	bl	800ad20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800938c:	230e      	movs	r3, #14
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	2144      	movs	r1, #68	; 0x44
 8009394:	5c52      	ldrb	r2, [r2, r1]
 8009396:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009398:	e013      	b.n	80093c2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d016      	beq.n	80093d0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3310      	adds	r3, #16
 80093a6:	0018      	movs	r0, r3
 80093a8:	f000 fcc8 	bl	8009d3c <xTaskRemoveFromEventList>
 80093ac:	1e03      	subs	r3, r0, #0
 80093ae:	d001      	beq.n	80093b4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80093b0:	f000 fdd6 	bl	8009f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093b4:	210e      	movs	r1, #14
 80093b6:	187b      	adds	r3, r7, r1
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093c2:	230e      	movs	r3, #14
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dce5      	bgt.n	800939a <prvUnlockQueue+0x70>
 80093ce:	e000      	b.n	80093d2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80093d0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2244      	movs	r2, #68	; 0x44
 80093d6:	21ff      	movs	r1, #255	; 0xff
 80093d8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80093da:	f001 fcb3 	bl	800ad44 <vPortExitCritical>
}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b004      	add	sp, #16
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093ee:	f001 fc97 	bl	800ad20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093fa:	2301      	movs	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e001      	b.n	8009404 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009404:	f001 fc9e 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	0018      	movs	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	b004      	add	sp, #16
 8009410:	bd80      	pop	{r7, pc}

08009412 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800941a:	f001 fc81 	bl	800ad20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009426:	429a      	cmp	r2, r3
 8009428:	d102      	bne.n	8009430 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e001      	b.n	8009434 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009434:	f001 fc86 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 8009438:	68fb      	ldr	r3, [r7, #12]
}
 800943a:	0018      	movs	r0, r3
 800943c:	46bd      	mov	sp, r7
 800943e:	b004      	add	sp, #16
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	e015      	b.n	8009480 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009454:	4b0e      	ldr	r3, [pc, #56]	; (8009490 <vQueueAddToRegistry+0x4c>)
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	00d2      	lsls	r2, r2, #3
 800945a:	58d3      	ldr	r3, [r2, r3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10c      	bne.n	800947a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <vQueueAddToRegistry+0x4c>)
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	00d2      	lsls	r2, r2, #3
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800946a:	4a09      	ldr	r2, [pc, #36]	; (8009490 <vQueueAddToRegistry+0x4c>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	18d3      	adds	r3, r2, r3
 8009472:	3304      	adds	r3, #4
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009478:	e006      	b.n	8009488 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3301      	adds	r3, #1
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b07      	cmp	r3, #7
 8009484:	d9e6      	bls.n	8009454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	46c0      	nop			; (mov r8, r8)
 800948a:	46bd      	mov	sp, r7
 800948c:	b004      	add	sp, #16
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200023d0 	.word	0x200023d0

08009494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094a4:	f001 fc3c 	bl	800ad20 <vPortEnterCritical>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2244      	movs	r2, #68	; 0x44
 80094ac:	5c9b      	ldrb	r3, [r3, r2]
 80094ae:	b25b      	sxtb	r3, r3
 80094b0:	3301      	adds	r3, #1
 80094b2:	d103      	bne.n	80094bc <vQueueWaitForMessageRestricted+0x28>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2244      	movs	r2, #68	; 0x44
 80094b8:	2100      	movs	r1, #0
 80094ba:	5499      	strb	r1, [r3, r2]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2245      	movs	r2, #69	; 0x45
 80094c0:	5c9b      	ldrb	r3, [r3, r2]
 80094c2:	b25b      	sxtb	r3, r3
 80094c4:	3301      	adds	r3, #1
 80094c6:	d103      	bne.n	80094d0 <vQueueWaitForMessageRestricted+0x3c>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2245      	movs	r2, #69	; 0x45
 80094cc:	2100      	movs	r1, #0
 80094ce:	5499      	strb	r1, [r3, r2]
 80094d0:	f001 fc38 	bl	800ad44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d106      	bne.n	80094ea <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	0018      	movs	r0, r3
 80094e6:	f000 fc03 	bl	8009cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	0018      	movs	r0, r3
 80094ee:	f7ff ff1c 	bl	800932a <prvUnlockQueue>
	}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	46bd      	mov	sp, r7
 80094f6:	b006      	add	sp, #24
 80094f8:	bd80      	pop	{r7, pc}

080094fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094fa:	b590      	push	{r4, r7, lr}
 80094fc:	b08d      	sub	sp, #52	; 0x34
 80094fe:	af04      	add	r7, sp, #16
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <xTaskCreateStatic+0x18>
 800950e:	b672      	cpsid	i
 8009510:	e7fe      	b.n	8009510 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <xTaskCreateStatic+0x22>
 8009518:	b672      	cpsid	i
 800951a:	e7fe      	b.n	800951a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800951c:	235c      	movs	r3, #92	; 0x5c
 800951e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2b5c      	cmp	r3, #92	; 0x5c
 8009524:	d001      	beq.n	800952a <xTaskCreateStatic+0x30>
 8009526:	b672      	cpsid	i
 8009528:	e7fe      	b.n	8009528 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d020      	beq.n	8009572 <xTaskCreateStatic+0x78>
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01d      	beq.n	8009572 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800953e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2259      	movs	r2, #89	; 0x59
 8009544:	2102      	movs	r1, #2
 8009546:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009548:	683c      	ldr	r4, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68b9      	ldr	r1, [r7, #8]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	2300      	movs	r3, #0
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	2318      	movs	r3, #24
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	0023      	movs	r3, r4
 8009564:	f000 f858 	bl	8009618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	0018      	movs	r0, r3
 800956c:	f000 f8d6 	bl	800971c <prvAddNewTaskToReadyList>
 8009570:	e001      	b.n	8009576 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009576:	69bb      	ldr	r3, [r7, #24]
	}
 8009578:	0018      	movs	r0, r3
 800957a:	46bd      	mov	sp, r7
 800957c:	b009      	add	sp, #36	; 0x24
 800957e:	bd90      	pop	{r4, r7, pc}

08009580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009580:	b590      	push	{r4, r7, lr}
 8009582:	b08d      	sub	sp, #52	; 0x34
 8009584:	af04      	add	r7, sp, #16
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	1dbb      	adds	r3, r7, #6
 800958e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009590:	1dbb      	adds	r3, r7, #6
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	0018      	movs	r0, r3
 8009598:	f001 fc5a 	bl	800ae50 <pvPortMalloc>
 800959c:	0003      	movs	r3, r0
 800959e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d010      	beq.n	80095c8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80095a6:	205c      	movs	r0, #92	; 0x5c
 80095a8:	f001 fc52 	bl	800ae50 <pvPortMalloc>
 80095ac:	0003      	movs	r3, r0
 80095ae:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
 80095bc:	e006      	b.n	80095cc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	0018      	movs	r0, r3
 80095c2:	f001 fceb 	bl	800af9c <vPortFree>
 80095c6:	e001      	b.n	80095cc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01a      	beq.n	8009608 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2259      	movs	r2, #89	; 0x59
 80095d6:	2100      	movs	r1, #0
 80095d8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095da:	1dbb      	adds	r3, r7, #6
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	683c      	ldr	r4, [r7, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	2300      	movs	r3, #0
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	9302      	str	r3, [sp, #8]
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	0023      	movs	r3, r4
 80095f6:	f000 f80f 	bl	8009618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 f88d 	bl	800971c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009602:	2301      	movs	r3, #1
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	e002      	b.n	800960e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009608:	2301      	movs	r3, #1
 800960a:	425b      	negs	r3, r3
 800960c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800960e:	69bb      	ldr	r3, [r7, #24]
	}
 8009610:	0018      	movs	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	b009      	add	sp, #36	; 0x24
 8009616:	bd90      	pop	{r4, r7, pc}

08009618 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	001a      	movs	r2, r3
 8009630:	21a5      	movs	r1, #165	; 0xa5
 8009632:	f001 fe49 	bl	800b2c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4936      	ldr	r1, [pc, #216]	; (8009718 <prvInitialiseNewTask+0x100>)
 800963e:	468c      	mov	ip, r1
 8009640:	4463      	add	r3, ip
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	2207      	movs	r2, #7
 800964c:	4393      	bics	r3, r2
 800964e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2207      	movs	r2, #7
 8009654:	4013      	ands	r3, r2
 8009656:	d001      	beq.n	800965c <prvInitialiseNewTask+0x44>
 8009658:	b672      	cpsid	i
 800965a:	e7fe      	b.n	800965a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e013      	b.n	800968a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	18d3      	adds	r3, r2, r3
 8009668:	7818      	ldrb	r0, [r3, #0]
 800966a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800966c:	2134      	movs	r1, #52	; 0x34
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	18d3      	adds	r3, r2, r3
 8009672:	185b      	adds	r3, r3, r1
 8009674:	1c02      	adds	r2, r0, #0
 8009676:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	18d3      	adds	r3, r2, r3
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	3301      	adds	r3, #1
 8009688:	617b      	str	r3, [r7, #20]
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b0f      	cmp	r3, #15
 800968e:	d9e8      	bls.n	8009662 <prvInitialiseNewTask+0x4a>
 8009690:	e000      	b.n	8009694 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009692:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	2243      	movs	r2, #67	; 0x43
 8009698:	2100      	movs	r1, #0
 800969a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	2b37      	cmp	r3, #55	; 0x37
 80096a0:	d901      	bls.n	80096a6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096a2:	2337      	movs	r3, #55	; 0x37
 80096a4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	6a3a      	ldr	r2, [r7, #32]
 80096aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	6a3a      	ldr	r2, [r7, #32]
 80096b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	2200      	movs	r2, #0
 80096b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	3304      	adds	r3, #4
 80096bc:	0018      	movs	r0, r3
 80096be:	f7ff f891 	bl	80087e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	3318      	adds	r3, #24
 80096c6:	0018      	movs	r0, r3
 80096c8:	f7ff f88c 	bl	80087e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	2238      	movs	r2, #56	; 0x38
 80096d6:	1ad2      	subs	r2, r2, r3
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	2200      	movs	r2, #0
 80096e6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	2258      	movs	r2, #88	; 0x58
 80096ec:	2100      	movs	r1, #0
 80096ee:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f001 fa74 	bl	800abe4 <pxPortInitialiseStack>
 80096fc:	0002      	movs	r2, r0
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	46bd      	mov	sp, r7
 8009712:	b006      	add	sp, #24
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	3fffffff 	.word	0x3fffffff

0800971c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009724:	f001 fafc 	bl	800ad20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009728:	4b2a      	ldr	r3, [pc, #168]	; (80097d4 <prvAddNewTaskToReadyList+0xb8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	4b29      	ldr	r3, [pc, #164]	; (80097d4 <prvAddNewTaskToReadyList+0xb8>)
 8009730:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009732:	4b29      	ldr	r3, [pc, #164]	; (80097d8 <prvAddNewTaskToReadyList+0xbc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800973a:	4b27      	ldr	r3, [pc, #156]	; (80097d8 <prvAddNewTaskToReadyList+0xbc>)
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009740:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <prvAddNewTaskToReadyList+0xb8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d110      	bne.n	800976a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009748:	f000 fc24 	bl	8009f94 <prvInitialiseTaskLists>
 800974c:	e00d      	b.n	800976a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800974e:	4b23      	ldr	r3, [pc, #140]	; (80097dc <prvAddNewTaskToReadyList+0xc0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009756:	4b20      	ldr	r3, [pc, #128]	; (80097d8 <prvAddNewTaskToReadyList+0xbc>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	429a      	cmp	r2, r3
 8009762:	d802      	bhi.n	800976a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009764:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <prvAddNewTaskToReadyList+0xbc>)
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800976a:	4b1d      	ldr	r3, [pc, #116]	; (80097e0 <prvAddNewTaskToReadyList+0xc4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	4b1b      	ldr	r3, [pc, #108]	; (80097e0 <prvAddNewTaskToReadyList+0xc4>)
 8009772:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009774:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <prvAddNewTaskToReadyList+0xc4>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <prvAddNewTaskToReadyList+0xc8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d903      	bls.n	8009790 <prvAddNewTaskToReadyList+0x74>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <prvAddNewTaskToReadyList+0xc8>)
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	0013      	movs	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	189b      	adds	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4a12      	ldr	r2, [pc, #72]	; (80097e8 <prvAddNewTaskToReadyList+0xcc>)
 800979e:	189a      	adds	r2, r3, r2
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3304      	adds	r3, #4
 80097a4:	0019      	movs	r1, r3
 80097a6:	0010      	movs	r0, r2
 80097a8:	f7ff f827 	bl	80087fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097ac:	f001 faca 	bl	800ad44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <prvAddNewTaskToReadyList+0xc0>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097b8:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <prvAddNewTaskToReadyList+0xbc>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d201      	bcs.n	80097ca <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097c6:	f001 fa9b 	bl	800ad00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	46bd      	mov	sp, r7
 80097ce:	b002      	add	sp, #8
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	20001134 	.word	0x20001134
 80097d8:	20000c60 	.word	0x20000c60
 80097dc:	20001140 	.word	0x20001140
 80097e0:	20001150 	.word	0x20001150
 80097e4:	2000113c 	.word	0x2000113c
 80097e8:	20000c64 	.word	0x20000c64

080097ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d010      	beq.n	8009820 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097fe:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <vTaskDelay+0x48>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <vTaskDelay+0x1e>
 8009806:	b672      	cpsid	i
 8009808:	e7fe      	b.n	8009808 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800980a:	f000 f869 	bl	80098e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2100      	movs	r1, #0
 8009812:	0018      	movs	r0, r3
 8009814:	f000 fe0c 	bl	800a430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009818:	f000 f86e 	bl	80098f8 <xTaskResumeAll>
 800981c:	0003      	movs	r3, r0
 800981e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8009826:	f001 fa6b 	bl	800ad00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b004      	add	sp, #16
 8009830:	bd80      	pop	{r7, pc}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	2000115c 	.word	0x2000115c

08009838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b089      	sub	sp, #36	; 0x24
 800983c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009846:	003a      	movs	r2, r7
 8009848:	1d39      	adds	r1, r7, #4
 800984a:	2308      	movs	r3, #8
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	0018      	movs	r0, r3
 8009850:	f7fe fdd6 	bl	8008400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009854:	683c      	ldr	r4, [r7, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	491b      	ldr	r1, [pc, #108]	; (80098c8 <vTaskStartScheduler+0x90>)
 800985c:	481b      	ldr	r0, [pc, #108]	; (80098cc <vTaskStartScheduler+0x94>)
 800985e:	9202      	str	r2, [sp, #8]
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	2300      	movs	r3, #0
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2300      	movs	r3, #0
 8009868:	0022      	movs	r2, r4
 800986a:	f7ff fe46 	bl	80094fa <xTaskCreateStatic>
 800986e:	0002      	movs	r2, r0
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <vTaskStartScheduler+0x98>)
 8009872:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009874:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <vTaskStartScheduler+0x98>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800987c:	2301      	movs	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e001      	b.n	8009886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d103      	bne.n	8009894 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800988c:	f000 fe24 	bl	800a4d8 <xTimerCreateTimerTask>
 8009890:	0003      	movs	r3, r0
 8009892:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d10d      	bne.n	80098b6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800989a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <vTaskStartScheduler+0x9c>)
 800989e:	2201      	movs	r2, #1
 80098a0:	4252      	negs	r2, r2
 80098a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <vTaskStartScheduler+0xa0>)
 80098a6:	2201      	movs	r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80098aa:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <vTaskStartScheduler+0xa4>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098b0:	f001 fa02 	bl	800acb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098b4:	e004      	b.n	80098c0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	d101      	bne.n	80098c0 <vTaskStartScheduler+0x88>
 80098bc:	b672      	cpsid	i
 80098be:	e7fe      	b.n	80098be <vTaskStartScheduler+0x86>
}
 80098c0:	46c0      	nop			; (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b005      	add	sp, #20
 80098c6:	bd90      	pop	{r4, r7, pc}
 80098c8:	0800caf0 	.word	0x0800caf0
 80098cc:	08009f75 	.word	0x08009f75
 80098d0:	20001158 	.word	0x20001158
 80098d4:	20001154 	.word	0x20001154
 80098d8:	20001140 	.word	0x20001140
 80098dc:	20001138 	.word	0x20001138

080098e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80098e4:	4b03      	ldr	r3, [pc, #12]	; (80098f4 <vTaskSuspendAll+0x14>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <vTaskSuspendAll+0x14>)
 80098ec:	601a      	str	r2, [r3, #0]
}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	2000115c 	.word	0x2000115c

080098f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009906:	4b3a      	ldr	r3, [pc, #232]	; (80099f0 <xTaskResumeAll+0xf8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <xTaskResumeAll+0x1a>
 800990e:	b672      	cpsid	i
 8009910:	e7fe      	b.n	8009910 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009912:	f001 fa05 	bl	800ad20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009916:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <xTaskResumeAll+0xf8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	1e5a      	subs	r2, r3, #1
 800991c:	4b34      	ldr	r3, [pc, #208]	; (80099f0 <xTaskResumeAll+0xf8>)
 800991e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009920:	4b33      	ldr	r3, [pc, #204]	; (80099f0 <xTaskResumeAll+0xf8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d15b      	bne.n	80099e0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009928:	4b32      	ldr	r3, [pc, #200]	; (80099f4 <xTaskResumeAll+0xfc>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d057      	beq.n	80099e0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009930:	e02f      	b.n	8009992 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009932:	4b31      	ldr	r3, [pc, #196]	; (80099f8 <xTaskResumeAll+0x100>)
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3318      	adds	r3, #24
 800993e:	0018      	movs	r0, r3
 8009940:	f7fe ffb3 	bl	80088aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3304      	adds	r3, #4
 8009948:	0018      	movs	r0, r3
 800994a:	f7fe ffae 	bl	80088aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009952:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <xTaskResumeAll+0x104>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <xTaskResumeAll+0x6a>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	4b27      	ldr	r3, [pc, #156]	; (80099fc <xTaskResumeAll+0x104>)
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009966:	0013      	movs	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	189b      	adds	r3, r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4a24      	ldr	r2, [pc, #144]	; (8009a00 <xTaskResumeAll+0x108>)
 8009970:	189a      	adds	r2, r3, r2
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3304      	adds	r3, #4
 8009976:	0019      	movs	r1, r3
 8009978:	0010      	movs	r0, r2
 800997a:	f7fe ff3e 	bl	80087fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009982:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <xTaskResumeAll+0x10c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	429a      	cmp	r2, r3
 800998a:	d302      	bcc.n	8009992 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800998c:	4b1e      	ldr	r3, [pc, #120]	; (8009a08 <xTaskResumeAll+0x110>)
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009992:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <xTaskResumeAll+0x100>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1cb      	bne.n	8009932 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099a0:	f000 fb92 	bl	800a0c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099a4:	4b19      	ldr	r3, [pc, #100]	; (8009a0c <xTaskResumeAll+0x114>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00f      	beq.n	80099d0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099b0:	f000 f83c 	bl	8009a2c <xTaskIncrementTick>
 80099b4:	1e03      	subs	r3, r0, #0
 80099b6:	d002      	beq.n	80099be <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80099b8:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <xTaskResumeAll+0x110>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f2      	bne.n	80099b0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <xTaskResumeAll+0x114>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099d0:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <xTaskResumeAll+0x110>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099dc:	f001 f990 	bl	800ad00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099e0:	f001 f9b0 	bl	800ad44 <vPortExitCritical>

	return xAlreadyYielded;
 80099e4:	68bb      	ldr	r3, [r7, #8]
}
 80099e6:	0018      	movs	r0, r3
 80099e8:	46bd      	mov	sp, r7
 80099ea:	b004      	add	sp, #16
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	2000115c 	.word	0x2000115c
 80099f4:	20001134 	.word	0x20001134
 80099f8:	200010f4 	.word	0x200010f4
 80099fc:	2000113c 	.word	0x2000113c
 8009a00:	20000c64 	.word	0x20000c64
 8009a04:	20000c60 	.word	0x20000c60
 8009a08:	20001148 	.word	0x20001148
 8009a0c:	20001144 	.word	0x20001144

08009a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a16:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <xTaskGetTickCount+0x18>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a1c:	687b      	ldr	r3, [r7, #4]
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b002      	add	sp, #8
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			; (mov r8, r8)
 8009a28:	20001138 	.word	0x20001138

08009a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a36:	4b4c      	ldr	r3, [pc, #304]	; (8009b68 <xTaskIncrementTick+0x13c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d000      	beq.n	8009a40 <xTaskIncrementTick+0x14>
 8009a3e:	e083      	b.n	8009b48 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a40:	4b4a      	ldr	r3, [pc, #296]	; (8009b6c <xTaskIncrementTick+0x140>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a48:	4b48      	ldr	r3, [pc, #288]	; (8009b6c <xTaskIncrementTick+0x140>)
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d117      	bne.n	8009a84 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a54:	4b46      	ldr	r3, [pc, #280]	; (8009b70 <xTaskIncrementTick+0x144>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <xTaskIncrementTick+0x36>
 8009a5e:	b672      	cpsid	i
 8009a60:	e7fe      	b.n	8009a60 <xTaskIncrementTick+0x34>
 8009a62:	4b43      	ldr	r3, [pc, #268]	; (8009b70 <xTaskIncrementTick+0x144>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <xTaskIncrementTick+0x148>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	4b40      	ldr	r3, [pc, #256]	; (8009b70 <xTaskIncrementTick+0x144>)
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	4b40      	ldr	r3, [pc, #256]	; (8009b74 <xTaskIncrementTick+0x148>)
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	4b40      	ldr	r3, [pc, #256]	; (8009b78 <xTaskIncrementTick+0x14c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	4b3e      	ldr	r3, [pc, #248]	; (8009b78 <xTaskIncrementTick+0x14c>)
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f000 fb22 	bl	800a0c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a84:	4b3d      	ldr	r3, [pc, #244]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d34e      	bcc.n	8009b2c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a8e:	4b38      	ldr	r3, [pc, #224]	; (8009b70 <xTaskIncrementTick+0x144>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <xTaskIncrementTick+0x70>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <xTaskIncrementTick+0x72>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa2:	4b36      	ldr	r3, [pc, #216]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	4252      	negs	r2, r2
 8009aa8:	601a      	str	r2, [r3, #0]
					break;
 8009aaa:	e03f      	b.n	8009b2c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009aac:	4b30      	ldr	r3, [pc, #192]	; (8009b70 <xTaskIncrementTick+0x144>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d203      	bcs.n	8009acc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ac4:	4b2d      	ldr	r3, [pc, #180]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	601a      	str	r2, [r3, #0]
						break;
 8009aca:	e02f      	b.n	8009b2c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f7fe feea 	bl	80088aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d004      	beq.n	8009ae8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	3318      	adds	r3, #24
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f7fe fee1 	bl	80088aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <xTaskIncrementTick+0x154>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d903      	bls.n	8009afc <xTaskIncrementTick+0xd0>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b21      	ldr	r3, [pc, #132]	; (8009b80 <xTaskIncrementTick+0x154>)
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	0013      	movs	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	189b      	adds	r3, r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4a1e      	ldr	r2, [pc, #120]	; (8009b84 <xTaskIncrementTick+0x158>)
 8009b0a:	189a      	adds	r2, r3, r2
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	0019      	movs	r1, r3
 8009b12:	0010      	movs	r0, r2
 8009b14:	f7fe fe71 	bl	80087fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <xTaskIncrementTick+0x15c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d3b3      	bcc.n	8009a8e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8009b26:	2301      	movs	r3, #1
 8009b28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b2a:	e7b0      	b.n	8009a8e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b2c:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <xTaskIncrementTick+0x15c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b32:	4914      	ldr	r1, [pc, #80]	; (8009b84 <xTaskIncrementTick+0x158>)
 8009b34:	0013      	movs	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	189b      	adds	r3, r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	585b      	ldr	r3, [r3, r1]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d907      	bls.n	8009b52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009b42:	2301      	movs	r3, #1
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	e004      	b.n	8009b52 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <xTaskIncrementTick+0x160>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <xTaskIncrementTick+0x160>)
 8009b50:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <xTaskIncrementTick+0x164>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b5e:	697b      	ldr	r3, [r7, #20]
}
 8009b60:	0018      	movs	r0, r3
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b006      	add	sp, #24
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	2000115c 	.word	0x2000115c
 8009b6c:	20001138 	.word	0x20001138
 8009b70:	200010ec 	.word	0x200010ec
 8009b74:	200010f0 	.word	0x200010f0
 8009b78:	2000114c 	.word	0x2000114c
 8009b7c:	20001154 	.word	0x20001154
 8009b80:	2000113c 	.word	0x2000113c
 8009b84:	20000c64 	.word	0x20000c64
 8009b88:	20000c60 	.word	0x20000c60
 8009b8c:	20001144 	.word	0x20001144
 8009b90:	20001148 	.word	0x20001148

08009b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b9a:	4b2a      	ldr	r3, [pc, #168]	; (8009c44 <vTaskSwitchContext+0xb0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ba2:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <vTaskSwitchContext+0xb4>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ba8:	e048      	b.n	8009c3c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009baa:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <vTaskSwitchContext+0xb4>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009bb0:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <vTaskSwitchContext+0xb8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b25      	ldr	r3, [pc, #148]	; (8009c4c <vTaskSwitchContext+0xb8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d808      	bhi.n	8009bd2 <vTaskSwitchContext+0x3e>
 8009bc0:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <vTaskSwitchContext+0xb8>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	4b21      	ldr	r3, [pc, #132]	; (8009c4c <vTaskSwitchContext+0xb8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3334      	adds	r3, #52	; 0x34
 8009bca:	0019      	movs	r1, r3
 8009bcc:	0010      	movs	r0, r2
 8009bce:	f7f7 f993 	bl	8000ef8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009bd2:	4b1f      	ldr	r3, [pc, #124]	; (8009c50 <vTaskSwitchContext+0xbc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	e007      	b.n	8009bea <vTaskSwitchContext+0x56>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <vTaskSwitchContext+0x50>
 8009be0:	b672      	cpsid	i
 8009be2:	e7fe      	b.n	8009be2 <vTaskSwitchContext+0x4e>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	491a      	ldr	r1, [pc, #104]	; (8009c54 <vTaskSwitchContext+0xc0>)
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	0013      	movs	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	585b      	ldr	r3, [r3, r1]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0ee      	beq.n	8009bda <vTaskSwitchContext+0x46>
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	0013      	movs	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <vTaskSwitchContext+0xc0>)
 8009c08:	189b      	adds	r3, r3, r2
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	605a      	str	r2, [r3, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d104      	bne.n	8009c2c <vTaskSwitchContext+0x98>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <vTaskSwitchContext+0xb8>)
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <vTaskSwitchContext+0xbc>)
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
}
 8009c3c:	46c0      	nop			; (mov r8, r8)
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b002      	add	sp, #8
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	2000115c 	.word	0x2000115c
 8009c48:	20001148 	.word	0x20001148
 8009c4c:	20000c60 	.word	0x20000c60
 8009c50:	2000113c 	.word	0x2000113c
 8009c54:	20000c64 	.word	0x20000c64

08009c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <vTaskPlaceOnEventList+0x14>
 8009c68:	b672      	cpsid	i
 8009c6a:	e7fe      	b.n	8009c6a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c6c:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <vTaskPlaceOnEventList+0x38>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3318      	adds	r3, #24
 8009c72:	001a      	movs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	0011      	movs	r1, r2
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f7fe fde0 	bl	800883e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2101      	movs	r1, #1
 8009c82:	0018      	movs	r0, r3
 8009c84:	f000 fbd4 	bl	800a430 <prvAddCurrentTaskToDelayedList>
}
 8009c88:	46c0      	nop			; (mov r8, r8)
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	b002      	add	sp, #8
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20000c60 	.word	0x20000c60

08009c94 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <vTaskPlaceOnUnorderedEventList+0x16>
 8009ca6:	b672      	cpsid	i
 8009ca8:	e7fe      	b.n	8009ca8 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <vTaskPlaceOnUnorderedEventList+0x54>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <vTaskPlaceOnUnorderedEventList+0x22>
 8009cb2:	b672      	cpsid	i
 8009cb4:	e7fe      	b.n	8009cb4 <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <vTaskPlaceOnUnorderedEventList+0x58>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	2180      	movs	r1, #128	; 0x80
 8009cbe:	0609      	lsls	r1, r1, #24
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <vTaskPlaceOnUnorderedEventList+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3318      	adds	r3, #24
 8009cca:	001a      	movs	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0011      	movs	r1, r2
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f7fe fd92 	bl	80087fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2101      	movs	r1, #1
 8009cda:	0018      	movs	r0, r3
 8009cdc:	f000 fba8 	bl	800a430 <prvAddCurrentTaskToDelayedList>
}
 8009ce0:	46c0      	nop			; (mov r8, r8)
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b004      	add	sp, #16
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	2000115c 	.word	0x2000115c
 8009cec:	20000c60 	.word	0x20000c60

08009cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <vTaskPlaceOnEventListRestricted+0x16>
 8009d02:	b672      	cpsid	i
 8009d04:	e7fe      	b.n	8009d04 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <vTaskPlaceOnEventListRestricted+0x48>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3318      	adds	r3, #24
 8009d0c:	001a      	movs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	0011      	movs	r1, r2
 8009d12:	0018      	movs	r0, r3
 8009d14:	f7fe fd71 	bl	80087fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	425b      	negs	r3, r3
 8009d22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	0011      	movs	r1, r2
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f000 fb80 	bl	800a430 <prvAddCurrentTaskToDelayedList>
	}
 8009d30:	46c0      	nop			; (mov r8, r8)
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b004      	add	sp, #16
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20000c60 	.word	0x20000c60

08009d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <xTaskRemoveFromEventList+0x1a>
 8009d52:	b672      	cpsid	i
 8009d54:	e7fe      	b.n	8009d54 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	3318      	adds	r3, #24
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7fe fda5 	bl	80088aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d60:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <xTaskRemoveFromEventList+0xa0>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11d      	bne.n	8009da4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7fe fd9c 	bl	80088aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <xTaskRemoveFromEventList+0xa4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d903      	bls.n	8009d86 <xTaskRemoveFromEventList+0x4a>
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d82:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <xTaskRemoveFromEventList+0xa4>)
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8a:	0013      	movs	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	189b      	adds	r3, r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <xTaskRemoveFromEventList+0xa8>)
 8009d94:	189a      	adds	r2, r3, r2
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	0010      	movs	r0, r2
 8009d9e:	f7fe fd2c 	bl	80087fa <vListInsertEnd>
 8009da2:	e007      	b.n	8009db4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	3318      	adds	r3, #24
 8009da8:	001a      	movs	r2, r3
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <xTaskRemoveFromEventList+0xac>)
 8009dac:	0011      	movs	r1, r2
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7fe fd23 	bl	80087fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <xTaskRemoveFromEventList+0xb0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d905      	bls.n	8009dce <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <xTaskRemoveFromEventList+0xb4>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e001      	b.n	8009dd2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	b004      	add	sp, #16
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000115c 	.word	0x2000115c
 8009de0:	2000113c 	.word	0x2000113c
 8009de4:	20000c64 	.word	0x20000c64
 8009de8:	200010f4 	.word	0x200010f4
 8009dec:	20000c60 	.word	0x20000c60
 8009df0:	20001148 	.word	0x20001148

08009df4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009dfe:	4b21      	ldr	r3, [pc, #132]	; (8009e84 <vTaskRemoveFromUnorderedEventList+0x90>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <vTaskRemoveFromUnorderedEventList+0x16>
 8009e06:	b672      	cpsid	i
 8009e08:	e7fe      	b.n	8009e08 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2280      	movs	r2, #128	; 0x80
 8009e0e:	0612      	lsls	r2, r2, #24
 8009e10:	431a      	orrs	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <vTaskRemoveFromUnorderedEventList+0x32>
 8009e22:	b672      	cpsid	i
 8009e24:	e7fe      	b.n	8009e24 <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f7fe fd3e 	bl	80088aa <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3304      	adds	r3, #4
 8009e32:	0018      	movs	r0, r3
 8009e34:	f7fe fd39 	bl	80088aa <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <vTaskRemoveFromUnorderedEventList+0x94>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d903      	bls.n	8009e4c <vTaskRemoveFromUnorderedEventList+0x58>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e48:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <vTaskRemoveFromUnorderedEventList+0x94>)
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e50:	0013      	movs	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4a0c      	ldr	r2, [pc, #48]	; (8009e8c <vTaskRemoveFromUnorderedEventList+0x98>)
 8009e5a:	189a      	adds	r2, r3, r2
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	0019      	movs	r1, r3
 8009e62:	0010      	movs	r0, r2
 8009e64:	f7fe fcc9 	bl	80087fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4b08      	ldr	r3, [pc, #32]	; (8009e90 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d902      	bls.n	8009e7c <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009e76:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <vTaskRemoveFromUnorderedEventList+0xa0>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
	}
}
 8009e7c:	46c0      	nop			; (mov r8, r8)
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	b004      	add	sp, #16
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	2000115c 	.word	0x2000115c
 8009e88:	2000113c 	.word	0x2000113c
 8009e8c:	20000c64 	.word	0x20000c64
 8009e90:	20000c60 	.word	0x20000c60
 8009e94:	20001148 	.word	0x20001148

08009e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <vTaskInternalSetTimeOutState+0x20>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <vTaskInternalSetTimeOutState+0x24>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	605a      	str	r2, [r3, #4]
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	2000114c 	.word	0x2000114c
 8009ebc:	20001138 	.word	0x20001138

08009ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <xTaskCheckForTimeOut+0x14>
 8009ed0:	b672      	cpsid	i
 8009ed2:	e7fe      	b.n	8009ed2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <xTaskCheckForTimeOut+0x1e>
 8009eda:	b672      	cpsid	i
 8009edc:	e7fe      	b.n	8009edc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009ede:	f000 ff1f 	bl	800ad20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ee2:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <xTaskCheckForTimeOut+0x98>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	d102      	bne.n	8009f00 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	e024      	b.n	8009f4a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4b15      	ldr	r3, [pc, #84]	; (8009f5c <xTaskCheckForTimeOut+0x9c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d007      	beq.n	8009f1c <xTaskCheckForTimeOut+0x5c>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f16:	2301      	movs	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e016      	b.n	8009f4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d20c      	bcs.n	8009f40 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	1ad2      	subs	r2, r2, r3
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	0018      	movs	r0, r3
 8009f36:	f7ff ffaf 	bl	8009e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e004      	b.n	8009f4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f46:	2301      	movs	r3, #1
 8009f48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009f4a:	f000 fefb 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 8009f4e:	697b      	ldr	r3, [r7, #20]
}
 8009f50:	0018      	movs	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b006      	add	sp, #24
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20001138 	.word	0x20001138
 8009f5c:	2000114c 	.word	0x2000114c

08009f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <vTaskMissedYield+0x10>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001148 	.word	0x20001148

08009f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f7c:	f000 f84e 	bl	800a01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f80:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <prvIdleTask+0x1c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d9f9      	bls.n	8009f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f88:	f000 feba 	bl	800ad00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009f8c:	e7f6      	b.n	8009f7c <prvIdleTask+0x8>
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	20000c64 	.word	0x20000c64

08009f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	e00c      	b.n	8009fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	0013      	movs	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4a14      	ldr	r2, [pc, #80]	; (8009ffc <prvInitialiseTaskLists+0x68>)
 8009fac:	189b      	adds	r3, r3, r2
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f7fe fbfa 	bl	80087a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b37      	cmp	r3, #55	; 0x37
 8009fbe:	d9ef      	bls.n	8009fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <prvInitialiseTaskLists+0x6c>)
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f7fe fbf0 	bl	80087a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	; (800a004 <prvInitialiseTaskLists+0x70>)
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f7fe fbec 	bl	80087a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <prvInitialiseTaskLists+0x74>)
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f7fe fbe8 	bl	80087a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <prvInitialiseTaskLists+0x78>)
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7fe fbe4 	bl	80087a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <prvInitialiseTaskLists+0x7c>)
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f7fe fbe0 	bl	80087a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <prvInitialiseTaskLists+0x80>)
 8009fea:	4a05      	ldr	r2, [pc, #20]	; (800a000 <prvInitialiseTaskLists+0x6c>)
 8009fec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <prvInitialiseTaskLists+0x84>)
 8009ff0:	4a04      	ldr	r2, [pc, #16]	; (800a004 <prvInitialiseTaskLists+0x70>)
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	46c0      	nop			; (mov r8, r8)
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	b002      	add	sp, #8
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000c64 	.word	0x20000c64
 800a000:	200010c4 	.word	0x200010c4
 800a004:	200010d8 	.word	0x200010d8
 800a008:	200010f4 	.word	0x200010f4
 800a00c:	20001108 	.word	0x20001108
 800a010:	20001120 	.word	0x20001120
 800a014:	200010ec 	.word	0x200010ec
 800a018:	200010f0 	.word	0x200010f0

0800a01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a022:	e01a      	b.n	800a05a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800a024:	f000 fe7c 	bl	800ad20 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a028:	4b10      	ldr	r3, [pc, #64]	; (800a06c <prvCheckTasksWaitingTermination+0x50>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	0018      	movs	r0, r3
 800a036:	f7fe fc38 	bl	80088aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03a:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a042:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a044:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a04c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800a04e:	f000 fe79 	bl	800ad44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	0018      	movs	r0, r3
 800a056:	f000 f80f 	bl	800a078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e0      	bne.n	800a024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	46c0      	nop			; (mov r8, r8)
 800a066:	46bd      	mov	sp, r7
 800a068:	b002      	add	sp, #8
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20001108 	.word	0x20001108
 800a070:	20001134 	.word	0x20001134
 800a074:	2000111c 	.word	0x2000111c

0800a078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2259      	movs	r2, #89	; 0x59
 800a084:	5c9b      	ldrb	r3, [r3, r2]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	0018      	movs	r0, r3
 800a090:	f000 ff84 	bl	800af9c <vPortFree>
				vPortFree( pxTCB );
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	0018      	movs	r0, r3
 800a098:	f000 ff80 	bl	800af9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a09c:	e010      	b.n	800a0c0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2259      	movs	r2, #89	; 0x59
 800a0a2:	5c9b      	ldrb	r3, [r3, r2]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d104      	bne.n	800a0b2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f000 ff76 	bl	800af9c <vPortFree>
	}
 800a0b0:	e006      	b.n	800a0c0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2259      	movs	r2, #89	; 0x59
 800a0b6:	5c9b      	ldrb	r3, [r3, r2]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d001      	beq.n	800a0c0 <prvDeleteTCB+0x48>
 800a0bc:	b672      	cpsid	i
 800a0be:	e7fe      	b.n	800a0be <prvDeleteTCB+0x46>
	}
 800a0c0:	46c0      	nop			; (mov r8, r8)
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <prvResetNextTaskUnblockTime+0x40>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <prvResetNextTaskUnblockTime+0x14>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <prvResetNextTaskUnblockTime+0x16>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <prvResetNextTaskUnblockTime+0x44>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	4252      	negs	r2, r2
 800a0e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0ea:	e008      	b.n	800a0fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <prvResetNextTaskUnblockTime+0x40>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	4b04      	ldr	r3, [pc, #16]	; (800a10c <prvResetNextTaskUnblockTime+0x44>)
 800a0fc:	601a      	str	r2, [r3, #0]
}
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	46bd      	mov	sp, r7
 800a102:	b002      	add	sp, #8
 800a104:	bd80      	pop	{r7, pc}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	200010ec 	.word	0x200010ec
 800a10c:	20001154 	.word	0x20001154

0800a110 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a116:	4b04      	ldr	r3, [pc, #16]	; (800a128 <xTaskGetCurrentTaskHandle+0x18>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a11c:	687b      	ldr	r3, [r7, #4]
	}
 800a11e:	0018      	movs	r0, r3
 800a120:	46bd      	mov	sp, r7
 800a122:	b002      	add	sp, #8
 800a124:	bd80      	pop	{r7, pc}
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	20000c60 	.word	0x20000c60

0800a12c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a132:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <xTaskGetSchedulerState+0x30>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a13a:	2301      	movs	r3, #1
 800a13c:	607b      	str	r3, [r7, #4]
 800a13e:	e008      	b.n	800a152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <xTaskGetSchedulerState+0x34>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a148:	2302      	movs	r3, #2
 800a14a:	607b      	str	r3, [r7, #4]
 800a14c:	e001      	b.n	800a152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a14e:	2300      	movs	r3, #0
 800a150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a152:	687b      	ldr	r3, [r7, #4]
	}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	b002      	add	sp, #8
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20001140 	.word	0x20001140
 800a160:	2000115c 	.word	0x2000115c

0800a164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d056      	beq.n	800a228 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17e:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <xTaskPriorityInherit+0xd0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	d246      	bcs.n	800a216 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	db06      	blt.n	800a19e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a190:	4b28      	ldr	r3, [pc, #160]	; (800a234 <xTaskPriorityInherit+0xd0>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a196:	2238      	movs	r2, #56	; 0x38
 800a198:	1ad2      	subs	r2, r2, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6959      	ldr	r1, [r3, #20]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a6:	0013      	movs	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4a22      	ldr	r2, [pc, #136]	; (800a238 <xTaskPriorityInherit+0xd4>)
 800a1b0:	189b      	adds	r3, r3, r2
 800a1b2:	4299      	cmp	r1, r3
 800a1b4:	d101      	bne.n	800a1ba <xTaskPriorityInherit+0x56>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <xTaskPriorityInherit+0x58>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d022      	beq.n	800a206 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	f7fe fb70 	bl	80088aa <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1ca:	4b1a      	ldr	r3, [pc, #104]	; (800a234 <xTaskPriorityInherit+0xd0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d8:	4b18      	ldr	r3, [pc, #96]	; (800a23c <xTaskPriorityInherit+0xd8>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d903      	bls.n	800a1e8 <xTaskPriorityInherit+0x84>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e4:	4b15      	ldr	r3, [pc, #84]	; (800a23c <xTaskPriorityInherit+0xd8>)
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ec:	0013      	movs	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	189b      	adds	r3, r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4a10      	ldr	r2, [pc, #64]	; (800a238 <xTaskPriorityInherit+0xd4>)
 800a1f6:	189a      	adds	r2, r3, r2
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	0019      	movs	r1, r3
 800a1fe:	0010      	movs	r0, r2
 800a200:	f7fe fafb 	bl	80087fa <vListInsertEnd>
 800a204:	e004      	b.n	800a210 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a206:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <xTaskPriorityInherit+0xd0>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e008      	b.n	800a228 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <xTaskPriorityInherit+0xd0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	429a      	cmp	r2, r3
 800a222:	d201      	bcs.n	800a228 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a224:	2301      	movs	r3, #1
 800a226:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a228:	68fb      	ldr	r3, [r7, #12]
	}
 800a22a:	0018      	movs	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	b004      	add	sp, #16
 800a230:	bd80      	pop	{r7, pc}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	20000c60 	.word	0x20000c60
 800a238:	20000c64 	.word	0x20000c64
 800a23c:	2000113c 	.word	0x2000113c

0800a240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d044      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a256:	4b25      	ldr	r3, [pc, #148]	; (800a2ec <xTaskPriorityDisinherit+0xac>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d001      	beq.n	800a264 <xTaskPriorityDisinherit+0x24>
 800a260:	b672      	cpsid	i
 800a262:	e7fe      	b.n	800a262 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <xTaskPriorityDisinherit+0x30>
 800a26c:	b672      	cpsid	i
 800a26e:	e7fe      	b.n	800a26e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a282:	429a      	cmp	r2, r3
 800a284:	d02c      	beq.n	800a2e0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d128      	bne.n	800a2e0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	3304      	adds	r3, #4
 800a292:	0018      	movs	r0, r3
 800a294:	f7fe fb09 	bl	80088aa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	2238      	movs	r2, #56	; 0x38
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <xTaskPriorityDisinherit+0xb0>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d903      	bls.n	800a2c0 <xTaskPriorityDisinherit+0x80>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <xTaskPriorityDisinherit+0xb0>)
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	0013      	movs	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	189b      	adds	r3, r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <xTaskPriorityDisinherit+0xb4>)
 800a2ce:	189a      	adds	r2, r3, r2
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	0019      	movs	r1, r3
 800a2d6:	0010      	movs	r0, r2
 800a2d8:	f7fe fa8f 	bl	80087fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b004      	add	sp, #16
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	46c0      	nop			; (mov r8, r8)
 800a2ec:	20000c60 	.word	0x20000c60
 800a2f0:	2000113c 	.word	0x2000113c
 800a2f4:	20000c64 	.word	0x20000c64

0800a2f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a306:	2301      	movs	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05d      	beq.n	800a3cc <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <vTaskPriorityDisinheritAfterTimeout+0x24>
 800a318:	b672      	cpsid	i
 800a31a:	e7fe      	b.n	800a31a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d902      	bls.n	800a32c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	e002      	b.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a330:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d047      	beq.n	800a3cc <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	429a      	cmp	r2, r3
 800a344:	d142      	bne.n	800a3cc <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a346:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d101      	bne.n	800a354 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800a350:	b672      	cpsid	i
 800a352:	e7fe      	b.n	800a352 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	db04      	blt.n	800a372 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2238      	movs	r2, #56	; 0x38
 800a36c:	1ad2      	subs	r2, r2, r3
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6959      	ldr	r1, [r3, #20]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	0013      	movs	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a382:	189b      	adds	r3, r3, r2
 800a384:	4299      	cmp	r1, r3
 800a386:	d101      	bne.n	800a38c <vTaskPriorityDisinheritAfterTimeout+0x94>
 800a388:	2301      	movs	r3, #1
 800a38a:	e000      	b.n	800a38e <vTaskPriorityDisinheritAfterTimeout+0x96>
 800a38c:	2300      	movs	r3, #0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d01c      	beq.n	800a3cc <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3304      	adds	r3, #4
 800a396:	0018      	movs	r0, r3
 800a398:	f7fe fa87 	bl	80088aa <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a0:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d903      	bls.n	800a3b0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	0013      	movs	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	189b      	adds	r3, r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4a06      	ldr	r2, [pc, #24]	; (800a3d8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a3be:	189a      	adds	r2, r3, r2
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	0019      	movs	r1, r3
 800a3c6:	0010      	movs	r0, r2
 800a3c8:	f7fe fa17 	bl	80087fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3cc:	46c0      	nop			; (mov r8, r8)
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	b006      	add	sp, #24
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000c60 	.word	0x20000c60
 800a3d8:	20000c64 	.word	0x20000c64
 800a3dc:	2000113c 	.word	0x2000113c

0800a3e0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a3e6:	4b08      	ldr	r3, [pc, #32]	; (800a408 <uxTaskResetEventItemValue+0x28>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ee:	4b06      	ldr	r3, [pc, #24]	; (800a408 <uxTaskResetEventItemValue+0x28>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4b04      	ldr	r3, [pc, #16]	; (800a408 <uxTaskResetEventItemValue+0x28>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2138      	movs	r1, #56	; 0x38
 800a3fa:	1a8a      	subs	r2, r1, r2
 800a3fc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a3fe:	687b      	ldr	r3, [r7, #4]
}
 800a400:	0018      	movs	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	b002      	add	sp, #8
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000c60 	.word	0x20000c60

0800a40c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <pvTaskIncrementMutexHeldCount+0x20>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a418:	4b04      	ldr	r3, [pc, #16]	; (800a42c <pvTaskIncrementMutexHeldCount+0x20>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a41e:	3201      	adds	r2, #1
 800a420:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a422:	4b02      	ldr	r3, [pc, #8]	; (800a42c <pvTaskIncrementMutexHeldCount+0x20>)
 800a424:	681b      	ldr	r3, [r3, #0]
	}
 800a426:	0018      	movs	r0, r3
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000c60 	.word	0x20000c60

0800a430 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a43a:	4b21      	ldr	r3, [pc, #132]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a440:	4b20      	ldr	r3, [pc, #128]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3304      	adds	r3, #4
 800a446:	0018      	movs	r0, r3
 800a448:	f7fe fa2f 	bl	80088aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	d10b      	bne.n	800a46a <prvAddCurrentTaskToDelayedList+0x3a>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a458:	4b1a      	ldr	r3, [pc, #104]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	1d1a      	adds	r2, r3, #4
 800a45e:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a460:	0011      	movs	r1, r2
 800a462:	0018      	movs	r0, r3
 800a464:	f7fe f9c9 	bl	80087fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a468:	e026      	b.n	800a4b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	18d3      	adds	r3, r2, r3
 800a470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a472:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d209      	bcs.n	800a496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a482:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3304      	adds	r3, #4
 800a48c:	0019      	movs	r1, r3
 800a48e:	0010      	movs	r0, r2
 800a490:	f7fe f9d5 	bl	800883e <vListInsert>
}
 800a494:	e010      	b.n	800a4b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a496:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	0019      	movs	r1, r3
 800a4a2:	0010      	movs	r0, r2
 800a4a4:	f7fe f9cb 	bl	800883e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d202      	bcs.n	800a4b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4b2:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	601a      	str	r2, [r3, #0]
}
 800a4b8:	46c0      	nop			; (mov r8, r8)
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b004      	add	sp, #16
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20001138 	.word	0x20001138
 800a4c4:	20000c60 	.word	0x20000c60
 800a4c8:	20001120 	.word	0x20001120
 800a4cc:	200010f0 	.word	0x200010f0
 800a4d0:	200010ec 	.word	0x200010ec
 800a4d4:	20001154 	.word	0x20001154

0800a4d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b089      	sub	sp, #36	; 0x24
 800a4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4e2:	f000 faff 	bl	800aae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4e6:	4b17      	ldr	r3, [pc, #92]	; (800a544 <xTimerCreateTimerTask+0x6c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d020      	beq.n	800a530 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4f6:	003a      	movs	r2, r7
 800a4f8:	1d39      	adds	r1, r7, #4
 800a4fa:	2308      	movs	r3, #8
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7fd ff96 	bl	8008430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a504:	683c      	ldr	r4, [r7, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	490f      	ldr	r1, [pc, #60]	; (800a548 <xTimerCreateTimerTask+0x70>)
 800a50c:	480f      	ldr	r0, [pc, #60]	; (800a54c <xTimerCreateTimerTask+0x74>)
 800a50e:	9202      	str	r2, [sp, #8]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	2302      	movs	r3, #2
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	0022      	movs	r2, r4
 800a51a:	f7fe ffee 	bl	80094fa <xTaskCreateStatic>
 800a51e:	0002      	movs	r2, r0
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <xTimerCreateTimerTask+0x78>)
 800a522:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a524:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <xTimerCreateTimerTask+0x78>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a52c:	2301      	movs	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <xTimerCreateTimerTask+0x62>
 800a536:	b672      	cpsid	i
 800a538:	e7fe      	b.n	800a538 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a53a:	68fb      	ldr	r3, [r7, #12]
}
 800a53c:	0018      	movs	r0, r3
 800a53e:	46bd      	mov	sp, r7
 800a540:	b005      	add	sp, #20
 800a542:	bd90      	pop	{r4, r7, pc}
 800a544:	20001190 	.word	0x20001190
 800a548:	0800caf8 	.word	0x0800caf8
 800a54c:	0800a749 	.word	0x0800a749
 800a550:	20001194 	.word	0x20001194

0800a554 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b089      	sub	sp, #36	; 0x24
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a562:	2030      	movs	r0, #48	; 0x30
 800a564:	f000 fc74 	bl	800ae50 <pvPortMalloc>
 800a568:	0003      	movs	r3, r0
 800a56a:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00e      	beq.n	800a590 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a572:	683c      	ldr	r4, [r7, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	0023      	movs	r3, r4
 800a584:	f000 f835 	bl	800a5f2 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	222c      	movs	r2, #44	; 0x2c
 800a58c:	2100      	movs	r1, #0
 800a58e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a590:	697b      	ldr	r3, [r7, #20]
	}
 800a592:	0018      	movs	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	b007      	add	sp, #28
 800a598:	bd90      	pop	{r4, r7, pc}

0800a59a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a59a:	b590      	push	{r4, r7, lr}
 800a59c:	b089      	sub	sp, #36	; 0x24
 800a59e:	af02      	add	r7, sp, #8
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a5a8:	2330      	movs	r3, #48	; 0x30
 800a5aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b30      	cmp	r3, #48	; 0x30
 800a5b0:	d001      	beq.n	800a5b6 <xTimerCreateStatic+0x1c>
 800a5b2:	b672      	cpsid	i
 800a5b4:	e7fe      	b.n	800a5b4 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <xTimerCreateStatic+0x26>
 800a5bc:	b672      	cpsid	i
 800a5be:	e7fe      	b.n	800a5be <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00e      	beq.n	800a5e8 <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a5ca:	683c      	ldr	r4, [r7, #0]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	0023      	movs	r3, r4
 800a5dc:	f000 f809 	bl	800a5f2 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	222c      	movs	r2, #44	; 0x2c
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800a5e8:	697b      	ldr	r3, [r7, #20]
	}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b007      	add	sp, #28
 800a5f0:	bd90      	pop	{r4, r7, pc}

0800a5f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <prvInitialiseNewTimer+0x18>
 800a606:	b672      	cpsid	i
 800a608:	e7fe      	b.n	800a608 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d015      	beq.n	800a63c <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a610:	f000 fa68 	bl	800aae4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	3304      	adds	r3, #4
 800a636:	0018      	movs	r0, r3
 800a638:	f7fe f8d4 	bl	80087e4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a63c:	46c0      	nop			; (mov r8, r8)
 800a63e:	46bd      	mov	sp, r7
 800a640:	b004      	add	sp, #16
 800a642:	bd80      	pop	{r7, pc}

0800a644 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b08b      	sub	sp, #44	; 0x2c
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a652:	2300      	movs	r3, #0
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <xTimerGenericCommand+0x1c>
 800a65c:	b672      	cpsid	i
 800a65e:	e7fe      	b.n	800a65e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a660:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <xTimerGenericCommand+0x90>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d030      	beq.n	800a6ca <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a668:	2414      	movs	r4, #20
 800a66a:	193b      	adds	r3, r7, r4
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a670:	193b      	adds	r3, r7, r4
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a676:	193b      	adds	r3, r7, r4
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2b05      	cmp	r3, #5
 800a680:	dc19      	bgt.n	800a6b6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a682:	f7ff fd53 	bl	800a12c <xTaskGetSchedulerState>
 800a686:	0003      	movs	r3, r0
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d109      	bne.n	800a6a0 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a68c:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <xTimerGenericCommand+0x90>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a692:	1939      	adds	r1, r7, r4
 800a694:	2300      	movs	r3, #0
 800a696:	f7fe fadd 	bl	8008c54 <xQueueGenericSend>
 800a69a:	0003      	movs	r3, r0
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
 800a69e:	e014      	b.n	800a6ca <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6a0:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <xTimerGenericCommand+0x90>)
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	2314      	movs	r3, #20
 800a6a6:	18f9      	adds	r1, r7, r3
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f7fe fad2 	bl	8008c54 <xQueueGenericSend>
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b4:	e009      	b.n	800a6ca <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6b6:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <xTimerGenericCommand+0x90>)
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	2314      	movs	r3, #20
 800a6be:	18f9      	adds	r1, r7, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f7fe fb8b 	bl	8008ddc <xQueueGenericSendFromISR>
 800a6c6:	0003      	movs	r3, r0
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b00b      	add	sp, #44	; 0x2c
 800a6d2:	bd90      	pop	{r4, r7, pc}
 800a6d4:	20001190 	.word	0x20001190

0800a6d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6e2:	4b18      	ldr	r3, [pc, #96]	; (800a744 <prvProcessExpiredTimer+0x6c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f7fe f8da 	bl	80088aa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d119      	bne.n	800a732 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	18d1      	adds	r1, r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f8b6 	bl	800a87c <prvInsertTimerInActiveList>
 800a710:	1e03      	subs	r3, r0, #0
 800a712:	d00e      	beq.n	800a732 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	2100      	movs	r1, #0
 800a720:	f7ff ff90 	bl	800a644 <xTimerGenericCommand>
 800a724:	0003      	movs	r3, r0
 800a726:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <prvProcessExpiredTimer+0x5a>
 800a72e:	b672      	cpsid	i
 800a730:	e7fe      	b.n	800a730 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	0010      	movs	r0, r2
 800a73a:	4798      	blx	r3
}
 800a73c:	46c0      	nop			; (mov r8, r8)
 800a73e:	46bd      	mov	sp, r7
 800a740:	b004      	add	sp, #16
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20001188 	.word	0x20001188

0800a748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a750:	2308      	movs	r3, #8
 800a752:	18fb      	adds	r3, r7, r3
 800a754:	0018      	movs	r0, r3
 800a756:	f000 f851 	bl	800a7fc <prvGetNextExpireTime>
 800a75a:	0003      	movs	r3, r0
 800a75c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f000 f803 	bl	800a770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a76a:	f000 f8c9 	bl	800a900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a76e:	e7ef      	b.n	800a750 <prvTimerTask+0x8>

0800a770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a77a:	f7ff f8b1 	bl	80098e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a77e:	2308      	movs	r3, #8
 800a780:	18fb      	adds	r3, r7, r3
 800a782:	0018      	movs	r0, r3
 800a784:	f000 f85a 	bl	800a83c <prvSampleTimeNow>
 800a788:	0003      	movs	r3, r0
 800a78a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d129      	bne.n	800a7e6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10c      	bne.n	800a7b2 <prvProcessTimerOrBlockTask+0x42>
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d808      	bhi.n	800a7b2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a7a0:	f7ff f8aa 	bl	80098f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	0011      	movs	r1, r2
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f7ff ff94 	bl	800a6d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7b0:	e01b      	b.n	800a7ea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d006      	beq.n	800a7c6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <prvProcessTimerOrBlockTask+0x84>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	425a      	negs	r2, r3
 800a7c0:	4153      	adcs	r3, r2
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <prvProcessTimerOrBlockTask+0x88>)
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	0019      	movs	r1, r3
 800a7d4:	f7fe fe5e 	bl	8009494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7d8:	f7ff f88e 	bl	80098f8 <xTaskResumeAll>
 800a7dc:	1e03      	subs	r3, r0, #0
 800a7de:	d104      	bne.n	800a7ea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800a7e0:	f000 fa8e 	bl	800ad00 <vPortYield>
}
 800a7e4:	e001      	b.n	800a7ea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800a7e6:	f7ff f887 	bl	80098f8 <xTaskResumeAll>
}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	b004      	add	sp, #16
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	2000118c 	.word	0x2000118c
 800a7f8:	20001190 	.word	0x20001190

0800a7fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a804:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <prvGetNextExpireTime+0x3c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	425a      	negs	r2, r3
 800a80c:	4153      	adcs	r3, r2
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	001a      	movs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <prvGetNextExpireTime+0x3c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e001      	b.n	800a82e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a82e:	68fb      	ldr	r3, [r7, #12]
}
 800a830:	0018      	movs	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	b004      	add	sp, #16
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20001188 	.word	0x20001188

0800a83c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a844:	f7ff f8e4 	bl	8009a10 <xTaskGetTickCount>
 800a848:	0003      	movs	r3, r0
 800a84a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a84c:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <prvSampleTimeNow+0x3c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	429a      	cmp	r2, r3
 800a854:	d205      	bcs.n	800a862 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a856:	f000 f8eb 	bl	800aa30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	e002      	b.n	800a868 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a868:	4b03      	ldr	r3, [pc, #12]	; (800a878 <prvSampleTimeNow+0x3c>)
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a86e:	68fb      	ldr	r3, [r7, #12]
}
 800a870:	0018      	movs	r0, r3
 800a872:	46bd      	mov	sp, r7
 800a874:	b004      	add	sp, #16
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20001198 	.word	0x20001198

0800a87c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d812      	bhi.n	800a8c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	1ad2      	subs	r2, r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d302      	bcc.n	800a8b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	e01b      	b.n	800a8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8b6:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <prvInsertTimerInActiveList+0x7c>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	0019      	movs	r1, r3
 800a8c0:	0010      	movs	r0, r2
 800a8c2:	f7fd ffbc 	bl	800883e <vListInsert>
 800a8c6:	e012      	b.n	800a8ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d206      	bcs.n	800a8de <prvInsertTimerInActiveList+0x62>
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d302      	bcc.n	800a8de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e007      	b.n	800a8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8de:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <prvInsertTimerInActiveList+0x80>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	0010      	movs	r0, r2
 800a8ea:	f7fd ffa8 	bl	800883e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8ee:	697b      	ldr	r3, [r7, #20]
}
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b006      	add	sp, #24
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	2000118c 	.word	0x2000118c
 800a8fc:	20001188 	.word	0x20001188

0800a900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b08d      	sub	sp, #52	; 0x34
 800a904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a906:	e07f      	b.n	800aa08 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a908:	2208      	movs	r2, #8
 800a90a:	18bb      	adds	r3, r7, r2
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0f      	bge.n	800a932 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a912:	18bb      	adds	r3, r7, r2
 800a914:	3304      	adds	r3, #4
 800a916:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <prvProcessReceivedCommands+0x22>
 800a91e:	b672      	cpsid	i
 800a920:	e7fe      	b.n	800a920 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	6858      	ldr	r0, [r3, #4]
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	0019      	movs	r1, r3
 800a930:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a932:	2208      	movs	r2, #8
 800a934:	18bb      	adds	r3, r7, r2
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	db64      	blt.n	800aa06 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a93c:	18bb      	adds	r3, r7, r2
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	3304      	adds	r3, #4
 800a94e:	0018      	movs	r0, r3
 800a950:	f7fd ffab 	bl	80088aa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a954:	1d3b      	adds	r3, r7, #4
 800a956:	0018      	movs	r0, r3
 800a958:	f7ff ff70 	bl	800a83c <prvSampleTimeNow>
 800a95c:	0003      	movs	r3, r0
 800a95e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a960:	2308      	movs	r3, #8
 800a962:	18fb      	adds	r3, r7, r3
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b09      	cmp	r3, #9
 800a968:	d84e      	bhi.n	800aa08 <prvProcessReceivedCommands+0x108>
 800a96a:	009a      	lsls	r2, r3, #2
 800a96c:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <prvProcessReceivedCommands+0x128>)
 800a96e:	18d3      	adds	r3, r2, r3
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a974:	2408      	movs	r4, #8
 800a976:	193b      	adds	r3, r7, r4
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	18d1      	adds	r1, r2, r3
 800a980:	193b      	adds	r3, r7, r4
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	69fa      	ldr	r2, [r7, #28]
 800a986:	6a38      	ldr	r0, [r7, #32]
 800a988:	f7ff ff78 	bl	800a87c <prvInsertTimerInActiveList>
 800a98c:	1e03      	subs	r3, r0, #0
 800a98e:	d03b      	beq.n	800aa08 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	0010      	movs	r0, r2
 800a998:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d132      	bne.n	800aa08 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9a2:	193b      	adds	r3, r7, r4
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	18d2      	adds	r2, r2, r3
 800a9ac:	6a38      	ldr	r0, [r7, #32]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f7ff fe45 	bl	800a644 <xTimerGenericCommand>
 800a9ba:	0003      	movs	r3, r0
 800a9bc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d121      	bne.n	800aa08 <prvProcessReceivedCommands+0x108>
 800a9c4:	b672      	cpsid	i
 800a9c6:	e7fe      	b.n	800a9c6 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9c8:	2308      	movs	r3, #8
 800a9ca:	18fb      	adds	r3, r7, r3
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <prvProcessReceivedCommands+0xde>
 800a9da:	b672      	cpsid	i
 800a9dc:	e7fe      	b.n	800a9dc <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	18d1      	adds	r1, r2, r3
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	6a38      	ldr	r0, [r7, #32]
 800a9ec:	f7ff ff46 	bl	800a87c <prvInsertTimerInActiveList>
					break;
 800a9f0:	e00a      	b.n	800aa08 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	222c      	movs	r2, #44	; 0x2c
 800a9f6:	5c9b      	ldrb	r3, [r3, r2]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f000 facc 	bl	800af9c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa04:	e000      	b.n	800aa08 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa06:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa08:	4b08      	ldr	r3, [pc, #32]	; (800aa2c <prvProcessReceivedCommands+0x12c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	18b9      	adds	r1, r7, r2
 800aa10:	2200      	movs	r2, #0
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7fe fa53 	bl	8008ebe <xQueueReceive>
 800aa18:	1e03      	subs	r3, r0, #0
 800aa1a:	d000      	beq.n	800aa1e <prvProcessReceivedCommands+0x11e>
 800aa1c:	e774      	b.n	800a908 <prvProcessReceivedCommands+0x8>
	}
}
 800aa1e:	46c0      	nop			; (mov r8, r8)
 800aa20:	46c0      	nop			; (mov r8, r8)
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b00b      	add	sp, #44	; 0x2c
 800aa26:	bd90      	pop	{r4, r7, pc}
 800aa28:	0800cccc 	.word	0x0800cccc
 800aa2c:	20001190 	.word	0x20001190

0800aa30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa36:	e03e      	b.n	800aab6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa38:	4b28      	ldr	r3, [pc, #160]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa42:	4b26      	ldr	r3, [pc, #152]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	0018      	movs	r0, r3
 800aa52:	f7fd ff2a 	bl	80088aa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	0010      	movs	r0, r2
 800aa5e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d126      	bne.n	800aab6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	18d3      	adds	r3, r2, r3
 800aa70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d90e      	bls.n	800aa98 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa86:	4b15      	ldr	r3, [pc, #84]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	0019      	movs	r1, r3
 800aa90:	0010      	movs	r0, r2
 800aa92:	f7fd fed4 	bl	800883e <vListInsert>
 800aa96:	e00e      	b.n	800aab6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f7ff fdce 	bl	800a644 <xTimerGenericCommand>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <prvSwitchTimerLists+0x86>
 800aab2:	b672      	cpsid	i
 800aab4:	e7fe      	b.n	800aab4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1bb      	bne.n	800aa38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <prvSwitchTimerLists+0xb0>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b04      	ldr	r3, [pc, #16]	; (800aadc <prvSwitchTimerLists+0xac>)
 800aacc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800aace:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <prvSwitchTimerLists+0xb0>)
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	46c0      	nop			; (mov r8, r8)
 800aad6:	46bd      	mov	sp, r7
 800aad8:	b006      	add	sp, #24
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20001188 	.word	0x20001188
 800aae0:	2000118c 	.word	0x2000118c

0800aae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aaea:	f000 f919 	bl	800ad20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aaee:	4b16      	ldr	r3, [pc, #88]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d123      	bne.n	800ab3e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaf6:	4b15      	ldr	r3, [pc, #84]	; (800ab4c <prvCheckForValidListAndQueue+0x68>)
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f7fd fe55 	bl	80087a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <prvCheckForValidListAndQueue+0x6c>)
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7fd fe51 	bl	80087a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab06:	4b13      	ldr	r3, [pc, #76]	; (800ab54 <prvCheckForValidListAndQueue+0x70>)
 800ab08:	4a10      	ldr	r2, [pc, #64]	; (800ab4c <prvCheckForValidListAndQueue+0x68>)
 800ab0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab0c:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <prvCheckForValidListAndQueue+0x74>)
 800ab0e:	4a10      	ldr	r2, [pc, #64]	; (800ab50 <prvCheckForValidListAndQueue+0x6c>)
 800ab10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab12:	4b12      	ldr	r3, [pc, #72]	; (800ab5c <prvCheckForValidListAndQueue+0x78>)
 800ab14:	4a12      	ldr	r2, [pc, #72]	; (800ab60 <prvCheckForValidListAndQueue+0x7c>)
 800ab16:	2100      	movs	r1, #0
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	2110      	movs	r1, #16
 800ab1c:	200a      	movs	r0, #10
 800ab1e:	f7fd ff40 	bl	80089a2 <xQueueGenericCreateStatic>
 800ab22:	0002      	movs	r2, r0
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800ab26:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab28:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d006      	beq.n	800ab3e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a0b      	ldr	r2, [pc, #44]	; (800ab64 <prvCheckForValidListAndQueue+0x80>)
 800ab36:	0011      	movs	r1, r2
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f7fe fc83 	bl	8009444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab3e:	f000 f901 	bl	800ad44 <vPortExitCritical>
}
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20001190 	.word	0x20001190
 800ab4c:	20001160 	.word	0x20001160
 800ab50:	20001174 	.word	0x20001174
 800ab54:	20001188 	.word	0x20001188
 800ab58:	2000118c 	.word	0x2000118c
 800ab5c:	2000123c 	.word	0x2000123c
 800ab60:	2000119c 	.word	0x2000119c
 800ab64:	0800cb00 	.word	0x0800cb00

0800ab68 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <pvTimerGetTimerID+0x16>
 800ab7a:	b672      	cpsid	i
 800ab7c:	e7fe      	b.n	800ab7c <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800ab7e:	f000 f8cf 	bl	800ad20 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800ab88:	f000 f8dc 	bl	800ad44 <vPortExitCritical>

	return pvReturn;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
}
 800ab8e:	0018      	movs	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b004      	add	sp, #16
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800aba6:	2114      	movs	r1, #20
 800aba8:	187b      	adds	r3, r7, r1
 800abaa:	2202      	movs	r2, #2
 800abac:	4252      	negs	r2, r2
 800abae:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800abb0:	187b      	adds	r3, r7, r1
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800abb6:	187b      	adds	r3, r7, r1
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abc2:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <xTimerPendFunctionCallFromISR+0x48>)
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	1879      	adds	r1, r7, r1
 800abca:	2300      	movs	r3, #0
 800abcc:	f7fe f906 	bl	8008ddc <xQueueGenericSendFromISR>
 800abd0:	0003      	movs	r3, r0
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800abd6:	0018      	movs	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	b00a      	add	sp, #40	; 0x28
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	20001190 	.word	0x20001190

0800abe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3b04      	subs	r3, #4
 800abf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2280      	movs	r2, #128	; 0x80
 800abfa:	0452      	lsls	r2, r2, #17
 800abfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac10:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <pxPortInitialiseStack+0x50>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3b14      	subs	r3, #20
 800ac1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3b20      	subs	r3, #32
 800ac26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac28:	68fb      	ldr	r3, [r7, #12]
}
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	b004      	add	sp, #16
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	0800ac39 	.word	0x0800ac39

0800ac38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac42:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <prvTaskExitError+0x2c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	d001      	beq.n	800ac4e <prvTaskExitError+0x16>
 800ac4a:	b672      	cpsid	i
 800ac4c:	e7fe      	b.n	800ac4c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800ac4e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800ac50:	46c0      	nop			; (mov r8, r8)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d0fc      	beq.n	800ac52 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac58:	46c0      	nop			; (mov r8, r8)
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	b002      	add	sp, #8
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	20000028 	.word	0x20000028

0800ac68 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800ac6c:	46c0      	nop			; (mov r8, r8)
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800ac80:	4a0b      	ldr	r2, [pc, #44]	; (800acb0 <pxCurrentTCBConst2>)
 800ac82:	6813      	ldr	r3, [r2, #0]
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	3020      	adds	r0, #32
 800ac88:	f380 8809 	msr	PSP, r0
 800ac8c:	2002      	movs	r0, #2
 800ac8e:	f380 8814 	msr	CONTROL, r0
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800ac98:	46ae      	mov	lr, r5
 800ac9a:	bc08      	pop	{r3}
 800ac9c:	bc04      	pop	{r2}
 800ac9e:	b662      	cpsie	i
 800aca0:	4718      	bx	r3
 800aca2:	46c0      	nop			; (mov r8, r8)
 800aca4:	46c0      	nop			; (mov r8, r8)
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	46c0      	nop			; (mov r8, r8)
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	46c0      	nop			; (mov r8, r8)
 800acae:	46c0      	nop			; (mov r8, r8)

0800acb0 <pxCurrentTCBConst2>:
 800acb0:	20000c60 	.word	0x20000c60
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	46c0      	nop			; (mov r8, r8)

0800acb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800acbc:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <xPortStartScheduler+0x40>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <xPortStartScheduler+0x40>)
 800acc2:	21ff      	movs	r1, #255	; 0xff
 800acc4:	0409      	lsls	r1, r1, #16
 800acc6:	430a      	orrs	r2, r1
 800acc8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <xPortStartScheduler+0x40>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <xPortStartScheduler+0x40>)
 800acd0:	21ff      	movs	r1, #255	; 0xff
 800acd2:	0609      	lsls	r1, r1, #24
 800acd4:	430a      	orrs	r2, r1
 800acd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800acd8:	f000 f898 	bl	800ae0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acdc:	4b07      	ldr	r3, [pc, #28]	; (800acfc <xPortStartScheduler+0x44>)
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800ace2:	f7ff ffcd 	bl	800ac80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ace6:	f7fe ff55 	bl	8009b94 <vTaskSwitchContext>
	prvTaskExitError();
 800acea:	f7ff ffa5 	bl	800ac38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	0018      	movs	r0, r3
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	e000ed20 	.word	0xe000ed20
 800acfc:	20000028 	.word	0x20000028

0800ad00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <vPortYield+0x1c>)
 800ad06:	2280      	movs	r2, #128	; 0x80
 800ad08:	0552      	lsls	r2, r2, #21
 800ad0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800ad0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ad10:	f3bf 8f6f 	isb	sy
}
 800ad14:	46c0      	nop			; (mov r8, r8)
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	46c0      	nop			; (mov r8, r8)
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ad24:	b672      	cpsid	i
    uxCriticalNesting++;
 800ad26:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <vPortEnterCritical+0x20>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <vPortEnterCritical+0x20>)
 800ad2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800ad30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ad34:	f3bf 8f6f 	isb	sy
}
 800ad38:	46c0      	nop			; (mov r8, r8)
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	46c0      	nop			; (mov r8, r8)
 800ad40:	20000028 	.word	0x20000028

0800ad44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <vPortExitCritical+0x2c>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <vPortExitCritical+0x10>
 800ad50:	b672      	cpsid	i
 800ad52:	e7fe      	b.n	800ad52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <vPortExitCritical+0x2c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	1e5a      	subs	r2, r3, #1
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <vPortExitCritical+0x2c>)
 800ad5c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800ad5e:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <vPortExitCritical+0x2c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d100      	bne.n	800ad68 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800ad66:	b662      	cpsie	i
    }
}
 800ad68:	46c0      	nop			; (mov r8, r8)
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	20000028 	.word	0x20000028

0800ad74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800ad74:	f3ef 8010 	mrs	r0, PRIMASK
 800ad78:	b672      	cpsid	i
 800ad7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800ad7c:	46c0      	nop			; (mov r8, r8)
 800ad7e:	0018      	movs	r0, r3

0800ad80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800ad80:	f380 8810 	msr	PRIMASK, r0
 800ad84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800ad86:	46c0      	nop			; (mov r8, r8)
	...

0800ad90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad90:	f3ef 8009 	mrs	r0, PSP
 800ad94:	4b0e      	ldr	r3, [pc, #56]	; (800add0 <pxCurrentTCBConst>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	3820      	subs	r0, #32
 800ad9a:	6010      	str	r0, [r2, #0]
 800ad9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ad9e:	4644      	mov	r4, r8
 800ada0:	464d      	mov	r5, r9
 800ada2:	4656      	mov	r6, sl
 800ada4:	465f      	mov	r7, fp
 800ada6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ada8:	b508      	push	{r3, lr}
 800adaa:	b672      	cpsid	i
 800adac:	f7fe fef2 	bl	8009b94 <vTaskSwitchContext>
 800adb0:	b662      	cpsie	i
 800adb2:	bc0c      	pop	{r2, r3}
 800adb4:	6811      	ldr	r1, [r2, #0]
 800adb6:	6808      	ldr	r0, [r1, #0]
 800adb8:	3010      	adds	r0, #16
 800adba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800adbc:	46a0      	mov	r8, r4
 800adbe:	46a9      	mov	r9, r5
 800adc0:	46b2      	mov	sl, r6
 800adc2:	46bb      	mov	fp, r7
 800adc4:	f380 8809 	msr	PSP, r0
 800adc8:	3820      	subs	r0, #32
 800adca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800adcc:	4718      	bx	r3
 800adce:	46c0      	nop			; (mov r8, r8)

0800add0 <pxCurrentTCBConst>:
 800add0:	20000c60 	.word	0x20000c60
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800add4:	46c0      	nop			; (mov r8, r8)
 800add6:	46c0      	nop			; (mov r8, r8)

0800add8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800adde:	f7ff ffc9 	bl	800ad74 <ulSetInterruptMaskFromISR>
 800ade2:	0003      	movs	r3, r0
 800ade4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ade6:	f7fe fe21 	bl	8009a2c <xTaskIncrementTick>
 800adea:	1e03      	subs	r3, r0, #0
 800adec:	d003      	beq.n	800adf6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800adee:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <SysTick_Handler+0x30>)
 800adf0:	2280      	movs	r2, #128	; 0x80
 800adf2:	0552      	lsls	r2, r2, #21
 800adf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	0018      	movs	r0, r3
 800adfa:	f7ff ffc1 	bl	800ad80 <vClearInterruptMaskFromISR>
}
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	46bd      	mov	sp, r7
 800ae02:	b002      	add	sp, #8
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	46c0      	nop			; (mov r8, r8)
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <prvSetupTimerInterrupt+0x34>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <prvSetupTimerInterrupt+0x38>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <prvSetupTimerInterrupt+0x3c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	22fa      	movs	r2, #250	; 0xfa
 800ae22:	0091      	lsls	r1, r2, #2
 800ae24:	0018      	movs	r0, r3
 800ae26:	f7f5 f979 	bl	800011c <__udivsi3>
 800ae2a:	0003      	movs	r3, r0
 800ae2c:	001a      	movs	r2, r3
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <prvSetupTimerInterrupt+0x40>)
 800ae30:	3a01      	subs	r2, #1
 800ae32:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <prvSetupTimerInterrupt+0x34>)
 800ae36:	2207      	movs	r2, #7
 800ae38:	601a      	str	r2, [r3, #0]
}
 800ae3a:	46c0      	nop			; (mov r8, r8)
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	e000e010 	.word	0xe000e010
 800ae44:	e000e018 	.word	0xe000e018
 800ae48:	20000000 	.word	0x20000000
 800ae4c:	e000e014 	.word	0xe000e014

0800ae50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ae5c:	f7fe fd40 	bl	80098e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae60:	4b49      	ldr	r3, [pc, #292]	; (800af88 <pvPortMalloc+0x138>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae68:	f000 f8e0 	bl	800b02c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae6c:	4b47      	ldr	r3, [pc, #284]	; (800af8c <pvPortMalloc+0x13c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	4013      	ands	r3, r2
 800ae74:	d000      	beq.n	800ae78 <pvPortMalloc+0x28>
 800ae76:	e079      	b.n	800af6c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d012      	beq.n	800aea4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800ae7e:	2208      	movs	r2, #8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	189b      	adds	r3, r3, r2
 800ae84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2207      	movs	r2, #7
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	d00a      	beq.n	800aea4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2207      	movs	r2, #7
 800ae92:	4393      	bics	r3, r2
 800ae94:	3308      	adds	r3, #8
 800ae96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2207      	movs	r2, #7
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d001      	beq.n	800aea4 <pvPortMalloc+0x54>
 800aea0:	b672      	cpsid	i
 800aea2:	e7fe      	b.n	800aea2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d060      	beq.n	800af6c <pvPortMalloc+0x11c>
 800aeaa:	4b39      	ldr	r3, [pc, #228]	; (800af90 <pvPortMalloc+0x140>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d85b      	bhi.n	800af6c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aeb4:	4b37      	ldr	r3, [pc, #220]	; (800af94 <pvPortMalloc+0x144>)
 800aeb6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800aeb8:	4b36      	ldr	r3, [pc, #216]	; (800af94 <pvPortMalloc+0x144>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aebe:	e004      	b.n	800aeca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <pvPortMalloc+0x8c>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f1      	bne.n	800aec0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aedc:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <pvPortMalloc+0x138>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d042      	beq.n	800af6c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2208      	movs	r2, #8
 800aeec:	189b      	adds	r3, r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	2308      	movs	r3, #8
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	429a      	cmp	r2, r3
 800af06:	d916      	bls.n	800af36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	18d3      	adds	r3, r2, r3
 800af0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2207      	movs	r2, #7
 800af14:	4013      	ands	r3, r2
 800af16:	d001      	beq.n	800af1c <pvPortMalloc+0xcc>
 800af18:	b672      	cpsid	i
 800af1a:	e7fe      	b.n	800af1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	1ad2      	subs	r2, r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	0018      	movs	r0, r3
 800af32:	f000 f8db 	bl	800b0ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af36:	4b16      	ldr	r3, [pc, #88]	; (800af90 <pvPortMalloc+0x140>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	4b13      	ldr	r3, [pc, #76]	; (800af90 <pvPortMalloc+0x140>)
 800af42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af44:	4b12      	ldr	r3, [pc, #72]	; (800af90 <pvPortMalloc+0x140>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	4b13      	ldr	r3, [pc, #76]	; (800af98 <pvPortMalloc+0x148>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d203      	bcs.n	800af58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <pvPortMalloc+0x140>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b10      	ldr	r3, [pc, #64]	; (800af98 <pvPortMalloc+0x148>)
 800af56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	4b0b      	ldr	r3, [pc, #44]	; (800af8c <pvPortMalloc+0x13c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	431a      	orrs	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af6c:	f7fe fcc4 	bl	80098f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2207      	movs	r2, #7
 800af74:	4013      	ands	r3, r2
 800af76:	d001      	beq.n	800af7c <pvPortMalloc+0x12c>
 800af78:	b672      	cpsid	i
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x12a>
	return pvReturn;
 800af7c:	68fb      	ldr	r3, [r7, #12]
}
 800af7e:	0018      	movs	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	b006      	add	sp, #24
 800af84:	bd80      	pop	{r7, pc}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	20001e94 	.word	0x20001e94
 800af8c:	20001ea0 	.word	0x20001ea0
 800af90:	20001e98 	.word	0x20001e98
 800af94:	20001e8c 	.word	0x20001e8c
 800af98:	20001e9c 	.word	0x20001e9c

0800af9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d035      	beq.n	800b01a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afae:	2308      	movs	r3, #8
 800afb0:	425b      	negs	r3, r3
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	18d3      	adds	r3, r2, r3
 800afb6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	4b18      	ldr	r3, [pc, #96]	; (800b024 <vPortFree+0x88>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4013      	ands	r3, r2
 800afc6:	d101      	bne.n	800afcc <vPortFree+0x30>
 800afc8:	b672      	cpsid	i
 800afca:	e7fe      	b.n	800afca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <vPortFree+0x3c>
 800afd4:	b672      	cpsid	i
 800afd6:	e7fe      	b.n	800afd6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	4b11      	ldr	r3, [pc, #68]	; (800b024 <vPortFree+0x88>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4013      	ands	r3, r2
 800afe2:	d01a      	beq.n	800b01a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d116      	bne.n	800b01a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <vPortFree+0x88>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	43db      	mvns	r3, r3
 800aff6:	401a      	ands	r2, r3
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800affc:	f7fe fc70 	bl	80098e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	4b08      	ldr	r3, [pc, #32]	; (800b028 <vPortFree+0x8c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	18d2      	adds	r2, r2, r3
 800b00a:	4b07      	ldr	r3, [pc, #28]	; (800b028 <vPortFree+0x8c>)
 800b00c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	0018      	movs	r0, r3
 800b012:	f000 f86b 	bl	800b0ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b016:	f7fe fc6f 	bl	80098f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	46bd      	mov	sp, r7
 800b01e:	b004      	add	sp, #16
 800b020:	bd80      	pop	{r7, pc}
 800b022:	46c0      	nop			; (mov r8, r8)
 800b024:	20001ea0 	.word	0x20001ea0
 800b028:	20001e98 	.word	0x20001e98

0800b02c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b032:	23c0      	movs	r3, #192	; 0xc0
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b038:	4b26      	ldr	r3, [pc, #152]	; (800b0d4 <prvHeapInit+0xa8>)
 800b03a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2207      	movs	r2, #7
 800b040:	4013      	ands	r3, r2
 800b042:	d00c      	beq.n	800b05e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3307      	adds	r3, #7
 800b048:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2207      	movs	r2, #7
 800b04e:	4393      	bics	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <prvHeapInit+0xa8>)
 800b05a:	18d3      	adds	r3, r2, r3
 800b05c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b062:	4b1d      	ldr	r3, [pc, #116]	; (800b0d8 <prvHeapInit+0xac>)
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b068:	4b1b      	ldr	r3, [pc, #108]	; (800b0d8 <prvHeapInit+0xac>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	18d3      	adds	r3, r2, r3
 800b074:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b076:	2208      	movs	r2, #8
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2207      	movs	r2, #7
 800b082:	4393      	bics	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4b14      	ldr	r3, [pc, #80]	; (800b0dc <prvHeapInit+0xb0>)
 800b08a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800b08c:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <prvHeapInit+0xb0>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2200      	movs	r2, #0
 800b092:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b094:	4b11      	ldr	r3, [pc, #68]	; (800b0dc <prvHeapInit+0xb0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	1ad2      	subs	r2, r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0aa:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <prvHeapInit+0xb0>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b0a      	ldr	r3, [pc, #40]	; (800b0e0 <prvHeapInit+0xb4>)
 800b0b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <prvHeapInit+0xb8>)
 800b0c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <prvHeapInit+0xbc>)
 800b0c4:	2280      	movs	r2, #128	; 0x80
 800b0c6:	0612      	lsls	r2, r2, #24
 800b0c8:	601a      	str	r2, [r3, #0]
}
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	b004      	add	sp, #16
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	2000128c 	.word	0x2000128c
 800b0d8:	20001e8c 	.word	0x20001e8c
 800b0dc:	20001e94 	.word	0x20001e94
 800b0e0:	20001e9c 	.word	0x20001e9c
 800b0e4:	20001e98 	.word	0x20001e98
 800b0e8:	20001ea0 	.word	0x20001ea0

0800b0ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0f4:	4b27      	ldr	r3, [pc, #156]	; (800b194 <prvInsertBlockIntoFreeList+0xa8>)
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e002      	b.n	800b100 <prvInsertBlockIntoFreeList+0x14>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d8f7      	bhi.n	800b0fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	18d3      	adds	r3, r2, r3
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d108      	bne.n	800b12e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	18d2      	adds	r2, r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	18d2      	adds	r2, r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d118      	bne.n	800b174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <prvInsertBlockIntoFreeList+0xac>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d00d      	beq.n	800b16a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	18d2      	adds	r2, r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	e008      	b.n	800b17c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b16a:	4b0b      	ldr	r3, [pc, #44]	; (800b198 <prvInsertBlockIntoFreeList+0xac>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e003      	b.n	800b17c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d002      	beq.n	800b18a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	46bd      	mov	sp, r7
 800b18e:	b004      	add	sp, #16
 800b190:	bd80      	pop	{r7, pc}
 800b192:	46c0      	nop			; (mov r8, r8)
 800b194:	20001e8c 	.word	0x20001e8c
 800b198:	20001e94 	.word	0x20001e94

0800b19c <_ZdlPvj>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	f000 f804 	bl	800b1aa <_ZdlPv>
 800b1a2:	bd10      	pop	{r4, pc}

0800b1a4 <__cxa_pure_virtual>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	f000 f809 	bl	800b1bc <_ZSt9terminatev>

0800b1aa <_ZdlPv>:
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	f000 f86e 	bl	800b28c <free>
 800b1b0:	bd10      	pop	{r4, pc}

0800b1b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	4780      	blx	r0
 800b1b6:	f000 f809 	bl	800b1cc <abort>
	...

0800b1bc <_ZSt9terminatev>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <_ZSt9terminatev+0xc>)
 800b1be:	b510      	push	{r4, lr}
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f7ff fff6 	bl	800b1b2 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	2000002c 	.word	0x2000002c

0800b1cc <abort>:
 800b1cc:	2006      	movs	r0, #6
 800b1ce:	b510      	push	{r4, lr}
 800b1d0:	f000 fc4a 	bl	800ba68 <raise>
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	f7f6 fb89 	bl	80018ec <_exit>
	...

0800b1dc <__assert_func>:
 800b1dc:	b530      	push	{r4, r5, lr}
 800b1de:	0014      	movs	r4, r2
 800b1e0:	001a      	movs	r2, r3
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <__assert_func+0x2c>)
 800b1e4:	0005      	movs	r5, r0
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	68d8      	ldr	r0, [r3, #12]
 800b1ec:	4b07      	ldr	r3, [pc, #28]	; (800b20c <__assert_func+0x30>)
 800b1ee:	2c00      	cmp	r4, #0
 800b1f0:	d101      	bne.n	800b1f6 <__assert_func+0x1a>
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <__assert_func+0x34>)
 800b1f4:	001c      	movs	r4, r3
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	9100      	str	r1, [sp, #0]
 800b1fa:	002b      	movs	r3, r5
 800b1fc:	4905      	ldr	r1, [pc, #20]	; (800b214 <__assert_func+0x38>)
 800b1fe:	9402      	str	r4, [sp, #8]
 800b200:	f000 f810 	bl	800b224 <fiprintf>
 800b204:	f7ff ffe2 	bl	800b1cc <abort>
 800b208:	20000030 	.word	0x20000030
 800b20c:	0800ccf4 	.word	0x0800ccf4
 800b210:	0800cd2f 	.word	0x0800cd2f
 800b214:	0800cd01 	.word	0x0800cd01

0800b218 <__errno>:
 800b218:	4b01      	ldr	r3, [pc, #4]	; (800b220 <__errno+0x8>)
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	4770      	bx	lr
 800b21e:	46c0      	nop			; (mov r8, r8)
 800b220:	20000030 	.word	0x20000030

0800b224 <fiprintf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	b503      	push	{r0, r1, lr}
 800b228:	0001      	movs	r1, r0
 800b22a:	ab03      	add	r3, sp, #12
 800b22c:	4804      	ldr	r0, [pc, #16]	; (800b240 <fiprintf+0x1c>)
 800b22e:	cb04      	ldmia	r3!, {r2}
 800b230:	6800      	ldr	r0, [r0, #0]
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	f000 f920 	bl	800b478 <_vfiprintf_r>
 800b238:	b002      	add	sp, #8
 800b23a:	bc08      	pop	{r3}
 800b23c:	b003      	add	sp, #12
 800b23e:	4718      	bx	r3
 800b240:	20000030 	.word	0x20000030

0800b244 <__libc_init_array>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	2600      	movs	r6, #0
 800b248:	4d0c      	ldr	r5, [pc, #48]	; (800b27c <__libc_init_array+0x38>)
 800b24a:	4c0d      	ldr	r4, [pc, #52]	; (800b280 <__libc_init_array+0x3c>)
 800b24c:	1b64      	subs	r4, r4, r5
 800b24e:	10a4      	asrs	r4, r4, #2
 800b250:	42a6      	cmp	r6, r4
 800b252:	d109      	bne.n	800b268 <__libc_init_array+0x24>
 800b254:	2600      	movs	r6, #0
 800b256:	f001 f801 	bl	800c25c <_init>
 800b25a:	4d0a      	ldr	r5, [pc, #40]	; (800b284 <__libc_init_array+0x40>)
 800b25c:	4c0a      	ldr	r4, [pc, #40]	; (800b288 <__libc_init_array+0x44>)
 800b25e:	1b64      	subs	r4, r4, r5
 800b260:	10a4      	asrs	r4, r4, #2
 800b262:	42a6      	cmp	r6, r4
 800b264:	d105      	bne.n	800b272 <__libc_init_array+0x2e>
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	00b3      	lsls	r3, r6, #2
 800b26a:	58eb      	ldr	r3, [r5, r3]
 800b26c:	4798      	blx	r3
 800b26e:	3601      	adds	r6, #1
 800b270:	e7ee      	b.n	800b250 <__libc_init_array+0xc>
 800b272:	00b3      	lsls	r3, r6, #2
 800b274:	58eb      	ldr	r3, [r5, r3]
 800b276:	4798      	blx	r3
 800b278:	3601      	adds	r6, #1
 800b27a:	e7f2      	b.n	800b262 <__libc_init_array+0x1e>
 800b27c:	0800cdc8 	.word	0x0800cdc8
 800b280:	0800cdc8 	.word	0x0800cdc8
 800b284:	0800cdc8 	.word	0x0800cdc8
 800b288:	0800cdd0 	.word	0x0800cdd0

0800b28c <free>:
 800b28c:	b510      	push	{r4, lr}
 800b28e:	4b03      	ldr	r3, [pc, #12]	; (800b29c <free+0x10>)
 800b290:	0001      	movs	r1, r0
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	f000 f820 	bl	800b2d8 <_free_r>
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	20000030 	.word	0x20000030

0800b2a0 <memchr>:
 800b2a0:	b2c9      	uxtb	r1, r1
 800b2a2:	1882      	adds	r2, r0, r2
 800b2a4:	4290      	cmp	r0, r2
 800b2a6:	d101      	bne.n	800b2ac <memchr+0xc>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	4770      	bx	lr
 800b2ac:	7803      	ldrb	r3, [r0, #0]
 800b2ae:	428b      	cmp	r3, r1
 800b2b0:	d0fb      	beq.n	800b2aa <memchr+0xa>
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	e7f6      	b.n	800b2a4 <memchr+0x4>

0800b2b6 <memcpy>:
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d100      	bne.n	800b2c0 <memcpy+0xa>
 800b2be:	bd10      	pop	{r4, pc}
 800b2c0:	5ccc      	ldrb	r4, [r1, r3]
 800b2c2:	54c4      	strb	r4, [r0, r3]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	e7f8      	b.n	800b2ba <memcpy+0x4>

0800b2c8 <memset>:
 800b2c8:	0003      	movs	r3, r0
 800b2ca:	1882      	adds	r2, r0, r2
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d100      	bne.n	800b2d2 <memset+0xa>
 800b2d0:	4770      	bx	lr
 800b2d2:	7019      	strb	r1, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	e7f9      	b.n	800b2cc <memset+0x4>

0800b2d8 <_free_r>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	0005      	movs	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d010      	beq.n	800b302 <_free_r+0x2a>
 800b2e0:	1f0c      	subs	r4, r1, #4
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	da00      	bge.n	800b2ea <_free_r+0x12>
 800b2e8:	18e4      	adds	r4, r4, r3
 800b2ea:	0028      	movs	r0, r5
 800b2ec:	f000 fee8 	bl	800c0c0 <__malloc_lock>
 800b2f0:	4a1d      	ldr	r2, [pc, #116]	; (800b368 <_free_r+0x90>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d105      	bne.n	800b304 <_free_r+0x2c>
 800b2f8:	6063      	str	r3, [r4, #4]
 800b2fa:	6014      	str	r4, [r2, #0]
 800b2fc:	0028      	movs	r0, r5
 800b2fe:	f000 fee7 	bl	800c0d0 <__malloc_unlock>
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6821      	ldr	r1, [r4, #0]
 800b30a:	1860      	adds	r0, r4, r1
 800b30c:	4283      	cmp	r3, r0
 800b30e:	d1f3      	bne.n	800b2f8 <_free_r+0x20>
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	1841      	adds	r1, r0, r1
 800b316:	6021      	str	r1, [r4, #0]
 800b318:	e7ee      	b.n	800b2f8 <_free_r+0x20>
 800b31a:	001a      	movs	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <_free_r+0x4e>
 800b322:	42a3      	cmp	r3, r4
 800b324:	d9f9      	bls.n	800b31a <_free_r+0x42>
 800b326:	6811      	ldr	r1, [r2, #0]
 800b328:	1850      	adds	r0, r2, r1
 800b32a:	42a0      	cmp	r0, r4
 800b32c:	d10b      	bne.n	800b346 <_free_r+0x6e>
 800b32e:	6820      	ldr	r0, [r4, #0]
 800b330:	1809      	adds	r1, r1, r0
 800b332:	1850      	adds	r0, r2, r1
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	4283      	cmp	r3, r0
 800b338:	d1e0      	bne.n	800b2fc <_free_r+0x24>
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	1841      	adds	r1, r0, r1
 800b340:	6011      	str	r1, [r2, #0]
 800b342:	6053      	str	r3, [r2, #4]
 800b344:	e7da      	b.n	800b2fc <_free_r+0x24>
 800b346:	42a0      	cmp	r0, r4
 800b348:	d902      	bls.n	800b350 <_free_r+0x78>
 800b34a:	230c      	movs	r3, #12
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	e7d5      	b.n	800b2fc <_free_r+0x24>
 800b350:	6821      	ldr	r1, [r4, #0]
 800b352:	1860      	adds	r0, r4, r1
 800b354:	4283      	cmp	r3, r0
 800b356:	d103      	bne.n	800b360 <_free_r+0x88>
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	1841      	adds	r1, r0, r1
 800b35e:	6021      	str	r1, [r4, #0]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	6054      	str	r4, [r2, #4]
 800b364:	e7ca      	b.n	800b2fc <_free_r+0x24>
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	20001ea4 	.word	0x20001ea4

0800b36c <_malloc_r>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	2303      	movs	r3, #3
 800b370:	1ccd      	adds	r5, r1, #3
 800b372:	439d      	bics	r5, r3
 800b374:	3508      	adds	r5, #8
 800b376:	0006      	movs	r6, r0
 800b378:	2d0c      	cmp	r5, #12
 800b37a:	d21f      	bcs.n	800b3bc <_malloc_r+0x50>
 800b37c:	250c      	movs	r5, #12
 800b37e:	42a9      	cmp	r1, r5
 800b380:	d81e      	bhi.n	800b3c0 <_malloc_r+0x54>
 800b382:	0030      	movs	r0, r6
 800b384:	f000 fe9c 	bl	800c0c0 <__malloc_lock>
 800b388:	4925      	ldr	r1, [pc, #148]	; (800b420 <_malloc_r+0xb4>)
 800b38a:	680a      	ldr	r2, [r1, #0]
 800b38c:	0014      	movs	r4, r2
 800b38e:	2c00      	cmp	r4, #0
 800b390:	d11a      	bne.n	800b3c8 <_malloc_r+0x5c>
 800b392:	4f24      	ldr	r7, [pc, #144]	; (800b424 <_malloc_r+0xb8>)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d104      	bne.n	800b3a4 <_malloc_r+0x38>
 800b39a:	0021      	movs	r1, r4
 800b39c:	0030      	movs	r0, r6
 800b39e:	f000 fb27 	bl	800b9f0 <_sbrk_r>
 800b3a2:	6038      	str	r0, [r7, #0]
 800b3a4:	0029      	movs	r1, r5
 800b3a6:	0030      	movs	r0, r6
 800b3a8:	f000 fb22 	bl	800b9f0 <_sbrk_r>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d12b      	bne.n	800b408 <_malloc_r+0x9c>
 800b3b0:	230c      	movs	r3, #12
 800b3b2:	0030      	movs	r0, r6
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	f000 fe8b 	bl	800c0d0 <__malloc_unlock>
 800b3ba:	e003      	b.n	800b3c4 <_malloc_r+0x58>
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	dade      	bge.n	800b37e <_malloc_r+0x12>
 800b3c0:	230c      	movs	r3, #12
 800b3c2:	6033      	str	r3, [r6, #0]
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	1b5b      	subs	r3, r3, r5
 800b3cc:	d419      	bmi.n	800b402 <_malloc_r+0x96>
 800b3ce:	2b0b      	cmp	r3, #11
 800b3d0:	d903      	bls.n	800b3da <_malloc_r+0x6e>
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	18e4      	adds	r4, r4, r3
 800b3d6:	6025      	str	r5, [r4, #0]
 800b3d8:	e003      	b.n	800b3e2 <_malloc_r+0x76>
 800b3da:	6863      	ldr	r3, [r4, #4]
 800b3dc:	42a2      	cmp	r2, r4
 800b3de:	d10e      	bne.n	800b3fe <_malloc_r+0x92>
 800b3e0:	600b      	str	r3, [r1, #0]
 800b3e2:	0030      	movs	r0, r6
 800b3e4:	f000 fe74 	bl	800c0d0 <__malloc_unlock>
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	2207      	movs	r2, #7
 800b3ec:	300b      	adds	r0, #11
 800b3ee:	1d23      	adds	r3, r4, #4
 800b3f0:	4390      	bics	r0, r2
 800b3f2:	1ac2      	subs	r2, r0, r3
 800b3f4:	4298      	cmp	r0, r3
 800b3f6:	d0e6      	beq.n	800b3c6 <_malloc_r+0x5a>
 800b3f8:	1a1b      	subs	r3, r3, r0
 800b3fa:	50a3      	str	r3, [r4, r2]
 800b3fc:	e7e3      	b.n	800b3c6 <_malloc_r+0x5a>
 800b3fe:	6053      	str	r3, [r2, #4]
 800b400:	e7ef      	b.n	800b3e2 <_malloc_r+0x76>
 800b402:	0022      	movs	r2, r4
 800b404:	6864      	ldr	r4, [r4, #4]
 800b406:	e7c2      	b.n	800b38e <_malloc_r+0x22>
 800b408:	2303      	movs	r3, #3
 800b40a:	1cc4      	adds	r4, r0, #3
 800b40c:	439c      	bics	r4, r3
 800b40e:	42a0      	cmp	r0, r4
 800b410:	d0e1      	beq.n	800b3d6 <_malloc_r+0x6a>
 800b412:	1a21      	subs	r1, r4, r0
 800b414:	0030      	movs	r0, r6
 800b416:	f000 faeb 	bl	800b9f0 <_sbrk_r>
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	d1db      	bne.n	800b3d6 <_malloc_r+0x6a>
 800b41e:	e7c7      	b.n	800b3b0 <_malloc_r+0x44>
 800b420:	20001ea4 	.word	0x20001ea4
 800b424:	20001ea8 	.word	0x20001ea8

0800b428 <__sfputc_r>:
 800b428:	6893      	ldr	r3, [r2, #8]
 800b42a:	b510      	push	{r4, lr}
 800b42c:	3b01      	subs	r3, #1
 800b42e:	6093      	str	r3, [r2, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	da04      	bge.n	800b43e <__sfputc_r+0x16>
 800b434:	6994      	ldr	r4, [r2, #24]
 800b436:	42a3      	cmp	r3, r4
 800b438:	db07      	blt.n	800b44a <__sfputc_r+0x22>
 800b43a:	290a      	cmp	r1, #10
 800b43c:	d005      	beq.n	800b44a <__sfputc_r+0x22>
 800b43e:	6813      	ldr	r3, [r2, #0]
 800b440:	1c58      	adds	r0, r3, #1
 800b442:	6010      	str	r0, [r2, #0]
 800b444:	7019      	strb	r1, [r3, #0]
 800b446:	0008      	movs	r0, r1
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	f000 fb2d 	bl	800baa8 <__swbuf_r>
 800b44e:	0001      	movs	r1, r0
 800b450:	e7f9      	b.n	800b446 <__sfputc_r+0x1e>

0800b452 <__sfputs_r>:
 800b452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b454:	0006      	movs	r6, r0
 800b456:	000f      	movs	r7, r1
 800b458:	0014      	movs	r4, r2
 800b45a:	18d5      	adds	r5, r2, r3
 800b45c:	42ac      	cmp	r4, r5
 800b45e:	d101      	bne.n	800b464 <__sfputs_r+0x12>
 800b460:	2000      	movs	r0, #0
 800b462:	e007      	b.n	800b474 <__sfputs_r+0x22>
 800b464:	7821      	ldrb	r1, [r4, #0]
 800b466:	003a      	movs	r2, r7
 800b468:	0030      	movs	r0, r6
 800b46a:	f7ff ffdd 	bl	800b428 <__sfputc_r>
 800b46e:	3401      	adds	r4, #1
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d1f3      	bne.n	800b45c <__sfputs_r+0xa>
 800b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b478 <_vfiprintf_r>:
 800b478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b47a:	b0a1      	sub	sp, #132	; 0x84
 800b47c:	0006      	movs	r6, r0
 800b47e:	000c      	movs	r4, r1
 800b480:	001f      	movs	r7, r3
 800b482:	9203      	str	r2, [sp, #12]
 800b484:	2800      	cmp	r0, #0
 800b486:	d004      	beq.n	800b492 <_vfiprintf_r+0x1a>
 800b488:	6983      	ldr	r3, [r0, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <_vfiprintf_r+0x1a>
 800b48e:	f000 fd07 	bl	800bea0 <__sinit>
 800b492:	4b8e      	ldr	r3, [pc, #568]	; (800b6cc <_vfiprintf_r+0x254>)
 800b494:	429c      	cmp	r4, r3
 800b496:	d11c      	bne.n	800b4d2 <_vfiprintf_r+0x5a>
 800b498:	6874      	ldr	r4, [r6, #4]
 800b49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b49c:	07db      	lsls	r3, r3, #31
 800b49e:	d405      	bmi.n	800b4ac <_vfiprintf_r+0x34>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	059b      	lsls	r3, r3, #22
 800b4a4:	d402      	bmi.n	800b4ac <_vfiprintf_r+0x34>
 800b4a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a8:	f000 fd9b 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	071b      	lsls	r3, r3, #28
 800b4b0:	d502      	bpl.n	800b4b8 <_vfiprintf_r+0x40>
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d11d      	bne.n	800b4f4 <_vfiprintf_r+0x7c>
 800b4b8:	0021      	movs	r1, r4
 800b4ba:	0030      	movs	r0, r6
 800b4bc:	f000 fb4a 	bl	800bb54 <__swsetup_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d017      	beq.n	800b4f4 <_vfiprintf_r+0x7c>
 800b4c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4c6:	07db      	lsls	r3, r3, #31
 800b4c8:	d50d      	bpl.n	800b4e6 <_vfiprintf_r+0x6e>
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	4240      	negs	r0, r0
 800b4ce:	b021      	add	sp, #132	; 0x84
 800b4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d2:	4b7f      	ldr	r3, [pc, #508]	; (800b6d0 <_vfiprintf_r+0x258>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d101      	bne.n	800b4dc <_vfiprintf_r+0x64>
 800b4d8:	68b4      	ldr	r4, [r6, #8]
 800b4da:	e7de      	b.n	800b49a <_vfiprintf_r+0x22>
 800b4dc:	4b7d      	ldr	r3, [pc, #500]	; (800b6d4 <_vfiprintf_r+0x25c>)
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	d1db      	bne.n	800b49a <_vfiprintf_r+0x22>
 800b4e2:	68f4      	ldr	r4, [r6, #12]
 800b4e4:	e7d9      	b.n	800b49a <_vfiprintf_r+0x22>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	059b      	lsls	r3, r3, #22
 800b4ea:	d4ee      	bmi.n	800b4ca <_vfiprintf_r+0x52>
 800b4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ee:	f000 fd79 	bl	800bfe4 <__retarget_lock_release_recursive>
 800b4f2:	e7ea      	b.n	800b4ca <_vfiprintf_r+0x52>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	ad08      	add	r5, sp, #32
 800b4f8:	616b      	str	r3, [r5, #20]
 800b4fa:	3320      	adds	r3, #32
 800b4fc:	766b      	strb	r3, [r5, #25]
 800b4fe:	3310      	adds	r3, #16
 800b500:	76ab      	strb	r3, [r5, #26]
 800b502:	9707      	str	r7, [sp, #28]
 800b504:	9f03      	ldr	r7, [sp, #12]
 800b506:	783b      	ldrb	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <_vfiprintf_r+0x98>
 800b50c:	2b25      	cmp	r3, #37	; 0x25
 800b50e:	d14e      	bne.n	800b5ae <_vfiprintf_r+0x136>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	1afb      	subs	r3, r7, r3
 800b514:	9305      	str	r3, [sp, #20]
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	429f      	cmp	r7, r3
 800b51a:	d00d      	beq.n	800b538 <_vfiprintf_r+0xc0>
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	0021      	movs	r1, r4
 800b520:	0030      	movs	r0, r6
 800b522:	9a03      	ldr	r2, [sp, #12]
 800b524:	f7ff ff95 	bl	800b452 <__sfputs_r>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d100      	bne.n	800b52e <_vfiprintf_r+0xb6>
 800b52c:	e0b5      	b.n	800b69a <_vfiprintf_r+0x222>
 800b52e:	696a      	ldr	r2, [r5, #20]
 800b530:	9b05      	ldr	r3, [sp, #20]
 800b532:	4694      	mov	ip, r2
 800b534:	4463      	add	r3, ip
 800b536:	616b      	str	r3, [r5, #20]
 800b538:	783b      	ldrb	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d100      	bne.n	800b540 <_vfiprintf_r+0xc8>
 800b53e:	e0ac      	b.n	800b69a <_vfiprintf_r+0x222>
 800b540:	2201      	movs	r2, #1
 800b542:	1c7b      	adds	r3, r7, #1
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	2300      	movs	r3, #0
 800b548:	4252      	negs	r2, r2
 800b54a:	606a      	str	r2, [r5, #4]
 800b54c:	a904      	add	r1, sp, #16
 800b54e:	3254      	adds	r2, #84	; 0x54
 800b550:	1852      	adds	r2, r2, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	60eb      	str	r3, [r5, #12]
 800b556:	60ab      	str	r3, [r5, #8]
 800b558:	7013      	strb	r3, [r2, #0]
 800b55a:	65ab      	str	r3, [r5, #88]	; 0x58
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	2205      	movs	r2, #5
 800b560:	7819      	ldrb	r1, [r3, #0]
 800b562:	485d      	ldr	r0, [pc, #372]	; (800b6d8 <_vfiprintf_r+0x260>)
 800b564:	f7ff fe9c 	bl	800b2a0 <memchr>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1c5f      	adds	r7, r3, #1
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d120      	bne.n	800b5b2 <_vfiprintf_r+0x13a>
 800b570:	682a      	ldr	r2, [r5, #0]
 800b572:	06d3      	lsls	r3, r2, #27
 800b574:	d504      	bpl.n	800b580 <_vfiprintf_r+0x108>
 800b576:	2353      	movs	r3, #83	; 0x53
 800b578:	a904      	add	r1, sp, #16
 800b57a:	185b      	adds	r3, r3, r1
 800b57c:	2120      	movs	r1, #32
 800b57e:	7019      	strb	r1, [r3, #0]
 800b580:	0713      	lsls	r3, r2, #28
 800b582:	d504      	bpl.n	800b58e <_vfiprintf_r+0x116>
 800b584:	2353      	movs	r3, #83	; 0x53
 800b586:	a904      	add	r1, sp, #16
 800b588:	185b      	adds	r3, r3, r1
 800b58a:	212b      	movs	r1, #43	; 0x2b
 800b58c:	7019      	strb	r1, [r3, #0]
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b2a      	cmp	r3, #42	; 0x2a
 800b594:	d016      	beq.n	800b5c4 <_vfiprintf_r+0x14c>
 800b596:	2100      	movs	r1, #0
 800b598:	68eb      	ldr	r3, [r5, #12]
 800b59a:	9f03      	ldr	r7, [sp, #12]
 800b59c:	783a      	ldrb	r2, [r7, #0]
 800b59e:	1c78      	adds	r0, r7, #1
 800b5a0:	3a30      	subs	r2, #48	; 0x30
 800b5a2:	4684      	mov	ip, r0
 800b5a4:	2a09      	cmp	r2, #9
 800b5a6:	d94f      	bls.n	800b648 <_vfiprintf_r+0x1d0>
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	d111      	bne.n	800b5d0 <_vfiprintf_r+0x158>
 800b5ac:	e017      	b.n	800b5de <_vfiprintf_r+0x166>
 800b5ae:	3701      	adds	r7, #1
 800b5b0:	e7a9      	b.n	800b506 <_vfiprintf_r+0x8e>
 800b5b2:	4b49      	ldr	r3, [pc, #292]	; (800b6d8 <_vfiprintf_r+0x260>)
 800b5b4:	682a      	ldr	r2, [r5, #0]
 800b5b6:	1ac0      	subs	r0, r0, r3
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4083      	lsls	r3, r0
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	602b      	str	r3, [r5, #0]
 800b5c0:	9703      	str	r7, [sp, #12]
 800b5c2:	e7cb      	b.n	800b55c <_vfiprintf_r+0xe4>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	1d19      	adds	r1, r3, #4
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	9107      	str	r1, [sp, #28]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	db01      	blt.n	800b5d4 <_vfiprintf_r+0x15c>
 800b5d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5d2:	e004      	b.n	800b5de <_vfiprintf_r+0x166>
 800b5d4:	425b      	negs	r3, r3
 800b5d6:	60eb      	str	r3, [r5, #12]
 800b5d8:	2302      	movs	r3, #2
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	783b      	ldrb	r3, [r7, #0]
 800b5e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b5e2:	d10a      	bne.n	800b5fa <_vfiprintf_r+0x182>
 800b5e4:	787b      	ldrb	r3, [r7, #1]
 800b5e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e8:	d137      	bne.n	800b65a <_vfiprintf_r+0x1e2>
 800b5ea:	9b07      	ldr	r3, [sp, #28]
 800b5ec:	3702      	adds	r7, #2
 800b5ee:	1d1a      	adds	r2, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9207      	str	r2, [sp, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	db2d      	blt.n	800b654 <_vfiprintf_r+0x1dc>
 800b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fa:	2203      	movs	r2, #3
 800b5fc:	7839      	ldrb	r1, [r7, #0]
 800b5fe:	4837      	ldr	r0, [pc, #220]	; (800b6dc <_vfiprintf_r+0x264>)
 800b600:	f7ff fe4e 	bl	800b2a0 <memchr>
 800b604:	2800      	cmp	r0, #0
 800b606:	d007      	beq.n	800b618 <_vfiprintf_r+0x1a0>
 800b608:	4b34      	ldr	r3, [pc, #208]	; (800b6dc <_vfiprintf_r+0x264>)
 800b60a:	682a      	ldr	r2, [r5, #0]
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	2340      	movs	r3, #64	; 0x40
 800b610:	4083      	lsls	r3, r0
 800b612:	4313      	orrs	r3, r2
 800b614:	3701      	adds	r7, #1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	7839      	ldrb	r1, [r7, #0]
 800b61a:	1c7b      	adds	r3, r7, #1
 800b61c:	2206      	movs	r2, #6
 800b61e:	4830      	ldr	r0, [pc, #192]	; (800b6e0 <_vfiprintf_r+0x268>)
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	7629      	strb	r1, [r5, #24]
 800b624:	f7ff fe3c 	bl	800b2a0 <memchr>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d045      	beq.n	800b6b8 <_vfiprintf_r+0x240>
 800b62c:	4b2d      	ldr	r3, [pc, #180]	; (800b6e4 <_vfiprintf_r+0x26c>)
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d127      	bne.n	800b682 <_vfiprintf_r+0x20a>
 800b632:	2207      	movs	r2, #7
 800b634:	9b07      	ldr	r3, [sp, #28]
 800b636:	3307      	adds	r3, #7
 800b638:	4393      	bics	r3, r2
 800b63a:	3308      	adds	r3, #8
 800b63c:	9307      	str	r3, [sp, #28]
 800b63e:	696b      	ldr	r3, [r5, #20]
 800b640:	9a04      	ldr	r2, [sp, #16]
 800b642:	189b      	adds	r3, r3, r2
 800b644:	616b      	str	r3, [r5, #20]
 800b646:	e75d      	b.n	800b504 <_vfiprintf_r+0x8c>
 800b648:	210a      	movs	r1, #10
 800b64a:	434b      	muls	r3, r1
 800b64c:	4667      	mov	r7, ip
 800b64e:	189b      	adds	r3, r3, r2
 800b650:	3909      	subs	r1, #9
 800b652:	e7a3      	b.n	800b59c <_vfiprintf_r+0x124>
 800b654:	2301      	movs	r3, #1
 800b656:	425b      	negs	r3, r3
 800b658:	e7ce      	b.n	800b5f8 <_vfiprintf_r+0x180>
 800b65a:	2300      	movs	r3, #0
 800b65c:	001a      	movs	r2, r3
 800b65e:	3701      	adds	r7, #1
 800b660:	606b      	str	r3, [r5, #4]
 800b662:	7839      	ldrb	r1, [r7, #0]
 800b664:	1c78      	adds	r0, r7, #1
 800b666:	3930      	subs	r1, #48	; 0x30
 800b668:	4684      	mov	ip, r0
 800b66a:	2909      	cmp	r1, #9
 800b66c:	d903      	bls.n	800b676 <_vfiprintf_r+0x1fe>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c3      	beq.n	800b5fa <_vfiprintf_r+0x182>
 800b672:	9209      	str	r2, [sp, #36]	; 0x24
 800b674:	e7c1      	b.n	800b5fa <_vfiprintf_r+0x182>
 800b676:	230a      	movs	r3, #10
 800b678:	435a      	muls	r2, r3
 800b67a:	4667      	mov	r7, ip
 800b67c:	1852      	adds	r2, r2, r1
 800b67e:	3b09      	subs	r3, #9
 800b680:	e7ef      	b.n	800b662 <_vfiprintf_r+0x1ea>
 800b682:	ab07      	add	r3, sp, #28
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	0022      	movs	r2, r4
 800b688:	0029      	movs	r1, r5
 800b68a:	0030      	movs	r0, r6
 800b68c:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <_vfiprintf_r+0x270>)
 800b68e:	e000      	b.n	800b692 <_vfiprintf_r+0x21a>
 800b690:	bf00      	nop
 800b692:	9004      	str	r0, [sp, #16]
 800b694:	9b04      	ldr	r3, [sp, #16]
 800b696:	3301      	adds	r3, #1
 800b698:	d1d1      	bne.n	800b63e <_vfiprintf_r+0x1c6>
 800b69a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b69c:	07db      	lsls	r3, r3, #31
 800b69e:	d405      	bmi.n	800b6ac <_vfiprintf_r+0x234>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	059b      	lsls	r3, r3, #22
 800b6a4:	d402      	bmi.n	800b6ac <_vfiprintf_r+0x234>
 800b6a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6a8:	f000 fc9c 	bl	800bfe4 <__retarget_lock_release_recursive>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	065b      	lsls	r3, r3, #25
 800b6b0:	d500      	bpl.n	800b6b4 <_vfiprintf_r+0x23c>
 800b6b2:	e70a      	b.n	800b4ca <_vfiprintf_r+0x52>
 800b6b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b6b6:	e70a      	b.n	800b4ce <_vfiprintf_r+0x56>
 800b6b8:	ab07      	add	r3, sp, #28
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	0022      	movs	r2, r4
 800b6be:	0029      	movs	r1, r5
 800b6c0:	0030      	movs	r0, r6
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <_vfiprintf_r+0x270>)
 800b6c4:	f000 f882 	bl	800b7cc <_printf_i>
 800b6c8:	e7e3      	b.n	800b692 <_vfiprintf_r+0x21a>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	0800cd88 	.word	0x0800cd88
 800b6d0:	0800cda8 	.word	0x0800cda8
 800b6d4:	0800cd68 	.word	0x0800cd68
 800b6d8:	0800cd34 	.word	0x0800cd34
 800b6dc:	0800cd3a 	.word	0x0800cd3a
 800b6e0:	0800cd3e 	.word	0x0800cd3e
 800b6e4:	00000000 	.word	0x00000000
 800b6e8:	0800b453 	.word	0x0800b453

0800b6ec <_printf_common>:
 800b6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ee:	0015      	movs	r5, r2
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	688a      	ldr	r2, [r1, #8]
 800b6f4:	690b      	ldr	r3, [r1, #16]
 800b6f6:	000c      	movs	r4, r1
 800b6f8:	9000      	str	r0, [sp, #0]
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	da00      	bge.n	800b700 <_printf_common+0x14>
 800b6fe:	0013      	movs	r3, r2
 800b700:	0022      	movs	r2, r4
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	3243      	adds	r2, #67	; 0x43
 800b706:	7812      	ldrb	r2, [r2, #0]
 800b708:	2a00      	cmp	r2, #0
 800b70a:	d001      	beq.n	800b710 <_printf_common+0x24>
 800b70c:	3301      	adds	r3, #1
 800b70e:	602b      	str	r3, [r5, #0]
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	069b      	lsls	r3, r3, #26
 800b714:	d502      	bpl.n	800b71c <_printf_common+0x30>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	3302      	adds	r3, #2
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	2306      	movs	r3, #6
 800b720:	0017      	movs	r7, r2
 800b722:	401f      	ands	r7, r3
 800b724:	421a      	tst	r2, r3
 800b726:	d027      	beq.n	800b778 <_printf_common+0x8c>
 800b728:	0023      	movs	r3, r4
 800b72a:	3343      	adds	r3, #67	; 0x43
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	4193      	sbcs	r3, r2
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	0692      	lsls	r2, r2, #26
 800b736:	d430      	bmi.n	800b79a <_printf_common+0xae>
 800b738:	0022      	movs	r2, r4
 800b73a:	9901      	ldr	r1, [sp, #4]
 800b73c:	9800      	ldr	r0, [sp, #0]
 800b73e:	9e08      	ldr	r6, [sp, #32]
 800b740:	3243      	adds	r2, #67	; 0x43
 800b742:	47b0      	blx	r6
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d025      	beq.n	800b794 <_printf_common+0xa8>
 800b748:	2306      	movs	r3, #6
 800b74a:	6820      	ldr	r0, [r4, #0]
 800b74c:	682a      	ldr	r2, [r5, #0]
 800b74e:	68e1      	ldr	r1, [r4, #12]
 800b750:	2500      	movs	r5, #0
 800b752:	4003      	ands	r3, r0
 800b754:	2b04      	cmp	r3, #4
 800b756:	d103      	bne.n	800b760 <_printf_common+0x74>
 800b758:	1a8d      	subs	r5, r1, r2
 800b75a:	43eb      	mvns	r3, r5
 800b75c:	17db      	asrs	r3, r3, #31
 800b75e:	401d      	ands	r5, r3
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	6922      	ldr	r2, [r4, #16]
 800b764:	4293      	cmp	r3, r2
 800b766:	dd01      	ble.n	800b76c <_printf_common+0x80>
 800b768:	1a9b      	subs	r3, r3, r2
 800b76a:	18ed      	adds	r5, r5, r3
 800b76c:	2700      	movs	r7, #0
 800b76e:	42bd      	cmp	r5, r7
 800b770:	d120      	bne.n	800b7b4 <_printf_common+0xc8>
 800b772:	2000      	movs	r0, #0
 800b774:	e010      	b.n	800b798 <_printf_common+0xac>
 800b776:	3701      	adds	r7, #1
 800b778:	68e3      	ldr	r3, [r4, #12]
 800b77a:	682a      	ldr	r2, [r5, #0]
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	42bb      	cmp	r3, r7
 800b780:	ddd2      	ble.n	800b728 <_printf_common+0x3c>
 800b782:	0022      	movs	r2, r4
 800b784:	2301      	movs	r3, #1
 800b786:	9901      	ldr	r1, [sp, #4]
 800b788:	9800      	ldr	r0, [sp, #0]
 800b78a:	9e08      	ldr	r6, [sp, #32]
 800b78c:	3219      	adds	r2, #25
 800b78e:	47b0      	blx	r6
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d1f0      	bne.n	800b776 <_printf_common+0x8a>
 800b794:	2001      	movs	r0, #1
 800b796:	4240      	negs	r0, r0
 800b798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b79a:	2030      	movs	r0, #48	; 0x30
 800b79c:	18e1      	adds	r1, r4, r3
 800b79e:	3143      	adds	r1, #67	; 0x43
 800b7a0:	7008      	strb	r0, [r1, #0]
 800b7a2:	0021      	movs	r1, r4
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	3145      	adds	r1, #69	; 0x45
 800b7a8:	7809      	ldrb	r1, [r1, #0]
 800b7aa:	18a2      	adds	r2, r4, r2
 800b7ac:	3243      	adds	r2, #67	; 0x43
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	7011      	strb	r1, [r2, #0]
 800b7b2:	e7c1      	b.n	800b738 <_printf_common+0x4c>
 800b7b4:	0022      	movs	r2, r4
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	9901      	ldr	r1, [sp, #4]
 800b7ba:	9800      	ldr	r0, [sp, #0]
 800b7bc:	9e08      	ldr	r6, [sp, #32]
 800b7be:	321a      	adds	r2, #26
 800b7c0:	47b0      	blx	r6
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	d0e6      	beq.n	800b794 <_printf_common+0xa8>
 800b7c6:	3701      	adds	r7, #1
 800b7c8:	e7d1      	b.n	800b76e <_printf_common+0x82>
	...

0800b7cc <_printf_i>:
 800b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ce:	b08b      	sub	sp, #44	; 0x2c
 800b7d0:	9206      	str	r2, [sp, #24]
 800b7d2:	000a      	movs	r2, r1
 800b7d4:	3243      	adds	r2, #67	; 0x43
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	9005      	str	r0, [sp, #20]
 800b7da:	9204      	str	r2, [sp, #16]
 800b7dc:	7e0a      	ldrb	r2, [r1, #24]
 800b7de:	000c      	movs	r4, r1
 800b7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7e2:	2a78      	cmp	r2, #120	; 0x78
 800b7e4:	d806      	bhi.n	800b7f4 <_printf_i+0x28>
 800b7e6:	2a62      	cmp	r2, #98	; 0x62
 800b7e8:	d808      	bhi.n	800b7fc <_printf_i+0x30>
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d100      	bne.n	800b7f0 <_printf_i+0x24>
 800b7ee:	e0c0      	b.n	800b972 <_printf_i+0x1a6>
 800b7f0:	2a58      	cmp	r2, #88	; 0x58
 800b7f2:	d052      	beq.n	800b89a <_printf_i+0xce>
 800b7f4:	0026      	movs	r6, r4
 800b7f6:	3642      	adds	r6, #66	; 0x42
 800b7f8:	7032      	strb	r2, [r6, #0]
 800b7fa:	e022      	b.n	800b842 <_printf_i+0x76>
 800b7fc:	0010      	movs	r0, r2
 800b7fe:	3863      	subs	r0, #99	; 0x63
 800b800:	2815      	cmp	r0, #21
 800b802:	d8f7      	bhi.n	800b7f4 <_printf_i+0x28>
 800b804:	f7f4 fc80 	bl	8000108 <__gnu_thumb1_case_shi>
 800b808:	001f0016 	.word	0x001f0016
 800b80c:	fff6fff6 	.word	0xfff6fff6
 800b810:	fff6fff6 	.word	0xfff6fff6
 800b814:	fff6001f 	.word	0xfff6001f
 800b818:	fff6fff6 	.word	0xfff6fff6
 800b81c:	00a8fff6 	.word	0x00a8fff6
 800b820:	009a0036 	.word	0x009a0036
 800b824:	fff6fff6 	.word	0xfff6fff6
 800b828:	fff600b9 	.word	0xfff600b9
 800b82c:	fff60036 	.word	0xfff60036
 800b830:	009efff6 	.word	0x009efff6
 800b834:	0026      	movs	r6, r4
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	3642      	adds	r6, #66	; 0x42
 800b83a:	1d11      	adds	r1, r2, #4
 800b83c:	6019      	str	r1, [r3, #0]
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	7033      	strb	r3, [r6, #0]
 800b842:	2301      	movs	r3, #1
 800b844:	e0a7      	b.n	800b996 <_printf_i+0x1ca>
 800b846:	6808      	ldr	r0, [r1, #0]
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	1d0a      	adds	r2, r1, #4
 800b84c:	0605      	lsls	r5, r0, #24
 800b84e:	d50b      	bpl.n	800b868 <_printf_i+0x9c>
 800b850:	680d      	ldr	r5, [r1, #0]
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	2d00      	cmp	r5, #0
 800b856:	da03      	bge.n	800b860 <_printf_i+0x94>
 800b858:	232d      	movs	r3, #45	; 0x2d
 800b85a:	9a04      	ldr	r2, [sp, #16]
 800b85c:	426d      	negs	r5, r5
 800b85e:	7013      	strb	r3, [r2, #0]
 800b860:	4b61      	ldr	r3, [pc, #388]	; (800b9e8 <_printf_i+0x21c>)
 800b862:	270a      	movs	r7, #10
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	e032      	b.n	800b8ce <_printf_i+0x102>
 800b868:	680d      	ldr	r5, [r1, #0]
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	0641      	lsls	r1, r0, #25
 800b86e:	d5f1      	bpl.n	800b854 <_printf_i+0x88>
 800b870:	b22d      	sxth	r5, r5
 800b872:	e7ef      	b.n	800b854 <_printf_i+0x88>
 800b874:	680d      	ldr	r5, [r1, #0]
 800b876:	6819      	ldr	r1, [r3, #0]
 800b878:	1d08      	adds	r0, r1, #4
 800b87a:	6018      	str	r0, [r3, #0]
 800b87c:	062e      	lsls	r6, r5, #24
 800b87e:	d501      	bpl.n	800b884 <_printf_i+0xb8>
 800b880:	680d      	ldr	r5, [r1, #0]
 800b882:	e003      	b.n	800b88c <_printf_i+0xc0>
 800b884:	066d      	lsls	r5, r5, #25
 800b886:	d5fb      	bpl.n	800b880 <_printf_i+0xb4>
 800b888:	680d      	ldr	r5, [r1, #0]
 800b88a:	b2ad      	uxth	r5, r5
 800b88c:	4b56      	ldr	r3, [pc, #344]	; (800b9e8 <_printf_i+0x21c>)
 800b88e:	270a      	movs	r7, #10
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	2a6f      	cmp	r2, #111	; 0x6f
 800b894:	d117      	bne.n	800b8c6 <_printf_i+0xfa>
 800b896:	2708      	movs	r7, #8
 800b898:	e015      	b.n	800b8c6 <_printf_i+0xfa>
 800b89a:	3145      	adds	r1, #69	; 0x45
 800b89c:	700a      	strb	r2, [r1, #0]
 800b89e:	4a52      	ldr	r2, [pc, #328]	; (800b9e8 <_printf_i+0x21c>)
 800b8a0:	9203      	str	r2, [sp, #12]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	6821      	ldr	r1, [r4, #0]
 800b8a6:	ca20      	ldmia	r2!, {r5}
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	0608      	lsls	r0, r1, #24
 800b8ac:	d550      	bpl.n	800b950 <_printf_i+0x184>
 800b8ae:	07cb      	lsls	r3, r1, #31
 800b8b0:	d502      	bpl.n	800b8b8 <_printf_i+0xec>
 800b8b2:	2320      	movs	r3, #32
 800b8b4:	4319      	orrs	r1, r3
 800b8b6:	6021      	str	r1, [r4, #0]
 800b8b8:	2710      	movs	r7, #16
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	d103      	bne.n	800b8c6 <_printf_i+0xfa>
 800b8be:	2320      	movs	r3, #32
 800b8c0:	6822      	ldr	r2, [r4, #0]
 800b8c2:	439a      	bics	r2, r3
 800b8c4:	6022      	str	r2, [r4, #0]
 800b8c6:	0023      	movs	r3, r4
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	3343      	adds	r3, #67	; 0x43
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	60a3      	str	r3, [r4, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	db03      	blt.n	800b8de <_printf_i+0x112>
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	6821      	ldr	r1, [r4, #0]
 800b8da:	4391      	bics	r1, r2
 800b8dc:	6021      	str	r1, [r4, #0]
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	d102      	bne.n	800b8e8 <_printf_i+0x11c>
 800b8e2:	9e04      	ldr	r6, [sp, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00c      	beq.n	800b902 <_printf_i+0x136>
 800b8e8:	9e04      	ldr	r6, [sp, #16]
 800b8ea:	0028      	movs	r0, r5
 800b8ec:	0039      	movs	r1, r7
 800b8ee:	f7f4 fc9b 	bl	8000228 <__aeabi_uidivmod>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	3e01      	subs	r6, #1
 800b8f6:	5c5b      	ldrb	r3, [r3, r1]
 800b8f8:	7033      	strb	r3, [r6, #0]
 800b8fa:	002b      	movs	r3, r5
 800b8fc:	0005      	movs	r5, r0
 800b8fe:	429f      	cmp	r7, r3
 800b900:	d9f3      	bls.n	800b8ea <_printf_i+0x11e>
 800b902:	2f08      	cmp	r7, #8
 800b904:	d109      	bne.n	800b91a <_printf_i+0x14e>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	07db      	lsls	r3, r3, #31
 800b90a:	d506      	bpl.n	800b91a <_printf_i+0x14e>
 800b90c:	6863      	ldr	r3, [r4, #4]
 800b90e:	6922      	ldr	r2, [r4, #16]
 800b910:	4293      	cmp	r3, r2
 800b912:	dc02      	bgt.n	800b91a <_printf_i+0x14e>
 800b914:	2330      	movs	r3, #48	; 0x30
 800b916:	3e01      	subs	r6, #1
 800b918:	7033      	strb	r3, [r6, #0]
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	1b9b      	subs	r3, r3, r6
 800b91e:	6123      	str	r3, [r4, #16]
 800b920:	9b07      	ldr	r3, [sp, #28]
 800b922:	0021      	movs	r1, r4
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	9805      	ldr	r0, [sp, #20]
 800b928:	9b06      	ldr	r3, [sp, #24]
 800b92a:	aa09      	add	r2, sp, #36	; 0x24
 800b92c:	f7ff fede 	bl	800b6ec <_printf_common>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d135      	bne.n	800b9a0 <_printf_i+0x1d4>
 800b934:	2001      	movs	r0, #1
 800b936:	4240      	negs	r0, r0
 800b938:	b00b      	add	sp, #44	; 0x2c
 800b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93c:	2220      	movs	r2, #32
 800b93e:	6809      	ldr	r1, [r1, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	6022      	str	r2, [r4, #0]
 800b944:	0022      	movs	r2, r4
 800b946:	2178      	movs	r1, #120	; 0x78
 800b948:	3245      	adds	r2, #69	; 0x45
 800b94a:	7011      	strb	r1, [r2, #0]
 800b94c:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <_printf_i+0x220>)
 800b94e:	e7a7      	b.n	800b8a0 <_printf_i+0xd4>
 800b950:	0648      	lsls	r0, r1, #25
 800b952:	d5ac      	bpl.n	800b8ae <_printf_i+0xe2>
 800b954:	b2ad      	uxth	r5, r5
 800b956:	e7aa      	b.n	800b8ae <_printf_i+0xe2>
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	680d      	ldr	r5, [r1, #0]
 800b95c:	1d10      	adds	r0, r2, #4
 800b95e:	6949      	ldr	r1, [r1, #20]
 800b960:	6018      	str	r0, [r3, #0]
 800b962:	6813      	ldr	r3, [r2, #0]
 800b964:	062e      	lsls	r6, r5, #24
 800b966:	d501      	bpl.n	800b96c <_printf_i+0x1a0>
 800b968:	6019      	str	r1, [r3, #0]
 800b96a:	e002      	b.n	800b972 <_printf_i+0x1a6>
 800b96c:	066d      	lsls	r5, r5, #25
 800b96e:	d5fb      	bpl.n	800b968 <_printf_i+0x19c>
 800b970:	8019      	strh	r1, [r3, #0]
 800b972:	2300      	movs	r3, #0
 800b974:	9e04      	ldr	r6, [sp, #16]
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	e7d2      	b.n	800b920 <_printf_i+0x154>
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	1d11      	adds	r1, r2, #4
 800b97e:	6019      	str	r1, [r3, #0]
 800b980:	6816      	ldr	r6, [r2, #0]
 800b982:	2100      	movs	r1, #0
 800b984:	0030      	movs	r0, r6
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	f7ff fc8a 	bl	800b2a0 <memchr>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d001      	beq.n	800b994 <_printf_i+0x1c8>
 800b990:	1b80      	subs	r0, r0, r6
 800b992:	6060      	str	r0, [r4, #4]
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	2300      	movs	r3, #0
 800b99a:	9a04      	ldr	r2, [sp, #16]
 800b99c:	7013      	strb	r3, [r2, #0]
 800b99e:	e7bf      	b.n	800b920 <_printf_i+0x154>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	0032      	movs	r2, r6
 800b9a4:	9906      	ldr	r1, [sp, #24]
 800b9a6:	9805      	ldr	r0, [sp, #20]
 800b9a8:	9d07      	ldr	r5, [sp, #28]
 800b9aa:	47a8      	blx	r5
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d0c1      	beq.n	800b934 <_printf_i+0x168>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	d415      	bmi.n	800b9e2 <_printf_i+0x216>
 800b9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b8:	68e0      	ldr	r0, [r4, #12]
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	dabc      	bge.n	800b938 <_printf_i+0x16c>
 800b9be:	0018      	movs	r0, r3
 800b9c0:	e7ba      	b.n	800b938 <_printf_i+0x16c>
 800b9c2:	0022      	movs	r2, r4
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	9906      	ldr	r1, [sp, #24]
 800b9c8:	9805      	ldr	r0, [sp, #20]
 800b9ca:	9e07      	ldr	r6, [sp, #28]
 800b9cc:	3219      	adds	r2, #25
 800b9ce:	47b0      	blx	r6
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d0af      	beq.n	800b934 <_printf_i+0x168>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	68e3      	ldr	r3, [r4, #12]
 800b9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9da:	1a9b      	subs	r3, r3, r2
 800b9dc:	42ab      	cmp	r3, r5
 800b9de:	dcf0      	bgt.n	800b9c2 <_printf_i+0x1f6>
 800b9e0:	e7e9      	b.n	800b9b6 <_printf_i+0x1ea>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	e7f7      	b.n	800b9d6 <_printf_i+0x20a>
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	0800cd45 	.word	0x0800cd45
 800b9ec:	0800cd56 	.word	0x0800cd56

0800b9f0 <_sbrk_r>:
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	b570      	push	{r4, r5, r6, lr}
 800b9f4:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_sbrk_r+0x20>)
 800b9f6:	0004      	movs	r4, r0
 800b9f8:	0008      	movs	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f5 ffe8 	bl	80019d0 <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d103      	bne.n	800ba0c <_sbrk_r+0x1c>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d000      	beq.n	800ba0c <_sbrk_r+0x1c>
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	2000241c 	.word	0x2000241c

0800ba14 <_raise_r>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	0004      	movs	r4, r0
 800ba18:	000d      	movs	r5, r1
 800ba1a:	291f      	cmp	r1, #31
 800ba1c:	d904      	bls.n	800ba28 <_raise_r+0x14>
 800ba1e:	2316      	movs	r3, #22
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	2001      	movs	r0, #1
 800ba24:	4240      	negs	r0, r0
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d004      	beq.n	800ba38 <_raise_r+0x24>
 800ba2e:	008a      	lsls	r2, r1, #2
 800ba30:	189b      	adds	r3, r3, r2
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	d108      	bne.n	800ba4a <_raise_r+0x36>
 800ba38:	0020      	movs	r0, r4
 800ba3a:	f000 f831 	bl	800baa0 <_getpid_r>
 800ba3e:	002a      	movs	r2, r5
 800ba40:	0001      	movs	r1, r0
 800ba42:	0020      	movs	r0, r4
 800ba44:	f000 f81a 	bl	800ba7c <_kill_r>
 800ba48:	e7ed      	b.n	800ba26 <_raise_r+0x12>
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	2a01      	cmp	r2, #1
 800ba4e:	d0ea      	beq.n	800ba26 <_raise_r+0x12>
 800ba50:	1c51      	adds	r1, r2, #1
 800ba52:	d103      	bne.n	800ba5c <_raise_r+0x48>
 800ba54:	2316      	movs	r3, #22
 800ba56:	3001      	adds	r0, #1
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	e7e4      	b.n	800ba26 <_raise_r+0x12>
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	0028      	movs	r0, r5
 800ba60:	601c      	str	r4, [r3, #0]
 800ba62:	4790      	blx	r2
 800ba64:	0020      	movs	r0, r4
 800ba66:	e7de      	b.n	800ba26 <_raise_r+0x12>

0800ba68 <raise>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4b03      	ldr	r3, [pc, #12]	; (800ba78 <raise+0x10>)
 800ba6c:	0001      	movs	r1, r0
 800ba6e:	6818      	ldr	r0, [r3, #0]
 800ba70:	f7ff ffd0 	bl	800ba14 <_raise_r>
 800ba74:	bd10      	pop	{r4, pc}
 800ba76:	46c0      	nop			; (mov r8, r8)
 800ba78:	20000030 	.word	0x20000030

0800ba7c <_kill_r>:
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	b570      	push	{r4, r5, r6, lr}
 800ba80:	4d06      	ldr	r5, [pc, #24]	; (800ba9c <_kill_r+0x20>)
 800ba82:	0004      	movs	r4, r0
 800ba84:	0008      	movs	r0, r1
 800ba86:	0011      	movs	r1, r2
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	f7f5 ff1f 	bl	80018cc <_kill>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d103      	bne.n	800ba9a <_kill_r+0x1e>
 800ba92:	682b      	ldr	r3, [r5, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d000      	beq.n	800ba9a <_kill_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	2000241c 	.word	0x2000241c

0800baa0 <_getpid_r>:
 800baa0:	b510      	push	{r4, lr}
 800baa2:	f7f5 ff0d 	bl	80018c0 <_getpid>
 800baa6:	bd10      	pop	{r4, pc}

0800baa8 <__swbuf_r>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	0005      	movs	r5, r0
 800baac:	000e      	movs	r6, r1
 800baae:	0014      	movs	r4, r2
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d004      	beq.n	800babe <__swbuf_r+0x16>
 800bab4:	6983      	ldr	r3, [r0, #24]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <__swbuf_r+0x16>
 800baba:	f000 f9f1 	bl	800bea0 <__sinit>
 800babe:	4b22      	ldr	r3, [pc, #136]	; (800bb48 <__swbuf_r+0xa0>)
 800bac0:	429c      	cmp	r4, r3
 800bac2:	d12e      	bne.n	800bb22 <__swbuf_r+0x7a>
 800bac4:	686c      	ldr	r4, [r5, #4]
 800bac6:	69a3      	ldr	r3, [r4, #24]
 800bac8:	60a3      	str	r3, [r4, #8]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	071b      	lsls	r3, r3, #28
 800bace:	d532      	bpl.n	800bb36 <__swbuf_r+0x8e>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d02f      	beq.n	800bb36 <__swbuf_r+0x8e>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	b2f7      	uxtb	r7, r6
 800badc:	1a98      	subs	r0, r3, r2
 800bade:	6963      	ldr	r3, [r4, #20]
 800bae0:	b2f6      	uxtb	r6, r6
 800bae2:	4283      	cmp	r3, r0
 800bae4:	dc05      	bgt.n	800baf2 <__swbuf_r+0x4a>
 800bae6:	0021      	movs	r1, r4
 800bae8:	0028      	movs	r0, r5
 800baea:	f000 f937 	bl	800bd5c <_fflush_r>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d127      	bne.n	800bb42 <__swbuf_r+0x9a>
 800baf2:	68a3      	ldr	r3, [r4, #8]
 800baf4:	3001      	adds	r0, #1
 800baf6:	3b01      	subs	r3, #1
 800baf8:	60a3      	str	r3, [r4, #8]
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	6022      	str	r2, [r4, #0]
 800bb00:	701f      	strb	r7, [r3, #0]
 800bb02:	6963      	ldr	r3, [r4, #20]
 800bb04:	4283      	cmp	r3, r0
 800bb06:	d004      	beq.n	800bb12 <__swbuf_r+0x6a>
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	07db      	lsls	r3, r3, #31
 800bb0c:	d507      	bpl.n	800bb1e <__swbuf_r+0x76>
 800bb0e:	2e0a      	cmp	r6, #10
 800bb10:	d105      	bne.n	800bb1e <__swbuf_r+0x76>
 800bb12:	0021      	movs	r1, r4
 800bb14:	0028      	movs	r0, r5
 800bb16:	f000 f921 	bl	800bd5c <_fflush_r>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d111      	bne.n	800bb42 <__swbuf_r+0x9a>
 800bb1e:	0030      	movs	r0, r6
 800bb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb22:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <__swbuf_r+0xa4>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d101      	bne.n	800bb2c <__swbuf_r+0x84>
 800bb28:	68ac      	ldr	r4, [r5, #8]
 800bb2a:	e7cc      	b.n	800bac6 <__swbuf_r+0x1e>
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <__swbuf_r+0xa8>)
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d1c9      	bne.n	800bac6 <__swbuf_r+0x1e>
 800bb32:	68ec      	ldr	r4, [r5, #12]
 800bb34:	e7c7      	b.n	800bac6 <__swbuf_r+0x1e>
 800bb36:	0021      	movs	r1, r4
 800bb38:	0028      	movs	r0, r5
 800bb3a:	f000 f80b 	bl	800bb54 <__swsetup_r>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d0c9      	beq.n	800bad6 <__swbuf_r+0x2e>
 800bb42:	2601      	movs	r6, #1
 800bb44:	4276      	negs	r6, r6
 800bb46:	e7ea      	b.n	800bb1e <__swbuf_r+0x76>
 800bb48:	0800cd88 	.word	0x0800cd88
 800bb4c:	0800cda8 	.word	0x0800cda8
 800bb50:	0800cd68 	.word	0x0800cd68

0800bb54 <__swsetup_r>:
 800bb54:	4b37      	ldr	r3, [pc, #220]	; (800bc34 <__swsetup_r+0xe0>)
 800bb56:	b570      	push	{r4, r5, r6, lr}
 800bb58:	681d      	ldr	r5, [r3, #0]
 800bb5a:	0006      	movs	r6, r0
 800bb5c:	000c      	movs	r4, r1
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	d005      	beq.n	800bb6e <__swsetup_r+0x1a>
 800bb62:	69ab      	ldr	r3, [r5, #24]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <__swsetup_r+0x1a>
 800bb68:	0028      	movs	r0, r5
 800bb6a:	f000 f999 	bl	800bea0 <__sinit>
 800bb6e:	4b32      	ldr	r3, [pc, #200]	; (800bc38 <__swsetup_r+0xe4>)
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d10f      	bne.n	800bb94 <__swsetup_r+0x40>
 800bb74:	686c      	ldr	r4, [r5, #4]
 800bb76:	230c      	movs	r3, #12
 800bb78:	5ee2      	ldrsh	r2, [r4, r3]
 800bb7a:	b293      	uxth	r3, r2
 800bb7c:	0711      	lsls	r1, r2, #28
 800bb7e:	d42d      	bmi.n	800bbdc <__swsetup_r+0x88>
 800bb80:	06d9      	lsls	r1, r3, #27
 800bb82:	d411      	bmi.n	800bba8 <__swsetup_r+0x54>
 800bb84:	2309      	movs	r3, #9
 800bb86:	2001      	movs	r0, #1
 800bb88:	6033      	str	r3, [r6, #0]
 800bb8a:	3337      	adds	r3, #55	; 0x37
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	4240      	negs	r0, r0
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	4b29      	ldr	r3, [pc, #164]	; (800bc3c <__swsetup_r+0xe8>)
 800bb96:	429c      	cmp	r4, r3
 800bb98:	d101      	bne.n	800bb9e <__swsetup_r+0x4a>
 800bb9a:	68ac      	ldr	r4, [r5, #8]
 800bb9c:	e7eb      	b.n	800bb76 <__swsetup_r+0x22>
 800bb9e:	4b28      	ldr	r3, [pc, #160]	; (800bc40 <__swsetup_r+0xec>)
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d1e8      	bne.n	800bb76 <__swsetup_r+0x22>
 800bba4:	68ec      	ldr	r4, [r5, #12]
 800bba6:	e7e6      	b.n	800bb76 <__swsetup_r+0x22>
 800bba8:	075b      	lsls	r3, r3, #29
 800bbaa:	d513      	bpl.n	800bbd4 <__swsetup_r+0x80>
 800bbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d008      	beq.n	800bbc4 <__swsetup_r+0x70>
 800bbb2:	0023      	movs	r3, r4
 800bbb4:	3344      	adds	r3, #68	; 0x44
 800bbb6:	4299      	cmp	r1, r3
 800bbb8:	d002      	beq.n	800bbc0 <__swsetup_r+0x6c>
 800bbba:	0030      	movs	r0, r6
 800bbbc:	f7ff fb8c 	bl	800b2d8 <_free_r>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6363      	str	r3, [r4, #52]	; 0x34
 800bbc4:	2224      	movs	r2, #36	; 0x24
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	4393      	bics	r3, r2
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	2300      	movs	r3, #0
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	6923      	ldr	r3, [r4, #16]
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	2308      	movs	r3, #8
 800bbd6:	89a2      	ldrh	r2, [r4, #12]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10b      	bne.n	800bbfa <__swsetup_r+0xa6>
 800bbe2:	21a0      	movs	r1, #160	; 0xa0
 800bbe4:	2280      	movs	r2, #128	; 0x80
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	0089      	lsls	r1, r1, #2
 800bbea:	0092      	lsls	r2, r2, #2
 800bbec:	400b      	ands	r3, r1
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d003      	beq.n	800bbfa <__swsetup_r+0xa6>
 800bbf2:	0021      	movs	r1, r4
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	f000 fa1f 	bl	800c038 <__smakebuf_r>
 800bbfa:	220c      	movs	r2, #12
 800bbfc:	5ea3      	ldrsh	r3, [r4, r2]
 800bbfe:	2001      	movs	r0, #1
 800bc00:	001a      	movs	r2, r3
 800bc02:	b299      	uxth	r1, r3
 800bc04:	4002      	ands	r2, r0
 800bc06:	4203      	tst	r3, r0
 800bc08:	d00f      	beq.n	800bc2a <__swsetup_r+0xd6>
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	60a2      	str	r2, [r4, #8]
 800bc0e:	6962      	ldr	r2, [r4, #20]
 800bc10:	4252      	negs	r2, r2
 800bc12:	61a2      	str	r2, [r4, #24]
 800bc14:	2000      	movs	r0, #0
 800bc16:	6922      	ldr	r2, [r4, #16]
 800bc18:	4282      	cmp	r2, r0
 800bc1a:	d1ba      	bne.n	800bb92 <__swsetup_r+0x3e>
 800bc1c:	060a      	lsls	r2, r1, #24
 800bc1e:	d5b8      	bpl.n	800bb92 <__swsetup_r+0x3e>
 800bc20:	2240      	movs	r2, #64	; 0x40
 800bc22:	4313      	orrs	r3, r2
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	3801      	subs	r0, #1
 800bc28:	e7b3      	b.n	800bb92 <__swsetup_r+0x3e>
 800bc2a:	0788      	lsls	r0, r1, #30
 800bc2c:	d400      	bmi.n	800bc30 <__swsetup_r+0xdc>
 800bc2e:	6962      	ldr	r2, [r4, #20]
 800bc30:	60a2      	str	r2, [r4, #8]
 800bc32:	e7ef      	b.n	800bc14 <__swsetup_r+0xc0>
 800bc34:	20000030 	.word	0x20000030
 800bc38:	0800cd88 	.word	0x0800cd88
 800bc3c:	0800cda8 	.word	0x0800cda8
 800bc40:	0800cd68 	.word	0x0800cd68

0800bc44 <__sflush_r>:
 800bc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc46:	898b      	ldrh	r3, [r1, #12]
 800bc48:	0005      	movs	r5, r0
 800bc4a:	000c      	movs	r4, r1
 800bc4c:	071a      	lsls	r2, r3, #28
 800bc4e:	d45f      	bmi.n	800bd10 <__sflush_r+0xcc>
 800bc50:	684a      	ldr	r2, [r1, #4]
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	dc04      	bgt.n	800bc60 <__sflush_r+0x1c>
 800bc56:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	dc01      	bgt.n	800bc60 <__sflush_r+0x1c>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc60:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d0fa      	beq.n	800bc5c <__sflush_r+0x18>
 800bc66:	2200      	movs	r2, #0
 800bc68:	2180      	movs	r1, #128	; 0x80
 800bc6a:	682e      	ldr	r6, [r5, #0]
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	001a      	movs	r2, r3
 800bc70:	0149      	lsls	r1, r1, #5
 800bc72:	400a      	ands	r2, r1
 800bc74:	420b      	tst	r3, r1
 800bc76:	d034      	beq.n	800bce2 <__sflush_r+0x9e>
 800bc78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	075b      	lsls	r3, r3, #29
 800bc7e:	d506      	bpl.n	800bc8e <__sflush_r+0x4a>
 800bc80:	6863      	ldr	r3, [r4, #4]
 800bc82:	1ac0      	subs	r0, r0, r3
 800bc84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <__sflush_r+0x4a>
 800bc8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc8c:	1ac0      	subs	r0, r0, r3
 800bc8e:	0002      	movs	r2, r0
 800bc90:	6a21      	ldr	r1, [r4, #32]
 800bc92:	2300      	movs	r3, #0
 800bc94:	0028      	movs	r0, r5
 800bc96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bc98:	47b8      	blx	r7
 800bc9a:	89a1      	ldrh	r1, [r4, #12]
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d106      	bne.n	800bcae <__sflush_r+0x6a>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	2b1d      	cmp	r3, #29
 800bca4:	d831      	bhi.n	800bd0a <__sflush_r+0xc6>
 800bca6:	4a2c      	ldr	r2, [pc, #176]	; (800bd58 <__sflush_r+0x114>)
 800bca8:	40da      	lsrs	r2, r3
 800bcaa:	07d3      	lsls	r3, r2, #31
 800bcac:	d52d      	bpl.n	800bd0a <__sflush_r+0xc6>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	04cb      	lsls	r3, r1, #19
 800bcb8:	d505      	bpl.n	800bcc6 <__sflush_r+0x82>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d102      	bne.n	800bcc4 <__sflush_r+0x80>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d100      	bne.n	800bcc6 <__sflush_r+0x82>
 800bcc4:	6560      	str	r0, [r4, #84]	; 0x54
 800bcc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcc8:	602e      	str	r6, [r5, #0]
 800bcca:	2900      	cmp	r1, #0
 800bccc:	d0c6      	beq.n	800bc5c <__sflush_r+0x18>
 800bcce:	0023      	movs	r3, r4
 800bcd0:	3344      	adds	r3, #68	; 0x44
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	d002      	beq.n	800bcdc <__sflush_r+0x98>
 800bcd6:	0028      	movs	r0, r5
 800bcd8:	f7ff fafe 	bl	800b2d8 <_free_r>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	6360      	str	r0, [r4, #52]	; 0x34
 800bce0:	e7bd      	b.n	800bc5e <__sflush_r+0x1a>
 800bce2:	2301      	movs	r3, #1
 800bce4:	0028      	movs	r0, r5
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	47b8      	blx	r7
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d1c5      	bne.n	800bc7a <__sflush_r+0x36>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d0c2      	beq.n	800bc7a <__sflush_r+0x36>
 800bcf4:	2b1d      	cmp	r3, #29
 800bcf6:	d001      	beq.n	800bcfc <__sflush_r+0xb8>
 800bcf8:	2b16      	cmp	r3, #22
 800bcfa:	d101      	bne.n	800bd00 <__sflush_r+0xbc>
 800bcfc:	602e      	str	r6, [r5, #0]
 800bcfe:	e7ad      	b.n	800bc5c <__sflush_r+0x18>
 800bd00:	2340      	movs	r3, #64	; 0x40
 800bd02:	89a2      	ldrh	r2, [r4, #12]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	e7a9      	b.n	800bc5e <__sflush_r+0x1a>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	e7fa      	b.n	800bd06 <__sflush_r+0xc2>
 800bd10:	690f      	ldr	r7, [r1, #16]
 800bd12:	2f00      	cmp	r7, #0
 800bd14:	d0a2      	beq.n	800bc5c <__sflush_r+0x18>
 800bd16:	680a      	ldr	r2, [r1, #0]
 800bd18:	600f      	str	r7, [r1, #0]
 800bd1a:	1bd2      	subs	r2, r2, r7
 800bd1c:	9201      	str	r2, [sp, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	079b      	lsls	r3, r3, #30
 800bd22:	d100      	bne.n	800bd26 <__sflush_r+0xe2>
 800bd24:	694a      	ldr	r2, [r1, #20]
 800bd26:	60a2      	str	r2, [r4, #8]
 800bd28:	9b01      	ldr	r3, [sp, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dc00      	bgt.n	800bd30 <__sflush_r+0xec>
 800bd2e:	e795      	b.n	800bc5c <__sflush_r+0x18>
 800bd30:	003a      	movs	r2, r7
 800bd32:	0028      	movs	r0, r5
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	6a21      	ldr	r1, [r4, #32]
 800bd38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd3a:	47b0      	blx	r6
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	dc06      	bgt.n	800bd4e <__sflush_r+0x10a>
 800bd40:	2340      	movs	r3, #64	; 0x40
 800bd42:	2001      	movs	r0, #1
 800bd44:	89a2      	ldrh	r2, [r4, #12]
 800bd46:	4240      	negs	r0, r0
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	e787      	b.n	800bc5e <__sflush_r+0x1a>
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	183f      	adds	r7, r7, r0
 800bd52:	1a1b      	subs	r3, r3, r0
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	e7e7      	b.n	800bd28 <__sflush_r+0xe4>
 800bd58:	20400001 	.word	0x20400001

0800bd5c <_fflush_r>:
 800bd5c:	690b      	ldr	r3, [r1, #16]
 800bd5e:	b570      	push	{r4, r5, r6, lr}
 800bd60:	0005      	movs	r5, r0
 800bd62:	000c      	movs	r4, r1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <_fflush_r+0x12>
 800bd68:	2500      	movs	r5, #0
 800bd6a:	0028      	movs	r0, r5
 800bd6c:	bd70      	pop	{r4, r5, r6, pc}
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d004      	beq.n	800bd7c <_fflush_r+0x20>
 800bd72:	6983      	ldr	r3, [r0, #24]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <_fflush_r+0x20>
 800bd78:	f000 f892 	bl	800bea0 <__sinit>
 800bd7c:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <_fflush_r+0x74>)
 800bd7e:	429c      	cmp	r4, r3
 800bd80:	d11b      	bne.n	800bdba <_fflush_r+0x5e>
 800bd82:	686c      	ldr	r4, [r5, #4]
 800bd84:	220c      	movs	r2, #12
 800bd86:	5ea3      	ldrsh	r3, [r4, r2]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0ed      	beq.n	800bd68 <_fflush_r+0xc>
 800bd8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd8e:	07d2      	lsls	r2, r2, #31
 800bd90:	d404      	bmi.n	800bd9c <_fflush_r+0x40>
 800bd92:	059b      	lsls	r3, r3, #22
 800bd94:	d402      	bmi.n	800bd9c <_fflush_r+0x40>
 800bd96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd98:	f000 f923 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800bd9c:	0028      	movs	r0, r5
 800bd9e:	0021      	movs	r1, r4
 800bda0:	f7ff ff50 	bl	800bc44 <__sflush_r>
 800bda4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bda6:	0005      	movs	r5, r0
 800bda8:	07db      	lsls	r3, r3, #31
 800bdaa:	d4de      	bmi.n	800bd6a <_fflush_r+0xe>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	059b      	lsls	r3, r3, #22
 800bdb0:	d4db      	bmi.n	800bd6a <_fflush_r+0xe>
 800bdb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb4:	f000 f916 	bl	800bfe4 <__retarget_lock_release_recursive>
 800bdb8:	e7d7      	b.n	800bd6a <_fflush_r+0xe>
 800bdba:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <_fflush_r+0x78>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	d101      	bne.n	800bdc4 <_fflush_r+0x68>
 800bdc0:	68ac      	ldr	r4, [r5, #8]
 800bdc2:	e7df      	b.n	800bd84 <_fflush_r+0x28>
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <_fflush_r+0x7c>)
 800bdc6:	429c      	cmp	r4, r3
 800bdc8:	d1dc      	bne.n	800bd84 <_fflush_r+0x28>
 800bdca:	68ec      	ldr	r4, [r5, #12]
 800bdcc:	e7da      	b.n	800bd84 <_fflush_r+0x28>
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	0800cd88 	.word	0x0800cd88
 800bdd4:	0800cda8 	.word	0x0800cda8
 800bdd8:	0800cd68 	.word	0x0800cd68

0800bddc <std>:
 800bddc:	2300      	movs	r3, #0
 800bdde:	b510      	push	{r4, lr}
 800bde0:	0004      	movs	r4, r0
 800bde2:	6003      	str	r3, [r0, #0]
 800bde4:	6043      	str	r3, [r0, #4]
 800bde6:	6083      	str	r3, [r0, #8]
 800bde8:	8181      	strh	r1, [r0, #12]
 800bdea:	6643      	str	r3, [r0, #100]	; 0x64
 800bdec:	0019      	movs	r1, r3
 800bdee:	81c2      	strh	r2, [r0, #14]
 800bdf0:	6103      	str	r3, [r0, #16]
 800bdf2:	6143      	str	r3, [r0, #20]
 800bdf4:	6183      	str	r3, [r0, #24]
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	305c      	adds	r0, #92	; 0x5c
 800bdfa:	f7ff fa65 	bl	800b2c8 <memset>
 800bdfe:	4b05      	ldr	r3, [pc, #20]	; (800be14 <std+0x38>)
 800be00:	6263      	str	r3, [r4, #36]	; 0x24
 800be02:	4b05      	ldr	r3, [pc, #20]	; (800be18 <std+0x3c>)
 800be04:	6224      	str	r4, [r4, #32]
 800be06:	62a3      	str	r3, [r4, #40]	; 0x28
 800be08:	4b04      	ldr	r3, [pc, #16]	; (800be1c <std+0x40>)
 800be0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <std+0x44>)
 800be0e:	6323      	str	r3, [r4, #48]	; 0x30
 800be10:	bd10      	pop	{r4, pc}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	0800c0e1 	.word	0x0800c0e1
 800be18:	0800c109 	.word	0x0800c109
 800be1c:	0800c141 	.word	0x0800c141
 800be20:	0800c16d 	.word	0x0800c16d

0800be24 <_cleanup_r>:
 800be24:	b510      	push	{r4, lr}
 800be26:	4902      	ldr	r1, [pc, #8]	; (800be30 <_cleanup_r+0xc>)
 800be28:	f000 f8ba 	bl	800bfa0 <_fwalk_reent>
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	0800bd5d 	.word	0x0800bd5d

0800be34 <__sfmoreglue>:
 800be34:	b570      	push	{r4, r5, r6, lr}
 800be36:	2568      	movs	r5, #104	; 0x68
 800be38:	1e4a      	subs	r2, r1, #1
 800be3a:	4355      	muls	r5, r2
 800be3c:	000e      	movs	r6, r1
 800be3e:	0029      	movs	r1, r5
 800be40:	3174      	adds	r1, #116	; 0x74
 800be42:	f7ff fa93 	bl	800b36c <_malloc_r>
 800be46:	1e04      	subs	r4, r0, #0
 800be48:	d008      	beq.n	800be5c <__sfmoreglue+0x28>
 800be4a:	2100      	movs	r1, #0
 800be4c:	002a      	movs	r2, r5
 800be4e:	6001      	str	r1, [r0, #0]
 800be50:	6046      	str	r6, [r0, #4]
 800be52:	300c      	adds	r0, #12
 800be54:	60a0      	str	r0, [r4, #8]
 800be56:	3268      	adds	r2, #104	; 0x68
 800be58:	f7ff fa36 	bl	800b2c8 <memset>
 800be5c:	0020      	movs	r0, r4
 800be5e:	bd70      	pop	{r4, r5, r6, pc}

0800be60 <__sfp_lock_acquire>:
 800be60:	b510      	push	{r4, lr}
 800be62:	4802      	ldr	r0, [pc, #8]	; (800be6c <__sfp_lock_acquire+0xc>)
 800be64:	f000 f8bd 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	46c0      	nop			; (mov r8, r8)
 800be6c:	20002418 	.word	0x20002418

0800be70 <__sfp_lock_release>:
 800be70:	b510      	push	{r4, lr}
 800be72:	4802      	ldr	r0, [pc, #8]	; (800be7c <__sfp_lock_release+0xc>)
 800be74:	f000 f8b6 	bl	800bfe4 <__retarget_lock_release_recursive>
 800be78:	bd10      	pop	{r4, pc}
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	20002418 	.word	0x20002418

0800be80 <__sinit_lock_acquire>:
 800be80:	b510      	push	{r4, lr}
 800be82:	4802      	ldr	r0, [pc, #8]	; (800be8c <__sinit_lock_acquire+0xc>)
 800be84:	f000 f8ad 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	46c0      	nop			; (mov r8, r8)
 800be8c:	20002413 	.word	0x20002413

0800be90 <__sinit_lock_release>:
 800be90:	b510      	push	{r4, lr}
 800be92:	4802      	ldr	r0, [pc, #8]	; (800be9c <__sinit_lock_release+0xc>)
 800be94:	f000 f8a6 	bl	800bfe4 <__retarget_lock_release_recursive>
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	20002413 	.word	0x20002413

0800bea0 <__sinit>:
 800bea0:	b513      	push	{r0, r1, r4, lr}
 800bea2:	0004      	movs	r4, r0
 800bea4:	f7ff ffec 	bl	800be80 <__sinit_lock_acquire>
 800bea8:	69a3      	ldr	r3, [r4, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <__sinit+0x14>
 800beae:	f7ff ffef 	bl	800be90 <__sinit_lock_release>
 800beb2:	bd13      	pop	{r0, r1, r4, pc}
 800beb4:	64a3      	str	r3, [r4, #72]	; 0x48
 800beb6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800beb8:	6523      	str	r3, [r4, #80]	; 0x50
 800beba:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <__sinit+0x68>)
 800bebc:	4a13      	ldr	r2, [pc, #76]	; (800bf0c <__sinit+0x6c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	d101      	bne.n	800becc <__sinit+0x2c>
 800bec8:	2301      	movs	r3, #1
 800beca:	61a3      	str	r3, [r4, #24]
 800becc:	0020      	movs	r0, r4
 800bece:	f000 f81f 	bl	800bf10 <__sfp>
 800bed2:	6060      	str	r0, [r4, #4]
 800bed4:	0020      	movs	r0, r4
 800bed6:	f000 f81b 	bl	800bf10 <__sfp>
 800beda:	60a0      	str	r0, [r4, #8]
 800bedc:	0020      	movs	r0, r4
 800bede:	f000 f817 	bl	800bf10 <__sfp>
 800bee2:	2200      	movs	r2, #0
 800bee4:	2104      	movs	r1, #4
 800bee6:	60e0      	str	r0, [r4, #12]
 800bee8:	6860      	ldr	r0, [r4, #4]
 800beea:	f7ff ff77 	bl	800bddc <std>
 800beee:	2201      	movs	r2, #1
 800bef0:	2109      	movs	r1, #9
 800bef2:	68a0      	ldr	r0, [r4, #8]
 800bef4:	f7ff ff72 	bl	800bddc <std>
 800bef8:	2202      	movs	r2, #2
 800befa:	2112      	movs	r1, #18
 800befc:	68e0      	ldr	r0, [r4, #12]
 800befe:	f7ff ff6d 	bl	800bddc <std>
 800bf02:	2301      	movs	r3, #1
 800bf04:	61a3      	str	r3, [r4, #24]
 800bf06:	e7d2      	b.n	800beae <__sinit+0xe>
 800bf08:	0800cd30 	.word	0x0800cd30
 800bf0c:	0800be25 	.word	0x0800be25

0800bf10 <__sfp>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	0007      	movs	r7, r0
 800bf14:	f7ff ffa4 	bl	800be60 <__sfp_lock_acquire>
 800bf18:	4b1f      	ldr	r3, [pc, #124]	; (800bf98 <__sfp+0x88>)
 800bf1a:	681e      	ldr	r6, [r3, #0]
 800bf1c:	69b3      	ldr	r3, [r6, #24]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d102      	bne.n	800bf28 <__sfp+0x18>
 800bf22:	0030      	movs	r0, r6
 800bf24:	f7ff ffbc 	bl	800bea0 <__sinit>
 800bf28:	3648      	adds	r6, #72	; 0x48
 800bf2a:	68b4      	ldr	r4, [r6, #8]
 800bf2c:	6873      	ldr	r3, [r6, #4]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	d504      	bpl.n	800bf3c <__sfp+0x2c>
 800bf32:	6833      	ldr	r3, [r6, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d022      	beq.n	800bf7e <__sfp+0x6e>
 800bf38:	6836      	ldr	r6, [r6, #0]
 800bf3a:	e7f6      	b.n	800bf2a <__sfp+0x1a>
 800bf3c:	220c      	movs	r2, #12
 800bf3e:	5ea5      	ldrsh	r5, [r4, r2]
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	d11a      	bne.n	800bf7a <__sfp+0x6a>
 800bf44:	0020      	movs	r0, r4
 800bf46:	4b15      	ldr	r3, [pc, #84]	; (800bf9c <__sfp+0x8c>)
 800bf48:	3058      	adds	r0, #88	; 0x58
 800bf4a:	60e3      	str	r3, [r4, #12]
 800bf4c:	6665      	str	r5, [r4, #100]	; 0x64
 800bf4e:	f000 f847 	bl	800bfe0 <__retarget_lock_init_recursive>
 800bf52:	f7ff ff8d 	bl	800be70 <__sfp_lock_release>
 800bf56:	0020      	movs	r0, r4
 800bf58:	2208      	movs	r2, #8
 800bf5a:	0029      	movs	r1, r5
 800bf5c:	6025      	str	r5, [r4, #0]
 800bf5e:	60a5      	str	r5, [r4, #8]
 800bf60:	6065      	str	r5, [r4, #4]
 800bf62:	6125      	str	r5, [r4, #16]
 800bf64:	6165      	str	r5, [r4, #20]
 800bf66:	61a5      	str	r5, [r4, #24]
 800bf68:	305c      	adds	r0, #92	; 0x5c
 800bf6a:	f7ff f9ad 	bl	800b2c8 <memset>
 800bf6e:	6365      	str	r5, [r4, #52]	; 0x34
 800bf70:	63a5      	str	r5, [r4, #56]	; 0x38
 800bf72:	64a5      	str	r5, [r4, #72]	; 0x48
 800bf74:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bf76:	0020      	movs	r0, r4
 800bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf7a:	3468      	adds	r4, #104	; 0x68
 800bf7c:	e7d7      	b.n	800bf2e <__sfp+0x1e>
 800bf7e:	2104      	movs	r1, #4
 800bf80:	0038      	movs	r0, r7
 800bf82:	f7ff ff57 	bl	800be34 <__sfmoreglue>
 800bf86:	1e04      	subs	r4, r0, #0
 800bf88:	6030      	str	r0, [r6, #0]
 800bf8a:	d1d5      	bne.n	800bf38 <__sfp+0x28>
 800bf8c:	f7ff ff70 	bl	800be70 <__sfp_lock_release>
 800bf90:	230c      	movs	r3, #12
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	e7ef      	b.n	800bf76 <__sfp+0x66>
 800bf96:	46c0      	nop			; (mov r8, r8)
 800bf98:	0800cd30 	.word	0x0800cd30
 800bf9c:	ffff0001 	.word	0xffff0001

0800bfa0 <_fwalk_reent>:
 800bfa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfa2:	0004      	movs	r4, r0
 800bfa4:	0006      	movs	r6, r0
 800bfa6:	2700      	movs	r7, #0
 800bfa8:	9101      	str	r1, [sp, #4]
 800bfaa:	3448      	adds	r4, #72	; 0x48
 800bfac:	6863      	ldr	r3, [r4, #4]
 800bfae:	68a5      	ldr	r5, [r4, #8]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	9b00      	ldr	r3, [sp, #0]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	d504      	bpl.n	800bfc4 <_fwalk_reent+0x24>
 800bfba:	6824      	ldr	r4, [r4, #0]
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	d1f5      	bne.n	800bfac <_fwalk_reent+0xc>
 800bfc0:	0038      	movs	r0, r7
 800bfc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfc4:	89ab      	ldrh	r3, [r5, #12]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d908      	bls.n	800bfdc <_fwalk_reent+0x3c>
 800bfca:	220e      	movs	r2, #14
 800bfcc:	5eab      	ldrsh	r3, [r5, r2]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	d004      	beq.n	800bfdc <_fwalk_reent+0x3c>
 800bfd2:	0029      	movs	r1, r5
 800bfd4:	0030      	movs	r0, r6
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	4798      	blx	r3
 800bfda:	4307      	orrs	r7, r0
 800bfdc:	3568      	adds	r5, #104	; 0x68
 800bfde:	e7e8      	b.n	800bfb2 <_fwalk_reent+0x12>

0800bfe0 <__retarget_lock_init_recursive>:
 800bfe0:	4770      	bx	lr

0800bfe2 <__retarget_lock_acquire_recursive>:
 800bfe2:	4770      	bx	lr

0800bfe4 <__retarget_lock_release_recursive>:
 800bfe4:	4770      	bx	lr
	...

0800bfe8 <__swhatbuf_r>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	000e      	movs	r6, r1
 800bfec:	001d      	movs	r5, r3
 800bfee:	230e      	movs	r3, #14
 800bff0:	5ec9      	ldrsh	r1, [r1, r3]
 800bff2:	0014      	movs	r4, r2
 800bff4:	b096      	sub	sp, #88	; 0x58
 800bff6:	2900      	cmp	r1, #0
 800bff8:	da07      	bge.n	800c00a <__swhatbuf_r+0x22>
 800bffa:	2300      	movs	r3, #0
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	89b3      	ldrh	r3, [r6, #12]
 800c000:	061b      	lsls	r3, r3, #24
 800c002:	d411      	bmi.n	800c028 <__swhatbuf_r+0x40>
 800c004:	2380      	movs	r3, #128	; 0x80
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	e00f      	b.n	800c02a <__swhatbuf_r+0x42>
 800c00a:	466a      	mov	r2, sp
 800c00c:	f000 f8da 	bl	800c1c4 <_fstat_r>
 800c010:	2800      	cmp	r0, #0
 800c012:	dbf2      	blt.n	800bffa <__swhatbuf_r+0x12>
 800c014:	23f0      	movs	r3, #240	; 0xf0
 800c016:	9901      	ldr	r1, [sp, #4]
 800c018:	021b      	lsls	r3, r3, #8
 800c01a:	4019      	ands	r1, r3
 800c01c:	4b05      	ldr	r3, [pc, #20]	; (800c034 <__swhatbuf_r+0x4c>)
 800c01e:	18c9      	adds	r1, r1, r3
 800c020:	424b      	negs	r3, r1
 800c022:	4159      	adcs	r1, r3
 800c024:	6029      	str	r1, [r5, #0]
 800c026:	e7ed      	b.n	800c004 <__swhatbuf_r+0x1c>
 800c028:	2340      	movs	r3, #64	; 0x40
 800c02a:	2000      	movs	r0, #0
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	b016      	add	sp, #88	; 0x58
 800c030:	bd70      	pop	{r4, r5, r6, pc}
 800c032:	46c0      	nop			; (mov r8, r8)
 800c034:	ffffe000 	.word	0xffffe000

0800c038 <__smakebuf_r>:
 800c038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c03a:	2602      	movs	r6, #2
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	0005      	movs	r5, r0
 800c040:	000c      	movs	r4, r1
 800c042:	4233      	tst	r3, r6
 800c044:	d006      	beq.n	800c054 <__smakebuf_r+0x1c>
 800c046:	0023      	movs	r3, r4
 800c048:	3347      	adds	r3, #71	; 0x47
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	2301      	movs	r3, #1
 800c050:	6163      	str	r3, [r4, #20]
 800c052:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c054:	466a      	mov	r2, sp
 800c056:	ab01      	add	r3, sp, #4
 800c058:	f7ff ffc6 	bl	800bfe8 <__swhatbuf_r>
 800c05c:	9900      	ldr	r1, [sp, #0]
 800c05e:	0007      	movs	r7, r0
 800c060:	0028      	movs	r0, r5
 800c062:	f7ff f983 	bl	800b36c <_malloc_r>
 800c066:	2800      	cmp	r0, #0
 800c068:	d108      	bne.n	800c07c <__smakebuf_r+0x44>
 800c06a:	220c      	movs	r2, #12
 800c06c:	5ea3      	ldrsh	r3, [r4, r2]
 800c06e:	059a      	lsls	r2, r3, #22
 800c070:	d4ef      	bmi.n	800c052 <__smakebuf_r+0x1a>
 800c072:	2203      	movs	r2, #3
 800c074:	4393      	bics	r3, r2
 800c076:	431e      	orrs	r6, r3
 800c078:	81a6      	strh	r6, [r4, #12]
 800c07a:	e7e4      	b.n	800c046 <__smakebuf_r+0xe>
 800c07c:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <__smakebuf_r+0x84>)
 800c07e:	62ab      	str	r3, [r5, #40]	; 0x28
 800c080:	2380      	movs	r3, #128	; 0x80
 800c082:	89a2      	ldrh	r2, [r4, #12]
 800c084:	6020      	str	r0, [r4, #0]
 800c086:	4313      	orrs	r3, r2
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	6120      	str	r0, [r4, #16]
 800c08e:	6163      	str	r3, [r4, #20]
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00d      	beq.n	800c0b2 <__smakebuf_r+0x7a>
 800c096:	0028      	movs	r0, r5
 800c098:	230e      	movs	r3, #14
 800c09a:	5ee1      	ldrsh	r1, [r4, r3]
 800c09c:	f000 f8a4 	bl	800c1e8 <_isatty_r>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d006      	beq.n	800c0b2 <__smakebuf_r+0x7a>
 800c0a4:	2203      	movs	r2, #3
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	4393      	bics	r3, r2
 800c0aa:	001a      	movs	r2, r3
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	81a3      	strh	r3, [r4, #12]
 800c0b2:	89a0      	ldrh	r0, [r4, #12]
 800c0b4:	4307      	orrs	r7, r0
 800c0b6:	81a7      	strh	r7, [r4, #12]
 800c0b8:	e7cb      	b.n	800c052 <__smakebuf_r+0x1a>
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	0800be25 	.word	0x0800be25

0800c0c0 <__malloc_lock>:
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	4802      	ldr	r0, [pc, #8]	; (800c0cc <__malloc_lock+0xc>)
 800c0c4:	f7ff ff8d 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800c0c8:	bd10      	pop	{r4, pc}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	20002414 	.word	0x20002414

0800c0d0 <__malloc_unlock>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	4802      	ldr	r0, [pc, #8]	; (800c0dc <__malloc_unlock+0xc>)
 800c0d4:	f7ff ff86 	bl	800bfe4 <__retarget_lock_release_recursive>
 800c0d8:	bd10      	pop	{r4, pc}
 800c0da:	46c0      	nop			; (mov r8, r8)
 800c0dc:	20002414 	.word	0x20002414

0800c0e0 <__sread>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	000c      	movs	r4, r1
 800c0e4:	250e      	movs	r5, #14
 800c0e6:	5f49      	ldrsh	r1, [r1, r5]
 800c0e8:	f000 f8a4 	bl	800c234 <_read_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	db03      	blt.n	800c0f8 <__sread+0x18>
 800c0f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c0f2:	181b      	adds	r3, r3, r0
 800c0f4:	6563      	str	r3, [r4, #84]	; 0x54
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	4a02      	ldr	r2, [pc, #8]	; (800c104 <__sread+0x24>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	e7f9      	b.n	800c0f6 <__sread+0x16>
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	ffffefff 	.word	0xffffefff

0800c108 <__swrite>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	001f      	movs	r7, r3
 800c10c:	898b      	ldrh	r3, [r1, #12]
 800c10e:	0005      	movs	r5, r0
 800c110:	000c      	movs	r4, r1
 800c112:	0016      	movs	r6, r2
 800c114:	05db      	lsls	r3, r3, #23
 800c116:	d505      	bpl.n	800c124 <__swrite+0x1c>
 800c118:	230e      	movs	r3, #14
 800c11a:	5ec9      	ldrsh	r1, [r1, r3]
 800c11c:	2200      	movs	r2, #0
 800c11e:	2302      	movs	r3, #2
 800c120:	f000 f874 	bl	800c20c <_lseek_r>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	4a05      	ldr	r2, [pc, #20]	; (800c13c <__swrite+0x34>)
 800c128:	0028      	movs	r0, r5
 800c12a:	4013      	ands	r3, r2
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	0032      	movs	r2, r6
 800c130:	230e      	movs	r3, #14
 800c132:	5ee1      	ldrsh	r1, [r4, r3]
 800c134:	003b      	movs	r3, r7
 800c136:	f000 f81f 	bl	800c178 <_write_r>
 800c13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c13c:	ffffefff 	.word	0xffffefff

0800c140 <__sseek>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	000c      	movs	r4, r1
 800c144:	250e      	movs	r5, #14
 800c146:	5f49      	ldrsh	r1, [r1, r5]
 800c148:	f000 f860 	bl	800c20c <_lseek_r>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	1c42      	adds	r2, r0, #1
 800c150:	d103      	bne.n	800c15a <__sseek+0x1a>
 800c152:	4a05      	ldr	r2, [pc, #20]	; (800c168 <__sseek+0x28>)
 800c154:	4013      	ands	r3, r2
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	2280      	movs	r2, #128	; 0x80
 800c15c:	0152      	lsls	r2, r2, #5
 800c15e:	4313      	orrs	r3, r2
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	6560      	str	r0, [r4, #84]	; 0x54
 800c164:	e7f8      	b.n	800c158 <__sseek+0x18>
 800c166:	46c0      	nop			; (mov r8, r8)
 800c168:	ffffefff 	.word	0xffffefff

0800c16c <__sclose>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	230e      	movs	r3, #14
 800c170:	5ec9      	ldrsh	r1, [r1, r3]
 800c172:	f000 f815 	bl	800c1a0 <_close_r>
 800c176:	bd10      	pop	{r4, pc}

0800c178 <_write_r>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	0004      	movs	r4, r0
 800c17c:	0008      	movs	r0, r1
 800c17e:	0011      	movs	r1, r2
 800c180:	001a      	movs	r2, r3
 800c182:	2300      	movs	r3, #0
 800c184:	4d05      	ldr	r5, [pc, #20]	; (800c19c <_write_r+0x24>)
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f7f5 fbd9 	bl	800193e <_write>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d103      	bne.n	800c198 <_write_r+0x20>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d000      	beq.n	800c198 <_write_r+0x20>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	46c0      	nop			; (mov r8, r8)
 800c19c:	2000241c 	.word	0x2000241c

0800c1a0 <_close_r>:
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	b570      	push	{r4, r5, r6, lr}
 800c1a4:	4d06      	ldr	r5, [pc, #24]	; (800c1c0 <_close_r+0x20>)
 800c1a6:	0004      	movs	r4, r0
 800c1a8:	0008      	movs	r0, r1
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	f7f5 fbe3 	bl	8001976 <_close>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d103      	bne.n	800c1bc <_close_r+0x1c>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d000      	beq.n	800c1bc <_close_r+0x1c>
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	2000241c 	.word	0x2000241c

0800c1c4 <_fstat_r>:
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	b570      	push	{r4, r5, r6, lr}
 800c1c8:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_fstat_r+0x20>)
 800c1ca:	0004      	movs	r4, r0
 800c1cc:	0008      	movs	r0, r1
 800c1ce:	0011      	movs	r1, r2
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	f7f5 fbda 	bl	800198a <_fstat>
 800c1d6:	1c43      	adds	r3, r0, #1
 800c1d8:	d103      	bne.n	800c1e2 <_fstat_r+0x1e>
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d000      	beq.n	800c1e2 <_fstat_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd70      	pop	{r4, r5, r6, pc}
 800c1e4:	2000241c 	.word	0x2000241c

0800c1e8 <_isatty_r>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	4d06      	ldr	r5, [pc, #24]	; (800c208 <_isatty_r+0x20>)
 800c1ee:	0004      	movs	r4, r0
 800c1f0:	0008      	movs	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f5 fbd7 	bl	80019a6 <_isatty>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d103      	bne.n	800c204 <_isatty_r+0x1c>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d000      	beq.n	800c204 <_isatty_r+0x1c>
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	bd70      	pop	{r4, r5, r6, pc}
 800c206:	46c0      	nop			; (mov r8, r8)
 800c208:	2000241c 	.word	0x2000241c

0800c20c <_lseek_r>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	0004      	movs	r4, r0
 800c210:	0008      	movs	r0, r1
 800c212:	0011      	movs	r1, r2
 800c214:	001a      	movs	r2, r3
 800c216:	2300      	movs	r3, #0
 800c218:	4d05      	ldr	r5, [pc, #20]	; (800c230 <_lseek_r+0x24>)
 800c21a:	602b      	str	r3, [r5, #0]
 800c21c:	f7f5 fbcc 	bl	80019b8 <_lseek>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d103      	bne.n	800c22c <_lseek_r+0x20>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d000      	beq.n	800c22c <_lseek_r+0x20>
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	2000241c 	.word	0x2000241c

0800c234 <_read_r>:
 800c234:	b570      	push	{r4, r5, r6, lr}
 800c236:	0004      	movs	r4, r0
 800c238:	0008      	movs	r0, r1
 800c23a:	0011      	movs	r1, r2
 800c23c:	001a      	movs	r2, r3
 800c23e:	2300      	movs	r3, #0
 800c240:	4d05      	ldr	r5, [pc, #20]	; (800c258 <_read_r+0x24>)
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	f7f5 fb5e 	bl	8001904 <_read>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d103      	bne.n	800c254 <_read_r+0x20>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d000      	beq.n	800c254 <_read_r+0x20>
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	bd70      	pop	{r4, r5, r6, pc}
 800c256:	46c0      	nop			; (mov r8, r8)
 800c258:	2000241c 	.word	0x2000241c

0800c25c <_init>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	46c0      	nop			; (mov r8, r8)
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr

0800c268 <_fini>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr
